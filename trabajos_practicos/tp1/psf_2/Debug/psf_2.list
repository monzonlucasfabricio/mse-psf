
psf_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  08006ea0  08006ea0  00016ea0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a94  08007a94  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a9c  08007a9c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a9c  08007a9c  00017a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa0  08007aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08007aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          00000628  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000082c  2000082c  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011840  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e4b  00000000  00000000  00031a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  000348c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00035640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277dd  00000000  00000000  00036230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135f5  00000000  00000000  0005da0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5142  00000000  00000000  00071002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156144  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004544  00000000  00000000  00156194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006e88 	.word	0x08006e88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	08006e88 	.word	0x08006e88

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295
 8000be6:	f000 b9bf 	b.w	8000f68 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000f80:	4a1a      	ldr	r2, [pc, #104]	; (8000fec <MX_ADC1_Init+0x80>)
 8000f82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f8a:	605a      	str	r2, [r3, #4]
  //ADC_RESOLUTION_6B
  //ADC_RESOLUTION_10B
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000f8e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <MX_ADC1_Init+0x84>)
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <MX_ADC1_Init+0x7c>)
 8000fd0:	f001 f9aa 	bl	8002328 <HAL_ADC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fda:	f000 fae1 	bl	80015a0 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000220 	.word	0x20000220
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	0f000001 	.word	0x0f000001

08000ff4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_ADC_MspInit+0x7c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d127      	bne.n	8001066 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	4a15      	ldr	r2, [pc, #84]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	6453      	str	r3, [r2, #68]	; 0x44
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_ADC_MspInit+0x80>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_ADC_MspInit+0x80>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_1_Pin;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_1_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_ADC_MspInit+0x84>)
 8001062:	f001 fc6f 	bl	8002944 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40012000 	.word	0x40012000
 8001074:	40023800 	.word	0x40023800
 8001078:	40020000 	.word	0x40020000

0800107c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001082:	463b      	mov	r3, r7
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_DAC_Init+0x60>)
 800108c:	4a14      	ldr	r2, [pc, #80]	; (80010e0 <MX_DAC_Init+0x64>)
 800108e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <MX_DAC_Init+0x60>)
 8001092:	f001 fb6e 	bl	8002772 <HAL_DAC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800109c:	f000 fa80 	bl	80015a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	4619      	mov	r1, r3
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <MX_DAC_Init+0x60>)
 80010b0:	f001 fbf8 	bl	80028a4 <HAL_DAC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010ba:	f000 fa71 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 80010be:	2100      	movs	r1, #0
 80010c0:	4806      	ldr	r0, [pc, #24]	; (80010dc <MX_DAC_Init+0x60>)
 80010c2:	f001 fb78 	bl	80027b6 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80010c6:	2300      	movs	r3, #0
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <MX_DAC_Init+0x60>)
 80010ce:	f001 fbc4 	bl	800285a <HAL_DAC_SetValue>

  /* USER CODE END DAC_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000268 	.word	0x20000268
 80010e0:	40007400 	.word	0x40007400

080010e4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_DAC_MspInit+0x7c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d127      	bne.n	8001156 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_DAC_MspInit+0x80>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_DAC_MspInit+0x80>)
 8001110:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_DAC_MspInit+0x80>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_DAC_MspInit+0x80>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_DAC_MspInit+0x80>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_DAC_MspInit+0x80>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113e:	2310      	movs	r3, #16
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	2303      	movs	r3, #3
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_DAC_MspInit+0x84>)
 8001152:	f001 fbf7 	bl	8002944 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40007400 	.word	0x40007400
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000

0800116c <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	; 0x30
 8001170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	4b6d      	ldr	r3, [pc, #436]	; (800133c <MX_GPIO_Init+0x1d0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a6c      	ldr	r2, [pc, #432]	; (800133c <MX_GPIO_Init+0x1d0>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b6a      	ldr	r3, [pc, #424]	; (800133c <MX_GPIO_Init+0x1d0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	61bb      	str	r3, [r7, #24]
 800119c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	4b66      	ldr	r3, [pc, #408]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a65      	ldr	r2, [pc, #404]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b63      	ldr	r3, [pc, #396]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b5f      	ldr	r3, [pc, #380]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a5e      	ldr	r2, [pc, #376]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b5c      	ldr	r3, [pc, #368]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b58      	ldr	r3, [pc, #352]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a57      	ldr	r2, [pc, #348]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b55      	ldr	r3, [pc, #340]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b51      	ldr	r3, [pc, #324]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a50      	ldr	r2, [pc, #320]	; (800133c <MX_GPIO_Init+0x1d0>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b4e      	ldr	r3, [pc, #312]	; (800133c <MX_GPIO_Init+0x1d0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <MX_GPIO_Init+0x1d0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a49      	ldr	r2, [pc, #292]	; (800133c <MX_GPIO_Init+0x1d0>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <MX_GPIO_Init+0x1d0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800122a:	2200      	movs	r2, #0
 800122c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001230:	4843      	ldr	r0, [pc, #268]	; (8001340 <MX_GPIO_Init+0x1d4>)
 8001232:	f001 fd33 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	4842      	ldr	r0, [pc, #264]	; (8001344 <MX_GPIO_Init+0x1d8>)
 800123c:	f001 fd2e 	bl	8002c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001246:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800124a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	483c      	ldr	r0, [pc, #240]	; (8001348 <MX_GPIO_Init+0x1dc>)
 8001258:	f001 fb74 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800125c:	2332      	movs	r3, #50	; 0x32
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800126c:	230b      	movs	r3, #11
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	4834      	ldr	r0, [pc, #208]	; (8001348 <MX_GPIO_Init+0x1dc>)
 8001278:	f001 fb64 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800127c:	2386      	movs	r3, #134	; 0x86
 800127e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800128c:	230b      	movs	r3, #11
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	482d      	ldr	r0, [pc, #180]	; (800134c <MX_GPIO_Init+0x1e0>)
 8001298:	f001 fb54 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800129c:	f244 0381 	movw	r3, #16513	; 0x4081
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a2:	2301      	movs	r3, #1
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4822      	ldr	r0, [pc, #136]	; (8001340 <MX_GPIO_Init+0x1d4>)
 80012b6:	f001 fb45 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012cc:	230b      	movs	r3, #11
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	481a      	ldr	r0, [pc, #104]	; (8001340 <MX_GPIO_Init+0x1d4>)
 80012d8:	f001 fb34 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012dc:	2340      	movs	r3, #64	; 0x40
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4814      	ldr	r0, [pc, #80]	; (8001344 <MX_GPIO_Init+0x1d8>)
 80012f4:	f001 fb26 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <MX_GPIO_Init+0x1d8>)
 800130c:	f001 fb1a 	bl	8002944 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001310:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001322:	230b      	movs	r3, #11
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_GPIO_Init+0x1d8>)
 800132e:	f001 fb09 	bl	8002944 <HAL_GPIO_Init>

}
 8001332:	bf00      	nop
 8001334:	3730      	adds	r7, #48	; 0x30
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40020400 	.word	0x40020400
 8001344:	40021800 	.word	0x40021800
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <main>:
uint16_t sweept = 10;

void SystemClock_Config(void);

int main(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0c2      	sub	sp, #264	; 0x108
 8001354:	af00      	add	r7, sp, #0
  /* System Initialization */
  HAL_Init();
 8001356:	f000 ff51 	bl	80021fc <HAL_Init>
  SystemClock_Config();
 800135a:	f000 f8b7 	bl	80014cc <SystemClock_Config>
  MX_GPIO_Init();
 800135e:	f7ff ff05 	bl	800116c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001362:	f000 fab5 	bl	80018d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001366:	f000 fb79 	bl	8001a5c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800136a:	f7ff fdff 	bl	8000f6c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800136e:	f000 fa85 	bl	800187c <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001372:	f7ff fe83 	bl	800107c <MX_DAC_Init>

  uint16_t sample = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
  DBG_CyclesCounterInit(CLOCK_SPEED); // Enable the cycle counter
 800137c:	4845      	ldr	r0, [pc, #276]	; (8001494 <main+0x144>)
 800137e:	f000 f915 	bl	80015ac <DBG_CyclesCounterInit>
  int16_t adc [N_MUESTRAS];
  uint16_t tone_value = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
  float t = 0;
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

  while (1)
  {
	/* Reset cycle counter to 0 */
	DBG_CyclesCounterReset();
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <main+0x148>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
//	 adc[sample] = ((((int16_t )ADC_Read(0)-512))>>(10-BITS))<<(6+(10-BITS)); //10 bits

	/* Send the sample in an Array */
//     uartWriteByteArray(&huart2, (uint8_t* )&adc[sample], sizeof(adc[0]));

	t = tick/(float)header.fs;
 8001396:	4b41      	ldr	r3, [pc, #260]	; (800149c <main+0x14c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <main+0x150>)
 80013a4:	895b      	ldrh	r3, [r3, #10]
 80013a6:	ee07 3a90 	vmov	s15, r3
 80013aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b2:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
	tick++;
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <main+0x14c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	4a37      	ldr	r2, [pc, #220]	; (800149c <main+0x14c>)
 80013be:	6013      	str	r3, [r2, #0]
	
	/* Calculate the the tone value. The nucleo board has a DAC that can work in 12 or 8 bits.*/
	tone_value = 2048*arm_sin_f32 (t*tone*2*PI)+2048;
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <main+0x154>)
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013cc:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013d8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80014a8 <main+0x158>
 80013dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	f000 fbec 	bl	8001bc0 <arm_sin_f32>
 80013e8:	eef0 7a40 	vmov.f32	s15, s0
 80013ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80014ac <main+0x15c>
 80013f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f4:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80014ac <main+0x15c>
 80013f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001400:	ee17 3a90 	vmov	r3, s15
 8001404:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    DAC_Write( &hdac, tone_value); 
 8001408:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800140c:	4619      	mov	r1, r3
 800140e:	4828      	ldr	r0, [pc, #160]	; (80014b0 <main+0x160>)
 8001410:	f000 f8f3 	bl	80015fa <DAC_Write>

	/* Increment the sample counter and check if we are in the last sample */
	if ( ++sample==header.N ) 
 8001414:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8001418:	3301      	adds	r3, #1
 800141a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 800141e:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <main+0x150>)
 8001420:	891b      	ldrh	r3, [r3, #8]
 8001422:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8001426:	429a      	cmp	r2, r3
 8001428:	d123      	bne.n	8001472 <main+0x122>
	{
		/* Send the max value */
//		DAC_Write( &hdac, 2048);

		/* Blinks at fs/N frequency */
		gpioToggle (GPIOB,LD1_Pin);
 800142a:	2101      	movs	r1, #1
 800142c:	4821      	ldr	r0, [pc, #132]	; (80014b4 <main+0x164>)
 800142e:	f000 f8d5 	bl	80015dc <gpioToggle>

		/* Calculate max, min and rms */
		arm_max_q15 ( adc, header.N, &header.maxValue,&header.maxIndex );
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <main+0x150>)
 8001434:	891b      	ldrh	r3, [r3, #8]
 8001436:	4619      	mov	r1, r3
 8001438:	4638      	mov	r0, r7
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <main+0x168>)
 800143c:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <main+0x16c>)
 800143e:	f000 fd29 	bl	8001e94 <arm_max_q15>
		arm_min_q15 ( adc, header.N, &header.minValue,&header.minIndex );
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <main+0x150>)
 8001444:	891b      	ldrh	r3, [r3, #8]
 8001446:	4619      	mov	r1, r3
 8001448:	4638      	mov	r0, r7
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <main+0x170>)
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <main+0x174>)
 800144e:	f000 fda8 	bl	8001fa2 <arm_min_q15>
		arm_rms_q15 ( adc, header.N, &header.rms                       );
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <main+0x150>)
 8001454:	891b      	ldrh	r3, [r3, #8]
 8001456:	4619      	mov	r1, r3
 8001458:	463b      	mov	r3, r7
 800145a:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <main+0x178>)
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fe27 	bl	80020b0 <arm_rms_q15>

		/* Increment id */
		header.id++;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <main+0x150>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <main+0x150>)
 800146a:	6053      	str	r3, [r2, #4]

		/* Send the header in an Array */
//		uartWriteByteArray (&huart2, (uint8_t*)&header, sizeof(header));

		/* Reset the samples */
		sample = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	}
	/* Blinks at fs/2 frequency */
	gpioToggle (GPIOB,LD3_Pin);
 8001472:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001476:	480f      	ldr	r0, [pc, #60]	; (80014b4 <main+0x164>)
 8001478:	f000 f8b0 	bl	80015dc <gpioToggle>
	if (tick >= 4294967296) tick = 0;
	/* Wait until it completes the Cycles. 168.000.000/10.000 = 16.800 cycles */
	while(DBG_CyclesCounterRead() < CLOCK_SPEED/header.fs);
 800147c:	bf00      	nop
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <main+0x148>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <main+0x150>)
 8001484:	8952      	ldrh	r2, [r2, #10]
 8001486:	4611      	mov	r1, r2
 8001488:	4a02      	ldr	r2, [pc, #8]	; (8001494 <main+0x144>)
 800148a:	fb92 f2f1 	sdiv	r2, r2, r1
 800148e:	4293      	cmp	r3, r2
 8001490:	d3f5      	bcc.n	800147e <main+0x12e>
	DBG_CyclesCounterReset();
 8001492:	e77d      	b.n	8001390 <main+0x40>
 8001494:	0a037a00 	.word	0x0a037a00
 8001498:	e0001000 	.word	0xe0001000
 800149c:	2000027c 	.word	0x2000027c
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000020 	.word	0x20000020
 80014a8:	40490fdb 	.word	0x40490fdb
 80014ac:	45000000 	.word	0x45000000
 80014b0:	20000268 	.word	0x20000268
 80014b4:	40020400 	.word	0x40020400
 80014b8:	2000000c 	.word	0x2000000c
 80014bc:	20000014 	.word	0x20000014
 80014c0:	20000010 	.word	0x20000010
 80014c4:	20000016 	.word	0x20000016
 80014c8:	20000018 	.word	0x20000018

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	; 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2230      	movs	r2, #48	; 0x30
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 ffb4 	bl	8004448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <SystemClock_Config+0xcc>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a27      	ldr	r2, [pc, #156]	; (8001598 <SystemClock_Config+0xcc>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <SystemClock_Config+0xcc>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	4b22      	ldr	r3, [pc, #136]	; (800159c <SystemClock_Config+0xd0>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a21      	ldr	r2, [pc, #132]	; (800159c <SystemClock_Config+0xd0>)
 8001516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <SystemClock_Config+0xd0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800152c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001532:	2302      	movs	r3, #2
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800153c:	2304      	movs	r3, #4
 800153e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001540:	23a8      	movs	r3, #168	; 0xa8
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001544:	2302      	movs	r3, #2
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001548:	2307      	movs	r3, #7
 800154a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154c:	f107 0320 	add.w	r3, r7, #32
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fcf3 	bl	8002f3c <HAL_RCC_OscConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800155c:	f000 f820 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001560:	230f      	movs	r3, #15
 8001562:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001564:	2302      	movs	r3, #2
 8001566:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800156c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001576:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001578:	f107 030c 	add.w	r3, r7, #12
 800157c:	2105      	movs	r1, #5
 800157e:	4618      	mov	r0, r3
 8001580:	f001 ff54 	bl	800342c <HAL_RCC_ClockConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800158a:	f000 f809 	bl	80015a0 <Error_Handler>
  }
}
 800158e:	bf00      	nop
 8001590:	3750      	adds	r7, #80	; 0x50
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <DBG_CyclesCounterInit>:
	return adc_value;
}


bool DBG_CyclesCounterInit( uint32_t clockSpeed )
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
 80015b4:	4a07      	ldr	r2, [pc, #28]	; (80015d4 <DBG_CyclesCounterInit+0x28>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
   //Iniciar el contador de ciclos de clock.
   DWT->CTRL  |= 1; // *DWT_CTRL  |= 1;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <DBG_CyclesCounterInit+0x2c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a06      	ldr	r2, [pc, #24]	; (80015d8 <DBG_CyclesCounterInit+0x2c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6013      	str	r3, [r2, #0]
   return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	20000024 	.word	0x20000024
 80015d8:	e0001000 	.word	0xe0001000

080015dc <gpioToggle>:
	   uartWriteByte(huart, byteArray[i]);
   }
}

void gpioToggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	4619      	mov	r1, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f001 fb6e 	bl	8002cce <HAL_GPIO_TogglePin>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <DAC_Write>:
          512*0.3*arm_sin_f32 (2*PI*t*SOL)+512;
}


void DAC_Write(DAC_HandleTypeDef *handle, uint16_t value)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]
	// DAC is 12 bit so maximum value should be 4096
	if( value > 4096 )
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800160c:	d902      	bls.n	8001614 <DAC_Write+0x1a>
	{
		value = 4096; // Saturation
 800160e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001612:	807b      	strh	r3, [r7, #2]
	}

	HAL_DAC_SetValue(handle, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8001614:	887b      	ldrh	r3, [r7, #2]
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 f91d 	bl	800285a <HAL_DAC_SetValue>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_MspInit+0x4c>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_MspInit+0x4c>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x4c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_MspInit+0x4c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c4:	f000 fdec 	bl	80022a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_kill>:

int _kill(int pid, int sig)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016e6:	f002 fe85 	bl	80043f4 <__errno>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2216      	movs	r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
  return -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_exit>:

void _exit (int status)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe7 	bl	80016dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800170e:	e7fe      	b.n	800170e <_exit+0x12>

08001710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e00a      	b.n	8001738 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001722:	f3af 8000 	nop.w
 8001726:	4601      	mov	r1, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf0      	blt.n	8001722 <_read+0x12>
  }

  return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e009      	b.n	8001770 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf1      	blt.n	800175c <_write+0x12>
  }
  return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017aa:	605a      	str	r2, [r3, #4]
  return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_isatty>:

int _isatty(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f002 fdea 	bl	80043f4 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20030000 	.word	0x20030000
 800184c:	00000400 	.word	0x00000400
 8001850:	20000280 	.word	0x20000280
 8001854:	20000830 	.word	0x20000830

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_USART2_UART_Init+0x50>)
 8001884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001888:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800188c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_USART2_UART_Init+0x4c>)
 80018b4:	f001 ffda 	bl	800386c <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018be:	f7ff fe6f 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000284 	.word	0x20000284
 80018cc:	40004400 	.word	0x40004400

080018d0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <MX_USART3_UART_Init+0x50>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART3_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART3_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART3_UART_Init+0x4c>)
 8001908:	f001 ffb0 	bl	800386c <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001912:	f7ff fe45 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200002c8 	.word	0x200002c8
 8001920:	40004800 	.word	0x40004800

08001924 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	; 0x30
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a41      	ldr	r2, [pc, #260]	; (8001a48 <HAL_UART_MspInit+0x124>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d14a      	bne.n	80019dc <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <HAL_UART_MspInit+0x128>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a3f      	ldr	r2, [pc, #252]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <HAL_UART_MspInit+0x128>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a31      	ldr	r2, [pc, #196]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b2f      	ldr	r3, [pc, #188]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 800199a:	2308      	movs	r3, #8
 800199c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019aa:	2307      	movs	r3, #7
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	4826      	ldr	r0, [pc, #152]	; (8001a50 <HAL_UART_MspInit+0x12c>)
 80019b6:	f000 ffc5 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART2_TX_Pin;
 80019ba:	2320      	movs	r3, #32
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ca:	2307      	movs	r3, #7
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	481f      	ldr	r0, [pc, #124]	; (8001a54 <HAL_UART_MspInit+0x130>)
 80019d6:	f000 ffb5 	bl	8002944 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019da:	e031      	b.n	8001a40 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1d      	ldr	r2, [pc, #116]	; (8001a58 <HAL_UART_MspInit+0x134>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12c      	bne.n	8001a40 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_UART_MspInit+0x128>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_UART_MspInit+0x128>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_UART_MspInit+0x128>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001a0c:	f043 0308 	orr.w	r3, r3, #8
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_UART_MspInit+0x128>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a30:	2307      	movs	r3, #7
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4806      	ldr	r0, [pc, #24]	; (8001a54 <HAL_UART_MspInit+0x130>)
 8001a3c:	f000 ff82 	bl	8002944 <HAL_GPIO_Init>
}
 8001a40:	bf00      	nop
 8001a42:	3730      	adds	r7, #48	; 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40004400 	.word	0x40004400
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40004800 	.word	0x40004800

08001a5c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001a66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a70:	2202      	movs	r2, #2
 8001a72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aa0:	f001 f92f 	bl	8002d02 <HAL_PCD_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001aaa:	f7ff fd79 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000030c 	.word	0x2000030c

08001ab8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad8:	d13f      	bne.n	8001b5a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a20      	ldr	r2, [pc, #128]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001af6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b08:	230a      	movs	r3, #10
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4815      	ldr	r0, [pc, #84]	; (8001b68 <HAL_PCD_MspInit+0xb0>)
 8001b14:	f000 ff16 	bl	8002944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480e      	ldr	r0, [pc, #56]	; (8001b68 <HAL_PCD_MspInit+0xb0>)
 8001b2e:	f000 ff09 	bl	8002944 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3c:	6353      	str	r3, [r2, #52]	; 0x34
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_PCD_MspInit+0xac>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b72:	490e      	ldr	r1, [pc, #56]	; (8001bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b74:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b88:	4c0b      	ldr	r4, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b96:	f7ff fe5f 	bl	8001858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f002 fc31 	bl	8004400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7ff fbd7 	bl	8001350 <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ba4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001bb0:	08007aa4 	.word	0x08007aa4
  ldr r2, =_sbss
 8001bb4:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001bb8:	2000082c 	.word	0x2000082c

08001bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>
	...

08001bc0 <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b08b      	sub	sp, #44	; 0x2c
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8001bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	d50a      	bpl.n	8001bee <arm_sin_f32+0x2e>
 8001bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bdc:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001cc8 <arm_sin_f32+0x108>
 8001be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be8:	db01      	blt.n	8001bee <arm_sin_f32+0x2e>
     return x;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	e062      	b.n	8001cb4 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8001bee:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bf2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ccc <arm_sin_f32+0x10c>
 8001bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bfa:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8001bfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c06:	ee17 3a90 	vmov	r3, s15
 8001c0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8001c0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d502      	bpl.n	8001c20 <arm_sin_f32+0x60>
  {
    n--;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c32:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8001c36:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c3a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001cd0 <arm_sin_f32+0x110>
 8001c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c42:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 8001c46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4e:	ee17 3a90 	vmov	r3, s15
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c58:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8001c5a:	8b7b      	ldrh	r3, [r7, #26]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c64:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6c:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8001c70:	8b7b      	ldrh	r3, [r7, #26]
 8001c72:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <arm_sin_f32+0x114>)
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8001c7c:	8b7b      	ldrh	r3, [r7, #26]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <arm_sin_f32+0x114>)
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 8001c8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c96:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cae:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
}
 8001cb4:	ee07 3a90 	vmov	s15, r3
 8001cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbc:	372c      	adds	r7, #44	; 0x2c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	b44c02cd 	.word	0xb44c02cd
 8001ccc:	3e22f983 	.word	0x3e22f983
 8001cd0:	44000000 	.word	0x44000000
 8001cd4:	08006eb8 	.word	0x08006eb8

08001cd8 <arm_sqrt_q15>:
   */

arm_status arm_sqrt_q15(
  q15_t in,
  q15_t * pOut)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	80fb      	strh	r3, [r7, #6]
  {
    q31_t fracval;
    float32_t floatval;
  } tempconv;

  number = in;
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	83fb      	strh	r3, [r7, #30]

  /* If the input is a positive number then compute the signBits. */
  if (number > 0)
 8001ce8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f340 80c0 	ble.w	8001e72 <arm_sqrt_q15+0x19a>
  {
    signBits1 = __CLZ(number) - 17;
 8001cf2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	3b11      	subs	r3, #17
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	837b      	strh	r3, [r7, #26]

    /* Shift by the number of signBits1 */
    if ((signBits1 % 2) == 0)
 8001d04:	8b7b      	ldrh	r3, [r7, #26]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <arm_sqrt_q15+0x48>
    {
      number = number << signBits1;
 8001d10:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001d14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	83fb      	strh	r3, [r7, #30]
 8001d1e:	e007      	b.n	8001d30 <arm_sqrt_q15+0x58>
    }
    else
    {
      number = number << (signBits1 - 1);
 8001d20:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001d24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	83fb      	strh	r3, [r7, #30]
    }

    /* Calculate half value of the number */
    half = number >> 1;
 8001d30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001d34:	105b      	asrs	r3, r3, #1
 8001d36:	833b      	strh	r3, [r7, #24]
    /* Store the number for later use */
    temp1 = number;
 8001d38:	8bfb      	ldrh	r3, [r7, #30]
 8001d3a:	82fb      	strh	r3, [r7, #22]

    /* Convert to float */
    temp_float1 = number * 3.051757812500000e-005f;
 8001d3c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d48:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001e88 <arm_sqrt_q15+0x1b0>
 8001d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d50:	edc7 7a04 	vstr	s15, [r7, #16]
    /*Store as integer */
    tempconv.floatval = temp_float1;
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	60bb      	str	r3, [r7, #8]
    bits_val1 = tempconv.fracval;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	60fb      	str	r3, [r7, #12]
    /* Subtract the shifted value from the magic number to give intial guess */
    bits_val1 = 0x5f3759df - (bits_val1 >> 1);  /* gives initial guess */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	105a      	asrs	r2, r3, #1
 8001d60:	4b4a      	ldr	r3, [pc, #296]	; (8001e8c <arm_sqrt_q15+0x1b4>)
 8001d62:	1a9b      	subs	r3, r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
    /* Store as float */
    tempconv.fracval = bits_val1;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	60bb      	str	r3, [r7, #8]
    temp_float1 = tempconv.floatval;
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
    /* Convert to integer format */
    var1 = (q31_t) (temp_float1 * 16384);
 8001d6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d72:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001e90 <arm_sqrt_q15+0x1b8>
 8001d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7e:	ee17 3a90 	vmov	r3, s15
 8001d82:	83bb      	strh	r3, [r7, #28]

    /* 1st iteration */
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001d84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
                                     ((q15_t)
                                      ((((q15_t)
                                         (((q31_t) var1 * var1) >> 15)) *
 8001d88:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001d8c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001d90:	fb01 f202 	mul.w	r2, r1, r2
 8001d94:	13d2      	asrs	r2, r2, #15
                                      ((((q15_t)
 8001d96:	b212      	sxth	r2, r2
 8001d98:	4611      	mov	r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001d9a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
                                         (((q31_t) var1 * var1) >> 15)) *
 8001d9e:	fb01 f202 	mul.w	r2, r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001da2:	13d2      	asrs	r2, r2, #15
                                     ((q15_t)
 8001da4:	b212      	sxth	r2, r2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001da6:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001dae:	13db      	asrs	r3, r3, #15
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001db0:	b21b      	sxth	r3, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001db2:	009b      	lsls	r3, r3, #2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001db4:	83bb      	strh	r3, [r7, #28]
    /* 2nd iteration */
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001db6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
                                     ((q15_t)
                                      ((((q15_t)
                                         (((q31_t) var1 * var1) >> 15)) *
 8001dba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001dbe:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001dc2:	fb01 f202 	mul.w	r2, r1, r2
 8001dc6:	13d2      	asrs	r2, r2, #15
                                      ((((q15_t)
 8001dc8:	b212      	sxth	r2, r2
 8001dca:	4611      	mov	r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001dcc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
                                         (((q31_t) var1 * var1) >> 15)) *
 8001dd0:	fb01 f202 	mul.w	r2, r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001dd4:	13d2      	asrs	r2, r2, #15
                                     ((q15_t)
 8001dd6:	b212      	sxth	r2, r2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001dd8:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
 8001ddc:	fb02 f303 	mul.w	r3, r2, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001de0:	13db      	asrs	r3, r3, #15
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001de2:	b21b      	sxth	r3, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001de4:	009b      	lsls	r3, r3, #2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001de6:	83bb      	strh	r3, [r7, #28]
    /* 3rd iteration */
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001de8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
                                     ((q15_t)
                                      ((((q15_t)
                                         (((q31_t) var1 * var1) >> 15)) *
 8001dec:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001df0:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001df4:	fb01 f202 	mul.w	r2, r1, r2
 8001df8:	13d2      	asrs	r2, r2, #15
                                      ((((q15_t)
 8001dfa:	b212      	sxth	r2, r2
 8001dfc:	4611      	mov	r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001dfe:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
                                         (((q31_t) var1 * var1) >> 15)) *
 8001e02:	fb01 f202 	mul.w	r2, r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001e06:	13d2      	asrs	r2, r2, #15
                                     ((q15_t)
 8001e08:	b212      	sxth	r2, r2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001e0a:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
 8001e0e:	fb02 f303 	mul.w	r3, r2, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001e12:	13db      	asrs	r3, r3, #15
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001e14:	b21b      	sxth	r3, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001e16:	009b      	lsls	r3, r3, #2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001e18:	83bb      	strh	r3, [r7, #28]

    /* Multiply the inverse square root with the original value */
    var1 = ((q15_t) (((q31_t) temp1 * var1) >> 15)) << 1;
 8001e1a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e1e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	13db      	asrs	r3, r3, #15
 8001e28:	b21b      	sxth	r3, r3
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	83bb      	strh	r3, [r7, #28]

    /* Shift the output down accordingly */
    if ((signBits1 % 2) == 0)
 8001e2e:	8b7b      	ldrh	r3, [r7, #26]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10b      	bne.n	8001e52 <arm_sqrt_q15+0x17a>
    {
      var1 = var1 >> (signBits1 / 2);
 8001e3a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e3e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e42:	0fd9      	lsrs	r1, r3, #31
 8001e44:	440b      	add	r3, r1
 8001e46:	105b      	asrs	r3, r3, #1
 8001e48:	b21b      	sxth	r3, r3
 8001e4a:	fa42 f303 	asr.w	r3, r2, r3
 8001e4e:	83bb      	strh	r3, [r7, #28]
 8001e50:	e00a      	b.n	8001e68 <arm_sqrt_q15+0x190>
    }
    else
    {
      var1 = var1 >> ((signBits1 - 1) / 2);
 8001e52:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e56:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	0fd9      	lsrs	r1, r3, #31
 8001e5e:	440b      	add	r3, r1
 8001e60:	105b      	asrs	r3, r3, #1
 8001e62:	fa42 f303 	asr.w	r3, r2, r3
 8001e66:	83bb      	strh	r3, [r7, #28]
    }
    *pOut = var1;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	8bba      	ldrh	r2, [r7, #28]
 8001e6c:	801a      	strh	r2, [r3, #0]

    return (ARM_MATH_SUCCESS);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e004      	b.n	8001e7c <arm_sqrt_q15+0x1a4>
  }
  /* If the number is a negative number then store zero as its square root value */
  else
  {
    *pOut = 0;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2200      	movs	r2, #0
 8001e76:	801a      	strh	r2, [r3, #0]
    return (ARM_MATH_ARGUMENT_ERROR);
 8001e78:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3724      	adds	r7, #36	; 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	38000000 	.word	0x38000000
 8001e8c:	5f3759df 	.word	0x5f3759df
 8001e90:	46800000 	.word	0x46800000

08001e94 <arm_max_q15>:
void arm_max_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b08b      	sub	sp, #44	; 0x2c
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]

  q15_t maxVal1, maxVal2, out;                   /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1c9a      	adds	r2, r3, #2
 8001eae:	60fa      	str	r2, [r7, #12]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 8001ebc:	e045      	b.n	8001f4a <arm_max_q15+0xb6>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1c9a      	adds	r2, r3, #2
 8001ec2:	60fa      	str	r2, [r7, #12]
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	82fb      	strh	r3, [r7, #22]
    maxVal2 = *pSrc++;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1c9a      	adds	r2, r3, #2
 8001ecc:	60fa      	str	r2, [r7, #12]
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	82bb      	strh	r3, [r7, #20]

    /* compare for the maximum value */
    if (out < maxVal1)
 8001ed2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001ed6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	da04      	bge.n	8001ee8 <arm_max_q15+0x54>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001ede:	8afb      	ldrh	r3, [r7, #22]
 8001ee0:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 1U;
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 8001ee8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001eec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	da04      	bge.n	8001efe <arm_max_q15+0x6a>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001ef4:	8abb      	ldrh	r3, [r7, #20]
 8001ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 2U;
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	3302      	adds	r3, #2
 8001efc:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1c9a      	adds	r2, r3, #2
 8001f02:	60fa      	str	r2, [r7, #12]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	82fb      	strh	r3, [r7, #22]
    maxVal2 = *pSrc++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1c9a      	adds	r2, r3, #2
 8001f0c:	60fa      	str	r2, [r7, #12]
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	82bb      	strh	r3, [r7, #20]

    /* compare for the maximum value */
    if (out < maxVal1)
 8001f12:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001f16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	da04      	bge.n	8001f28 <arm_max_q15+0x94>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001f1e:	8afb      	ldrh	r3, [r7, #22]
 8001f20:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 3U;
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	3303      	adds	r3, #3
 8001f26:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 8001f28:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001f2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	da04      	bge.n	8001f3e <arm_max_q15+0xaa>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001f34:	8abb      	ldrh	r3, [r7, #20]
 8001f36:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 4U;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	3304      	adds	r3, #4
 8001f42:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1b6      	bne.n	8001ebe <arm_max_q15+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8001f5a:	e013      	b.n	8001f84 <arm_max_q15+0xf0>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1c9a      	adds	r2, r3, #2
 8001f60:	60fa      	str	r2, [r7, #12]
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	82fb      	strh	r3, [r7, #22]

    /* compare for the maximum value */
    if (out < maxVal1)
 8001f66:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001f6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	da05      	bge.n	8001f7e <arm_max_q15+0xea>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8001f72:	8afb      	ldrh	r3, [r7, #22]
 8001f74:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = blockSize - blkCnt;
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8001f84:	6a3b      	ldr	r3, [r7, #32]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1e8      	bne.n	8001f5c <arm_max_q15+0xc8>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f8e:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	372c      	adds	r7, #44	; 0x2c
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <arm_min_q15>:
void arm_min_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b08b      	sub	sp, #44	; 0x2c
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	603b      	str	r3, [r7, #0]

  q15_t minVal1, minVal2, out;                   /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1c9a      	adds	r2, r3, #2
 8001fbc:	60fa      	str	r2, [r7, #12]
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 8001fca:	e045      	b.n	8002058 <arm_min_q15+0xb6>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1c9a      	adds	r2, r3, #2
 8001fd0:	60fa      	str	r2, [r7, #12]
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	82fb      	strh	r3, [r7, #22]
    minVal2 = *pSrc++;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1c9a      	adds	r2, r3, #2
 8001fda:	60fa      	str	r2, [r7, #12]
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	82bb      	strh	r3, [r7, #20]

    /* compare for the minimum value */
    if (out > minVal1)
 8001fe0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001fe4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dd04      	ble.n	8001ff6 <arm_min_q15+0x54>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001fec:	8afb      	ldrh	r3, [r7, #22]
 8001fee:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 1U;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if (out > minVal2)
 8001ff6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001ffa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	dd04      	ble.n	800200c <arm_min_q15+0x6a>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8002002:	8abb      	ldrh	r3, [r7, #20]
 8002004:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 2U;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3302      	adds	r3, #2
 800200a:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	1c9a      	adds	r2, r3, #2
 8002010:	60fa      	str	r2, [r7, #12]
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	82fb      	strh	r3, [r7, #22]
    minVal2 = *pSrc++;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1c9a      	adds	r2, r3, #2
 800201a:	60fa      	str	r2, [r7, #12]
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	82bb      	strh	r3, [r7, #20]

    /* compare for the minimum value */
    if (out > minVal1)
 8002020:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002024:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002028:	429a      	cmp	r2, r3
 800202a:	dd04      	ble.n	8002036 <arm_min_q15+0x94>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 800202c:	8afb      	ldrh	r3, [r7, #22]
 800202e:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 3U;
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	3303      	adds	r3, #3
 8002034:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if (out > minVal2)
 8002036:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800203a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800203e:	429a      	cmp	r2, r3
 8002040:	dd04      	ble.n	800204c <arm_min_q15+0xaa>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8002042:	8abb      	ldrh	r3, [r7, #20]
 8002044:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 4U;
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	3304      	adds	r3, #4
 800204a:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	3304      	adds	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	3b01      	subs	r3, #1
 8002056:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1b6      	bne.n	8001fcc <arm_min_q15+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3b01      	subs	r3, #1
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8002068:	e013      	b.n	8002092 <arm_min_q15+0xf0>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1c9a      	adds	r2, r3, #2
 800206e:	60fa      	str	r2, [r7, #12]
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	82fb      	strh	r3, [r7, #22]

    /* compare for the minimum value */
    if (out > minVal1)
 8002074:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002078:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800207c:	429a      	cmp	r2, r3
 800207e:	dd05      	ble.n	800208c <arm_min_q15+0xea>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8002080:	8afb      	ldrh	r3, [r7, #22]
 8002082:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = blockSize - blkCnt;
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	3b01      	subs	r3, #1
 8002090:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e8      	bne.n	800206a <arm_min_q15+0xc8>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800209c:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	372c      	adds	r7, #44	; 0x2c
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <arm_rms_q15>:

void arm_rms_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult)
{
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b09e      	sub	sp, #120	; 0x78
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  q63_t sum = 0;                                 /* accumulator */
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  q31_t in;                                      /* temporary variable to store the input value */
  q15_t in1;                                     /* temporary variable to store the input value */
  uint32_t blkCnt;                               /* loop counter */

  /* loop Unrolling */
  blkCnt = blockSize >> 2U;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80020ce:	e040      	b.n	8002152 <arm_rms_q15+0xa2>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute sum of the squares and then store the results in a temporary variable, sum */
    in = *__SIMD32(pSrc)++;
 80020d0:	f107 020c 	add.w	r2, r7, #12
 80020d4:	6813      	ldr	r3, [r2, #0]
 80020d6:	1d19      	adds	r1, r3, #4
 80020d8:	6011      	str	r1, [r2, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    sum = __SMLALD(in, in, sum);
 80020de:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020e0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80020e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80020e6:	6478      	str	r0, [r7, #68]	; 0x44
 80020e8:	6439      	str	r1, [r7, #64]	; 0x40
 80020ea:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 80020ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020f2:	e9c7 2306 	strd	r2, r3, [r7, #24]

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80020fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020fe:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8002102:	61ba      	str	r2, [r7, #24]
 8002104:	61fb      	str	r3, [r7, #28]
#else               /* Big endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 8002106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800210a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    in = *__SIMD32(pSrc)++;
 800210e:	f107 020c 	add.w	r2, r7, #12
 8002112:	6813      	ldr	r3, [r2, #0]
 8002114:	1d19      	adds	r1, r3, #4
 8002116:	6011      	str	r1, [r2, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	65fb      	str	r3, [r7, #92]	; 0x5c
    sum = __SMLALD(in, in, sum);
 800211c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800211e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002120:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002124:	65b8      	str	r0, [r7, #88]	; 0x58
 8002126:	6579      	str	r1, [r7, #84]	; 0x54
 8002128:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  llr.w64 = acc;
 800212c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002130:	e9c7 2304 	strd	r2, r3, [r7, #16]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800213a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800213c:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8002140:	613a      	str	r2, [r7, #16]
 8002142:	617b      	str	r3, [r7, #20]
  return(llr.w64);
 8002144:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002148:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    /* Decrement the loop counter */
    blkCnt--;
 800214c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214e:	3b01      	subs	r3, #1
 8002150:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (blkCnt > 0U)
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1bb      	bne.n	80020d0 <arm_rms_q15+0x20>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	66fb      	str	r3, [r7, #108]	; 0x6c

  while (blkCnt > 0U)
 8002160:	e022      	b.n	80021a8 <arm_rms_q15+0xf8>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute sum of the squares and then store the results in a temporary variable, sum */
    in1 = *pSrc++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1c9a      	adds	r2, r3, #2
 8002166:	60fa      	str	r2, [r7, #12]
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    sum = __SMLALD(in1, in1, sum);
 800216e:	f9b7 0062 	ldrsh.w	r0, [r7, #98]	; 0x62
 8002172:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 8002176:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800217a:	6378      	str	r0, [r7, #52]	; 0x34
 800217c:	6339      	str	r1, [r7, #48]	; 0x30
 800217e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  llr.w64 = acc;
 8002182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002186:	e9c7 2308 	strd	r2, r3, [r7, #32]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 800218a:	6a3a      	ldr	r2, [r7, #32]
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002192:	fbc1 23c0 	smlald	r2, r3, r1, r0
 8002196:	623a      	str	r2, [r7, #32]
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  return(llr.w64);
 800219a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800219e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    /* Decrement the loop counter */
    blkCnt--;
 80021a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a4:	3b01      	subs	r3, #1
 80021a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (blkCnt > 0U)
 80021a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1d9      	bne.n	8002162 <arm_rms_q15+0xb2>
  }

  /* Truncating and saturating the accumulator to 1.15 format */
  /* Store the result in the destination */
  arm_sqrt_q15(__SSAT((sum / (q63_t)blockSize) >> 15, 16), pResult);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2200      	movs	r2, #0
 80021b2:	461c      	mov	r4, r3
 80021b4:	4615      	mov	r5, r2
 80021b6:	4622      	mov	r2, r4
 80021b8:	462b      	mov	r3, r5
 80021ba:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80021be:	f7fe fd03 	bl	8000bc8 <__aeabi_ldivmod>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4610      	mov	r0, r2
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	0bc2      	lsrs	r2, r0, #15
 80021d4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80021d8:	13cb      	asrs	r3, r1, #15
 80021da:	4613      	mov	r3, r2
 80021dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80021de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021e0:	f303 030f 	ssat	r3, #16, r3
 80021e4:	667b      	str	r3, [r7, #100]	; 0x64
 80021e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fd73 	bl	8001cd8 <arm_sqrt_q15>
  /* Store the result in the destination */
  arm_sqrt_q15(__SSAT((sum / (q63_t)blockSize) >> 15, 16), pResult);

#endif /* #if defined (ARM_MATH_DSP) */

}
 80021f2:	bf00      	nop
 80021f4:	3778      	adds	r7, #120	; 0x78
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002200:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <HAL_Init+0x40>)
 8002206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_Init+0x40>)
 8002212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_Init+0x40>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a07      	ldr	r2, [pc, #28]	; (800223c <HAL_Init+0x40>)
 800221e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 fa71 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800222a:	2000      	movs	r0, #0
 800222c:	f000 f808 	bl	8002240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002230:	f7ff f9fa 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023c00 	.word	0x40023c00

08002240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_InitTick+0x54>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x58>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002256:	fbb3 f3f1 	udiv	r3, r3, r1
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fa7b 	bl	800275a <HAL_SYSTICK_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e00e      	b.n	800228c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b0f      	cmp	r3, #15
 8002272:	d80a      	bhi.n	800228a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002274:	2200      	movs	r2, #0
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f000 fa51 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002280:	4a06      	ldr	r2, [pc, #24]	; (800229c <HAL_InitTick+0x5c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
 8002288:	e000      	b.n	800228c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000028 	.word	0x20000028
 8002298:	20000030 	.word	0x20000030
 800229c:	2000002c 	.word	0x2000002c

080022a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x20>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x24>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_IncTick+0x24>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000030 	.word	0x20000030
 80022c4:	20000818 	.word	0x20000818

080022c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_GetTick+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000818 	.word	0x20000818

080022e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff ffee 	bl	80022c8 <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d005      	beq.n	8002306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_Delay+0x44>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002306:	bf00      	nop
 8002308:	f7ff ffde 	bl	80022c8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	429a      	cmp	r2, r3
 8002316:	d8f7      	bhi.n	8002308 <HAL_Delay+0x28>
  {
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000030 	.word	0x20000030

08002328 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e033      	b.n	80023a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fe54 	bl	8000ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800236e:	f023 0302 	bic.w	r3, r3, #2
 8002372:	f043 0202 	orr.w	r2, r3, #2
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f818 	bl	80023b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	f043 0201 	orr.w	r2, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
 8002396:	e001      	b.n	800239c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b8:	4b79      	ldr	r3, [pc, #484]	; (80025a0 <ADC_Init+0x1f0>)
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	021a      	lsls	r2, r3, #8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6899      	ldr	r1, [r3, #8]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68da      	ldr	r2, [r3, #12]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	4a58      	ldr	r2, [pc, #352]	; (80025a4 <ADC_Init+0x1f4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d022      	beq.n	800248e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002456:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6899      	ldr	r1, [r3, #8]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e00f      	b.n	80024ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800249c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0202 	bic.w	r2, r2, #2
 80024bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7e1b      	ldrb	r3, [r3, #24]
 80024c8:	005a      	lsls	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01b      	beq.n	8002514 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	3b01      	subs	r3, #1
 8002508:	035a      	lsls	r2, r3, #13
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	e007      	b.n	8002524 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002522:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	3b01      	subs	r3, #1
 8002540:	051a      	lsls	r2, r3, #20
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6899      	ldr	r1, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002566:	025a      	lsls	r2, r3, #9
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6899      	ldr	r1, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	029a      	lsls	r2, r3, #10
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	609a      	str	r2, [r3, #8]
}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40012300 	.word	0x40012300
 80025a4:	0f000001 	.word	0x0f000001

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	; (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff47 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff5c 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff8e 	bl	8002660 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5d 	bl	800260c <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffb0 	bl	80026c8 <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e014      	b.n	80027ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	791b      	ldrb	r3, [r3, #4]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7fe fca5 	bl	80010e4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2202      	movs	r2, #2
 800279e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	795b      	ldrb	r3, [r3, #5]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_DAC_Start+0x16>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e040      	b.n	800284e <HAL_DAC_Start+0x98>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2202      	movs	r2, #2
 80027d6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2201      	movs	r2, #1
 80027e6:	409a      	lsls	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002800:	2b3c      	cmp	r3, #60	; 0x3c
 8002802:	d11d      	bne.n	8002840 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0201 	orr.w	r2, r2, #1
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	e014      	b.n	8002840 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	213c      	movs	r1, #60	; 0x3c
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	429a      	cmp	r2, r3
 800282e:	d107      	bne.n	8002840 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0202 	orr.w	r2, r2, #2
 800283e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800285a:	b480      	push	{r7}
 800285c:	b087      	sub	sp, #28
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	3308      	adds	r3, #8
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e004      	b.n	800288e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	3314      	adds	r3, #20
 800288c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	461a      	mov	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	371c      	adds	r7, #28
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	795b      	ldrb	r3, [r3, #5]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d101      	bne.n	80028bc <HAL_DAC_ConfigChannel+0x18>
 80028b8:	2302      	movs	r3, #2
 80028ba:	e03c      	b.n	8002936 <HAL_DAC_ConfigChannel+0x92>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2201      	movs	r2, #1
 80028c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2202      	movs	r2, #2
 80028c6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	4013      	ands	r3, r2
 80028e4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	22c0      	movs	r2, #192	; 0xc0
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43da      	mvns	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	371c      	adds	r7, #28
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	; 0x24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e177      	b.n	8002c50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002960:	2201      	movs	r2, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	429a      	cmp	r2, r3
 800297a:	f040 8166 	bne.w	8002c4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b01      	cmp	r3, #1
 8002988:	d005      	beq.n	8002996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002992:	2b02      	cmp	r3, #2
 8002994:	d130      	bne.n	80029f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029cc:	2201      	movs	r2, #1
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0303 	and.w	r3, r3, #3
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d017      	beq.n	8002a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d123      	bne.n	8002a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4013      	ands	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	08da      	lsrs	r2, r3, #3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3208      	adds	r2, #8
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80c0 	beq.w	8002c4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a65      	ldr	r2, [pc, #404]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <HAL_GPIO_Init+0x324>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae6:	4a61      	ldr	r2, [pc, #388]	; (8002c6c <HAL_GPIO_Init+0x328>)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	220f      	movs	r2, #15
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_GPIO_Init+0x32c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d037      	beq.n	8002b82 <HAL_GPIO_Init+0x23e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_GPIO_Init+0x330>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d031      	beq.n	8002b7e <HAL_GPIO_Init+0x23a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a56      	ldr	r2, [pc, #344]	; (8002c78 <HAL_GPIO_Init+0x334>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d02b      	beq.n	8002b7a <HAL_GPIO_Init+0x236>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a55      	ldr	r2, [pc, #340]	; (8002c7c <HAL_GPIO_Init+0x338>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d025      	beq.n	8002b76 <HAL_GPIO_Init+0x232>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a54      	ldr	r2, [pc, #336]	; (8002c80 <HAL_GPIO_Init+0x33c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d01f      	beq.n	8002b72 <HAL_GPIO_Init+0x22e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a53      	ldr	r2, [pc, #332]	; (8002c84 <HAL_GPIO_Init+0x340>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d019      	beq.n	8002b6e <HAL_GPIO_Init+0x22a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_GPIO_Init+0x344>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x226>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <HAL_GPIO_Init+0x348>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x222>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a50      	ldr	r2, [pc, #320]	; (8002c90 <HAL_GPIO_Init+0x34c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x21e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4f      	ldr	r2, [pc, #316]	; (8002c94 <HAL_GPIO_Init+0x350>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x21a>
 8002b5a:	2309      	movs	r3, #9
 8002b5c:	e012      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b5e:	230a      	movs	r3, #10
 8002b60:	e010      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b62:	2308      	movs	r3, #8
 8002b64:	e00e      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b66:	2307      	movs	r3, #7
 8002b68:	e00c      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	e00a      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b6e:	2305      	movs	r3, #5
 8002b70:	e008      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b72:	2304      	movs	r3, #4
 8002b74:	e006      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b76:	2303      	movs	r3, #3
 8002b78:	e004      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e002      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x240>
 8002b82:	2300      	movs	r3, #0
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	f002 0203 	and.w	r2, r2, #3
 8002b8a:	0092      	lsls	r2, r2, #2
 8002b8c:	4093      	lsls	r3, r2
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b94:	4935      	ldr	r1, [pc, #212]	; (8002c6c <HAL_GPIO_Init+0x328>)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc6:	4a34      	ldr	r2, [pc, #208]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bcc:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bf0:	4a29      	ldr	r2, [pc, #164]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf6:	4b28      	ldr	r3, [pc, #160]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_GPIO_Init+0x354>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	f67f ae84 	bls.w	8002960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	3724      	adds	r7, #36	; 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40013800 	.word	0x40013800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021c00 	.word	0x40021c00
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40022400 	.word	0x40022400
 8002c98:	40013c00 	.word	0x40013c00

08002c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cac:	787b      	ldrb	r3, [r7, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cb2:	887a      	ldrh	r2, [r7, #2]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb8:	e003      	b.n	8002cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cba:	887b      	ldrh	r3, [r7, #2]
 8002cbc:	041a      	lsls	r2, r3, #16
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	619a      	str	r2, [r3, #24]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ce0:	887a      	ldrh	r2, [r7, #2]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	041a      	lsls	r2, r3, #16
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43d9      	mvns	r1, r3
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	400b      	ands	r3, r1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	619a      	str	r2, [r3, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d04:	b08f      	sub	sp, #60	; 0x3c
 8002d06:	af0a      	add	r7, sp, #40	; 0x28
 8002d08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e10f      	b.n	8002f34 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe fec2 	bl	8001ab8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2203      	movs	r2, #3
 8002d38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 f8ad 	bl	8003eb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	687e      	ldr	r6, [r7, #4]
 8002d60:	466d      	mov	r5, sp
 8002d62:	f106 0410 	add.w	r4, r6, #16
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d76:	1d33      	adds	r3, r6, #4
 8002d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7a:	6838      	ldr	r0, [r7, #0]
 8002d7c:	f001 f838 	bl	8003df0 <USB_CoreInit>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e0d0      	b.n	8002f34 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 f89b 	bl	8003ed4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	e04a      	b.n	8002e3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	333d      	adds	r3, #61	; 0x3d
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	333c      	adds	r3, #60	; 0x3c
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
 8002dd0:	b298      	uxth	r0, r3
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	3344      	adds	r3, #68	; 0x44
 8002de0:	4602      	mov	r2, r0
 8002de2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	3340      	adds	r3, #64	; 0x40
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	3348      	adds	r3, #72	; 0x48
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	334c      	adds	r3, #76	; 0x4c
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e20:	7bfa      	ldrb	r2, [r7, #15]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3354      	adds	r3, #84	; 0x54
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	3301      	adds	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d3af      	bcc.n	8002da4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e044      	b.n	8002ed4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e60:	7bfa      	ldrb	r2, [r7, #15]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e76:	7bfa      	ldrb	r2, [r7, #15]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ea2:	7bfa      	ldrb	r2, [r7, #15]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3b5      	bcc.n	8002e4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	687e      	ldr	r6, [r7, #4]
 8002ee6:	466d      	mov	r5, sp
 8002ee8:	f106 0410 	add.w	r4, r6, #16
 8002eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ef4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ef8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002efc:	1d33      	adds	r3, r6, #4
 8002efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f00:	6838      	ldr	r0, [r7, #0]
 8002f02:	f001 f833 	bl	8003f6c <USB_DevInit>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e00d      	b.n	8002f34 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 f9fe 	bl	800432e <USB_DevDisconnect>

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e267      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d075      	beq.n	8003046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d00c      	beq.n	8002f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f66:	4b85      	ldr	r3, [pc, #532]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d112      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f72:	4b82      	ldr	r3, [pc, #520]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f7e:	d10b      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f80:	4b7e      	ldr	r3, [pc, #504]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d05b      	beq.n	8003044 <HAL_RCC_OscConfig+0x108>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d157      	bne.n	8003044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e242      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x74>
 8002fa2:	4b76      	ldr	r3, [pc, #472]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a75      	ldr	r2, [pc, #468]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e01d      	b.n	8002fec <HAL_RCC_OscConfig+0xb0>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x98>
 8002fba:	4b70      	ldr	r3, [pc, #448]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a6f      	ldr	r2, [pc, #444]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4b6d      	ldr	r3, [pc, #436]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a6c      	ldr	r2, [pc, #432]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	e00b      	b.n	8002fec <HAL_RCC_OscConfig+0xb0>
 8002fd4:	4b69      	ldr	r3, [pc, #420]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a68      	ldr	r2, [pc, #416]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4b66      	ldr	r3, [pc, #408]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a65      	ldr	r2, [pc, #404]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8002fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d013      	beq.n	800301c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7ff f968 	bl	80022c8 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffc:	f7ff f964 	bl	80022c8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e207      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	4b5b      	ldr	r3, [pc, #364]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCC_OscConfig+0xc0>
 800301a:	e014      	b.n	8003046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7ff f954 	bl	80022c8 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003024:	f7ff f950 	bl	80022c8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e1f3      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	4b51      	ldr	r3, [pc, #324]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0xe8>
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d063      	beq.n	800311a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003052:	4b4a      	ldr	r3, [pc, #296]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800305e:	4b47      	ldr	r3, [pc, #284]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003066:	2b08      	cmp	r3, #8
 8003068:	d11c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306a:	4b44      	ldr	r3, [pc, #272]	; (800317c <HAL_RCC_OscConfig+0x240>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d116      	bne.n	80030a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	4b41      	ldr	r3, [pc, #260]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_RCC_OscConfig+0x152>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d001      	beq.n	800308e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e1c7      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4937      	ldr	r1, [pc, #220]	; (800317c <HAL_RCC_OscConfig+0x240>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	e03a      	b.n	800311a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d020      	beq.n	80030ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ac:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x244>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b2:	f7ff f909 	bl	80022c8 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ba:	f7ff f905 	bl	80022c8 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1a8      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCC_OscConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4925      	ldr	r1, [pc, #148]	; (800317c <HAL_RCC_OscConfig+0x240>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]
 80030ec:	e015      	b.n	800311a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <HAL_RCC_OscConfig+0x244>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7ff f8e8 	bl	80022c8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fc:	f7ff f8e4 	bl	80022c8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e187      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d036      	beq.n	8003194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800312e:	4b15      	ldr	r3, [pc, #84]	; (8003184 <HAL_RCC_OscConfig+0x248>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003134:	f7ff f8c8 	bl	80022c8 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313c:	f7ff f8c4 	bl	80022c8 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e167      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCC_OscConfig+0x240>)
 8003150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0x200>
 800315a:	e01b      	b.n	8003194 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_OscConfig+0x248>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003162:	f7ff f8b1 	bl	80022c8 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003168:	e00e      	b.n	8003188 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800316a:	f7ff f8ad 	bl	80022c8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d907      	bls.n	8003188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e150      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
 800317c:	40023800 	.word	0x40023800
 8003180:	42470000 	.word	0x42470000
 8003184:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	4b88      	ldr	r3, [pc, #544]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 800318a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1ea      	bne.n	800316a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8097 	beq.w	80032d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a6:	4b81      	ldr	r3, [pc, #516]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b7d      	ldr	r3, [pc, #500]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a7c      	ldr	r2, [pc, #496]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b7a      	ldr	r3, [pc, #488]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b77      	ldr	r3, [pc, #476]	; (80033b0 <HAL_RCC_OscConfig+0x474>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031de:	4b74      	ldr	r3, [pc, #464]	; (80033b0 <HAL_RCC_OscConfig+0x474>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a73      	ldr	r2, [pc, #460]	; (80033b0 <HAL_RCC_OscConfig+0x474>)
 80031e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ea:	f7ff f86d 	bl	80022c8 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f2:	f7ff f869 	bl	80022c8 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e10c      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCC_OscConfig+0x474>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x2ea>
 8003218:	4b64      	ldr	r3, [pc, #400]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321c:	4a63      	ldr	r2, [pc, #396]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	e01c      	b.n	8003260 <HAL_RCC_OscConfig+0x324>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x30c>
 800322e:	4b5f      	ldr	r3, [pc, #380]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a5e      	ldr	r2, [pc, #376]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
 800323a:	4b5c      	ldr	r3, [pc, #368]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4a5b      	ldr	r2, [pc, #364]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0x324>
 8003248:	4b58      	ldr	r3, [pc, #352]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a57      	ldr	r2, [pc, #348]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 800324e:	f023 0301 	bic.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	4b55      	ldr	r3, [pc, #340]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 8003256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003258:	4a54      	ldr	r2, [pc, #336]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 800325a:	f023 0304 	bic.w	r3, r3, #4
 800325e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d015      	beq.n	8003294 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7ff f82e 	bl	80022c8 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7ff f82a 	bl	80022c8 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0cb      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003286:	4b49      	ldr	r3, [pc, #292]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ee      	beq.n	8003270 <HAL_RCC_OscConfig+0x334>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003294:	f7ff f818 	bl	80022c8 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7ff f814 	bl	80022c8 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0b5      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032b2:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ee      	bne.n	800329c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032c4:	4b39      	ldr	r3, [pc, #228]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	4a38      	ldr	r2, [pc, #224]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 80032ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a1 	beq.w	800341c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d05c      	beq.n	80033a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d141      	bne.n	8003372 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <HAL_RCC_OscConfig+0x478>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe ffe8 	bl	80022c8 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe ffe4 	bl	80022c8 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e087      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	4b27      	ldr	r3, [pc, #156]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	3b01      	subs	r3, #1
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	491b      	ldr	r1, [pc, #108]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b1b      	ldr	r3, [pc, #108]	; (80033b4 <HAL_RCC_OscConfig+0x478>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe ffbd 	bl	80022c8 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003352:	f7fe ffb9 	bl	80022c8 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e05c      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x416>
 8003370:	e054      	b.n	800341c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <HAL_RCC_OscConfig+0x478>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fe ffa6 	bl	80022c8 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003380:	f7fe ffa2 	bl	80022c8 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e045      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_RCC_OscConfig+0x470>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x444>
 800339e:	e03d      	b.n	800341c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e038      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40007000 	.word	0x40007000
 80033b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_RCC_OscConfig+0x4ec>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d028      	beq.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d121      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d11a      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e8:	4013      	ands	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d111      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	3b01      	subs	r3, #1
 8003402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d107      	bne.n	8003418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800

0800342c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0cc      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003440:	4b68      	ldr	r3, [pc, #416]	; (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d90c      	bls.n	8003468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b65      	ldr	r3, [pc, #404]	; (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0b8      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003480:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800348a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003498:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a52      	ldr	r2, [pc, #328]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	494d      	ldr	r1, [pc, #308]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d044      	beq.n	800354c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d119      	bne.n	800350a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d107      	bne.n	80034fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ea:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e06f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fa:	4b3b      	ldr	r3, [pc, #236]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e067      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800350a:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f023 0203 	bic.w	r2, r3, #3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	4934      	ldr	r1, [pc, #208]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	4313      	orrs	r3, r2
 800351a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800351c:	f7fe fed4 	bl	80022c8 <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	e00a      	b.n	800353a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003524:	f7fe fed0 	bl	80022c8 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e04f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353a:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 020c 	and.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	429a      	cmp	r2, r3
 800354a:	d1eb      	bne.n	8003524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d20c      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b22      	ldr	r3, [pc, #136]	; (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e032      	b.n	80035da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4916      	ldr	r1, [pc, #88]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	490e      	ldr	r1, [pc, #56]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035b2:	f000 f821 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	490a      	ldr	r1, [pc, #40]	; (80035ec <HAL_RCC_ClockConfig+0x1c0>)
 80035c4:	5ccb      	ldrb	r3, [r1, r3]
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1c4>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_ClockConfig+0x1c8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fe34 	bl	8002240 <HAL_InitTick>

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00
 80035e8:	40023800 	.word	0x40023800
 80035ec:	08006ea0 	.word	0x08006ea0
 80035f0:	20000028 	.word	0x20000028
 80035f4:	2000002c 	.word	0x2000002c

080035f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035fc:	b094      	sub	sp, #80	; 0x50
 80035fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	647b      	str	r3, [r7, #68]	; 0x44
 8003604:	2300      	movs	r3, #0
 8003606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003608:	2300      	movs	r3, #0
 800360a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003610:	4b79      	ldr	r3, [pc, #484]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	2b08      	cmp	r3, #8
 800361a:	d00d      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x40>
 800361c:	2b08      	cmp	r3, #8
 800361e:	f200 80e1 	bhi.w	80037e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <HAL_RCC_GetSysClockFreq+0x34>
 8003626:	2b04      	cmp	r3, #4
 8003628:	d003      	beq.n	8003632 <HAL_RCC_GetSysClockFreq+0x3a>
 800362a:	e0db      	b.n	80037e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800362c:	4b73      	ldr	r3, [pc, #460]	; (80037fc <HAL_RCC_GetSysClockFreq+0x204>)
 800362e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003630:	e0db      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003632:	4b73      	ldr	r3, [pc, #460]	; (8003800 <HAL_RCC_GetSysClockFreq+0x208>)
 8003634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003636:	e0d8      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003638:	4b6f      	ldr	r3, [pc, #444]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003640:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003642:	4b6d      	ldr	r3, [pc, #436]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d063      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800364e:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	099b      	lsrs	r3, r3, #6
 8003654:	2200      	movs	r2, #0
 8003656:	63bb      	str	r3, [r7, #56]	; 0x38
 8003658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003660:	633b      	str	r3, [r7, #48]	; 0x30
 8003662:	2300      	movs	r3, #0
 8003664:	637b      	str	r3, [r7, #52]	; 0x34
 8003666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800366a:	4622      	mov	r2, r4
 800366c:	462b      	mov	r3, r5
 800366e:	f04f 0000 	mov.w	r0, #0
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	0159      	lsls	r1, r3, #5
 8003678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800367c:	0150      	lsls	r0, r2, #5
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	4621      	mov	r1, r4
 8003684:	1a51      	subs	r1, r2, r1
 8003686:	6139      	str	r1, [r7, #16]
 8003688:	4629      	mov	r1, r5
 800368a:	eb63 0301 	sbc.w	r3, r3, r1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800369c:	4659      	mov	r1, fp
 800369e:	018b      	lsls	r3, r1, #6
 80036a0:	4651      	mov	r1, sl
 80036a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036a6:	4651      	mov	r1, sl
 80036a8:	018a      	lsls	r2, r1, #6
 80036aa:	4651      	mov	r1, sl
 80036ac:	ebb2 0801 	subs.w	r8, r2, r1
 80036b0:	4659      	mov	r1, fp
 80036b2:	eb63 0901 	sbc.w	r9, r3, r1
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ca:	4690      	mov	r8, r2
 80036cc:	4699      	mov	r9, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	eb18 0303 	adds.w	r3, r8, r3
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	462b      	mov	r3, r5
 80036d8:	eb49 0303 	adc.w	r3, r9, r3
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036ea:	4629      	mov	r1, r5
 80036ec:	024b      	lsls	r3, r1, #9
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036f4:	4621      	mov	r1, r4
 80036f6:	024a      	lsls	r2, r1, #9
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fe:	2200      	movs	r2, #0
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
 8003702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003708:	f7fd faae 	bl	8000c68 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003714:	e058      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003716:	4b38      	ldr	r3, [pc, #224]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	2200      	movs	r2, #0
 800371e:	4618      	mov	r0, r3
 8003720:	4611      	mov	r1, r2
 8003722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	2300      	movs	r3, #0
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
 800372c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003730:	4642      	mov	r2, r8
 8003732:	464b      	mov	r3, r9
 8003734:	f04f 0000 	mov.w	r0, #0
 8003738:	f04f 0100 	mov.w	r1, #0
 800373c:	0159      	lsls	r1, r3, #5
 800373e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003742:	0150      	lsls	r0, r2, #5
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4641      	mov	r1, r8
 800374a:	ebb2 0a01 	subs.w	sl, r2, r1
 800374e:	4649      	mov	r1, r9
 8003750:	eb63 0b01 	sbc.w	fp, r3, r1
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003768:	ebb2 040a 	subs.w	r4, r2, sl
 800376c:	eb63 050b 	sbc.w	r5, r3, fp
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	00eb      	lsls	r3, r5, #3
 800377a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800377e:	00e2      	lsls	r2, r4, #3
 8003780:	4614      	mov	r4, r2
 8003782:	461d      	mov	r5, r3
 8003784:	4643      	mov	r3, r8
 8003786:	18e3      	adds	r3, r4, r3
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	464b      	mov	r3, r9
 800378c:	eb45 0303 	adc.w	r3, r5, r3
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800379e:	4629      	mov	r1, r5
 80037a0:	028b      	lsls	r3, r1, #10
 80037a2:	4621      	mov	r1, r4
 80037a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a8:	4621      	mov	r1, r4
 80037aa:	028a      	lsls	r2, r1, #10
 80037ac:	4610      	mov	r0, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b2:	2200      	movs	r2, #0
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	61fa      	str	r2, [r7, #28]
 80037b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037bc:	f7fd fa54 	bl	8000c68 <__aeabi_uldivmod>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4613      	mov	r3, r2
 80037c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	3301      	adds	r3, #1
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e2:	e002      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetSysClockFreq+0x204>)
 80037e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3750      	adds	r7, #80	; 0x50
 80037f0:	46bd      	mov	sp, r7
 80037f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	00f42400 	.word	0x00f42400
 8003800:	007a1200 	.word	0x007a1200

08003804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCC_GetHCLKFreq+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000028 	.word	0x20000028

0800381c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003820:	f7ff fff0 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0a9b      	lsrs	r3, r3, #10
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4903      	ldr	r1, [pc, #12]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003838:	4618      	mov	r0, r3
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40023800 	.word	0x40023800
 8003840:	08006eb0 	.word	0x08006eb0

08003844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003848:	f7ff ffdc 	bl	8003804 <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0b5b      	lsrs	r3, r3, #13
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	08006eb0 	.word	0x08006eb0

0800386c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e03f      	b.n	80038fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7fe f846 	bl	8001924 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	; 0x24
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f829 	bl	8003908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800390c:	b0c0      	sub	sp, #256	; 0x100
 800390e:	af00      	add	r7, sp, #0
 8003910:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003924:	68d9      	ldr	r1, [r3, #12]
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	ea40 0301 	orr.w	r3, r0, r1
 8003930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	431a      	orrs	r2, r3
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003960:	f021 010c 	bic.w	r1, r1, #12
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800396e:	430b      	orrs	r3, r1
 8003970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	6999      	ldr	r1, [r3, #24]
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	ea40 0301 	orr.w	r3, r0, r1
 800398e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b8f      	ldr	r3, [pc, #572]	; (8003bd4 <UART_SetConfig+0x2cc>)
 8003998:	429a      	cmp	r2, r3
 800399a:	d005      	beq.n	80039a8 <UART_SetConfig+0xa0>
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b8d      	ldr	r3, [pc, #564]	; (8003bd8 <UART_SetConfig+0x2d0>)
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d104      	bne.n	80039b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7ff ff4c 	bl	8003844 <HAL_RCC_GetPCLK2Freq>
 80039ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039b0:	e003      	b.n	80039ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039b2:	f7ff ff33 	bl	800381c <HAL_RCC_GetPCLK1Freq>
 80039b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c4:	f040 810c 	bne.w	8003be0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	1891      	adds	r1, r2, r2
 80039e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80039e2:	415b      	adcs	r3, r3
 80039e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039ea:	4621      	mov	r1, r4
 80039ec:	eb12 0801 	adds.w	r8, r2, r1
 80039f0:	4629      	mov	r1, r5
 80039f2:	eb43 0901 	adc.w	r9, r3, r1
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a0a:	4690      	mov	r8, r2
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	4623      	mov	r3, r4
 8003a10:	eb18 0303 	adds.w	r3, r8, r3
 8003a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a18:	462b      	mov	r3, r5
 8003a1a:	eb49 0303 	adc.w	r3, r9, r3
 8003a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a36:	460b      	mov	r3, r1
 8003a38:	18db      	adds	r3, r3, r3
 8003a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	eb42 0303 	adc.w	r3, r2, r3
 8003a42:	657b      	str	r3, [r7, #84]	; 0x54
 8003a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a4c:	f7fd f90c 	bl	8000c68 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4b61      	ldr	r3, [pc, #388]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003a56:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	011c      	lsls	r4, r3, #4
 8003a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a70:	4642      	mov	r2, r8
 8003a72:	464b      	mov	r3, r9
 8003a74:	1891      	adds	r1, r2, r2
 8003a76:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a78:	415b      	adcs	r3, r3
 8003a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a80:	4641      	mov	r1, r8
 8003a82:	eb12 0a01 	adds.w	sl, r2, r1
 8003a86:	4649      	mov	r1, r9
 8003a88:	eb43 0b01 	adc.w	fp, r3, r1
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa0:	4692      	mov	sl, r2
 8003aa2:	469b      	mov	fp, r3
 8003aa4:	4643      	mov	r3, r8
 8003aa6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ac4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ac8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003acc:	460b      	mov	r3, r1
 8003ace:	18db      	adds	r3, r3, r3
 8003ad0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	eb42 0303 	adc.w	r3, r2, r3
 8003ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8003ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ade:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ae2:	f7fd f8c1 	bl	8000c68 <__aeabi_uldivmod>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003aee:	fba3 2301 	umull	r2, r3, r3, r1
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2264      	movs	r2, #100	; 0x64
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	1acb      	subs	r3, r1, r3
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b02:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003b04:	fba3 2302 	umull	r2, r3, r3, r2
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b10:	441c      	add	r4, r3
 8003b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b24:	4642      	mov	r2, r8
 8003b26:	464b      	mov	r3, r9
 8003b28:	1891      	adds	r1, r2, r2
 8003b2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b2c:	415b      	adcs	r3, r3
 8003b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b34:	4641      	mov	r1, r8
 8003b36:	1851      	adds	r1, r2, r1
 8003b38:	6339      	str	r1, [r7, #48]	; 0x30
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	414b      	adcs	r3, r1
 8003b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	00cb      	lsls	r3, r1, #3
 8003b50:	4651      	mov	r1, sl
 8003b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b56:	4651      	mov	r1, sl
 8003b58:	00ca      	lsls	r2, r1, #3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4642      	mov	r2, r8
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b68:	464b      	mov	r3, r9
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	eb42 0303 	adc.w	r3, r2, r3
 8003b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b88:	460b      	mov	r3, r1
 8003b8a:	18db      	adds	r3, r3, r3
 8003b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8e:	4613      	mov	r3, r2
 8003b90:	eb42 0303 	adc.w	r3, r2, r3
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b9e:	f7fd f863 	bl	8000c68 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	2164      	movs	r1, #100	; 0x64
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	3332      	adds	r3, #50	; 0x32
 8003bba:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <UART_SetConfig+0x2d4>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	f003 0207 	and.w	r2, r3, #7
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4422      	add	r2, r4
 8003bce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bd0:	e105      	b.n	8003dde <UART_SetConfig+0x4d6>
 8003bd2:	bf00      	nop
 8003bd4:	40011000 	.word	0x40011000
 8003bd8:	40011400 	.word	0x40011400
 8003bdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bf2:	4642      	mov	r2, r8
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	6239      	str	r1, [r7, #32]
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c02:	4641      	mov	r1, r8
 8003c04:	1854      	adds	r4, r2, r1
 8003c06:	4649      	mov	r1, r9
 8003c08:	eb43 0501 	adc.w	r5, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	00eb      	lsls	r3, r5, #3
 8003c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c1a:	00e2      	lsls	r2, r4, #3
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	461d      	mov	r5, r3
 8003c20:	4643      	mov	r3, r8
 8003c22:	18e3      	adds	r3, r4, r3
 8003c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c28:	464b      	mov	r3, r9
 8003c2a:	eb45 0303 	adc.w	r3, r5, r3
 8003c2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c4e:	4629      	mov	r1, r5
 8003c50:	008b      	lsls	r3, r1, #2
 8003c52:	4621      	mov	r1, r4
 8003c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c58:	4621      	mov	r1, r4
 8003c5a:	008a      	lsls	r2, r1, #2
 8003c5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c60:	f7fd f802 	bl	8000c68 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4b60      	ldr	r3, [pc, #384]	; (8003dec <UART_SetConfig+0x4e4>)
 8003c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	011c      	lsls	r4, r3, #4
 8003c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c84:	4642      	mov	r2, r8
 8003c86:	464b      	mov	r3, r9
 8003c88:	1891      	adds	r1, r2, r2
 8003c8a:	61b9      	str	r1, [r7, #24]
 8003c8c:	415b      	adcs	r3, r3
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c94:	4641      	mov	r1, r8
 8003c96:	1851      	adds	r1, r2, r1
 8003c98:	6139      	str	r1, [r7, #16]
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	414b      	adcs	r3, r1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cac:	4659      	mov	r1, fp
 8003cae:	00cb      	lsls	r3, r1, #3
 8003cb0:	4651      	mov	r1, sl
 8003cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	00ca      	lsls	r2, r1, #3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cc8:	464b      	mov	r3, r9
 8003cca:	460a      	mov	r2, r1
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003cec:	4649      	mov	r1, r9
 8003cee:	008b      	lsls	r3, r1, #2
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	008a      	lsls	r2, r1, #2
 8003cfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cfe:	f7fc ffb3 	bl	8000c68 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4b39      	ldr	r3, [pc, #228]	; (8003dec <UART_SetConfig+0x4e4>)
 8003d08:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	3332      	adds	r3, #50	; 0x32
 8003d1a:	4a34      	ldr	r2, [pc, #208]	; (8003dec <UART_SetConfig+0x4e4>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d26:	441c      	add	r4, r3
 8003d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d30:	677a      	str	r2, [r7, #116]	; 0x74
 8003d32:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d36:	4642      	mov	r2, r8
 8003d38:	464b      	mov	r3, r9
 8003d3a:	1891      	adds	r1, r2, r2
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	415b      	adcs	r3, r3
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d46:	4641      	mov	r1, r8
 8003d48:	1851      	adds	r1, r2, r1
 8003d4a:	6039      	str	r1, [r7, #0]
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	414b      	adcs	r3, r1
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	f04f 0300 	mov.w	r3, #0
 8003d5a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d5e:	4659      	mov	r1, fp
 8003d60:	00cb      	lsls	r3, r1, #3
 8003d62:	4651      	mov	r1, sl
 8003d64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d68:	4651      	mov	r1, sl
 8003d6a:	00ca      	lsls	r2, r1, #3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4603      	mov	r3, r0
 8003d72:	4642      	mov	r2, r8
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d78:	464b      	mov	r3, r9
 8003d7a:	460a      	mov	r2, r1
 8003d7c:	eb42 0303 	adc.w	r3, r2, r3
 8003d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d8c:	667a      	str	r2, [r7, #100]	; 0x64
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	008b      	lsls	r3, r1, #2
 8003d9e:	4641      	mov	r1, r8
 8003da0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da4:	4641      	mov	r1, r8
 8003da6:	008a      	lsls	r2, r1, #2
 8003da8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dac:	f7fc ff5c 	bl	8000c68 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <UART_SetConfig+0x4e4>)
 8003db6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2164      	movs	r1, #100	; 0x64
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a08      	ldr	r2, [pc, #32]	; (8003dec <UART_SetConfig+0x4e4>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4422      	add	r2, r4
 8003ddc:	609a      	str	r2, [r3, #8]
}
 8003dde:	bf00      	nop
 8003de0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003de4:	46bd      	mov	sp, r7
 8003de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dea:	bf00      	nop
 8003dec:	51eb851f 	.word	0x51eb851f

08003df0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df0:	b084      	sub	sp, #16
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	f107 001c 	add.w	r0, r7, #28
 8003dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d122      	bne.n	8003e4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d105      	bne.n	8003e42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 faa2 	bl	800438c <USB_CoreReset>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	e01a      	b.n	8003e84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fa96 	bl	800438c <USB_CoreReset>
 8003e60:	4603      	mov	r3, r0
 8003e62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
 8003e76:	e005      	b.n	8003e84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d10b      	bne.n	8003ea2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f043 0206 	orr.w	r2, r3, #6
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003eae:	b004      	add	sp, #16
 8003eb0:	4770      	bx	lr

08003eb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d115      	bne.n	8003f22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f02:	2001      	movs	r0, #1
 8003f04:	f7fe f9ec 	bl	80022e0 <HAL_Delay>
      ms++;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa2e 	bl	8004370 <USB_GetMode>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d01e      	beq.n	8003f58 <USB_SetCurrentMode+0x84>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b31      	cmp	r3, #49	; 0x31
 8003f1e:	d9f0      	bls.n	8003f02 <USB_SetCurrentMode+0x2e>
 8003f20:	e01a      	b.n	8003f58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d115      	bne.n	8003f54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f34:	2001      	movs	r0, #1
 8003f36:	f7fe f9d3 	bl	80022e0 <HAL_Delay>
      ms++;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fa15 	bl	8004370 <USB_GetMode>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <USB_SetCurrentMode+0x84>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b31      	cmp	r3, #49	; 0x31
 8003f50:	d9f0      	bls.n	8003f34 <USB_SetCurrentMode+0x60>
 8003f52:	e001      	b.n	8003f58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e005      	b.n	8003f64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b32      	cmp	r3, #50	; 0x32
 8003f5c:	d101      	bne.n	8003f62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b086      	sub	sp, #24
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	e009      	b.n	8003fa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	3340      	adds	r3, #64	; 0x40
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	2200      	movs	r2, #0
 8003f98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b0e      	cmp	r3, #14
 8003fa4:	d9f2      	bls.n	8003f8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d11c      	bne.n	8003fe6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38
 8003fe4:	e00b      	b.n	8003ffe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004004:	461a      	mov	r2, r3
 8004006:	2300      	movs	r3, #0
 8004008:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004010:	4619      	mov	r1, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	461a      	mov	r2, r3
 800401a:	680b      	ldr	r3, [r1, #0]
 800401c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800401e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004020:	2b01      	cmp	r3, #1
 8004022:	d10c      	bne.n	800403e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d104      	bne.n	8004034 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800402a:	2100      	movs	r1, #0
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f965 	bl	80042fc <USB_SetDevSpeed>
 8004032:	e008      	b.n	8004046 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004034:	2101      	movs	r1, #1
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f960 	bl	80042fc <USB_SetDevSpeed>
 800403c:	e003      	b.n	8004046 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800403e:	2103      	movs	r1, #3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f95b 	bl	80042fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004046:	2110      	movs	r1, #16
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8f3 	bl	8004234 <USB_FlushTxFifo>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f91f 	bl	800429c <USB_FlushRxFifo>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406e:	461a      	mov	r2, r3
 8004070:	2300      	movs	r3, #0
 8004072:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	461a      	mov	r2, r3
 800407c:	2300      	movs	r3, #0
 800407e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004086:	461a      	mov	r2, r3
 8004088:	2300      	movs	r3, #0
 800408a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800408c:	2300      	movs	r3, #0
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	e043      	b.n	800411a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a8:	d118      	bne.n	80040dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	461a      	mov	r2, r3
 80040be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	e013      	b.n	80040ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	461a      	mov	r2, r3
 80040d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e008      	b.n	80040ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	461a      	mov	r2, r3
 80040ea:	2300      	movs	r3, #0
 80040ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fa:	461a      	mov	r2, r3
 80040fc:	2300      	movs	r3, #0
 80040fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	461a      	mov	r2, r3
 800410e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004112:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	3301      	adds	r3, #1
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	429a      	cmp	r2, r3
 8004120:	d3b7      	bcc.n	8004092 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004122:	2300      	movs	r3, #0
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	e043      	b.n	80041b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800413a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800413e:	d118      	bne.n	8004172 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	461a      	mov	r2, r3
 8004154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e013      	b.n	8004184 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004168:	461a      	mov	r2, r3
 800416a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	e008      	b.n	8004184 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800417e:	461a      	mov	r2, r3
 8004180:	2300      	movs	r3, #0
 8004182:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	461a      	mov	r2, r3
 8004192:	2300      	movs	r3, #0
 8004194:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a2:	461a      	mov	r2, r3
 80041a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	3301      	adds	r3, #1
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d3b7      	bcc.n	8004128 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f043 0210 	orr.w	r2, r3, #16
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <USB_DevInit+0x2c4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f043 0208 	orr.w	r2, r3, #8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800420a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d107      	bne.n	8004220 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004218:	f043 0304 	orr.w	r3, r3, #4
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004220:	7dfb      	ldrb	r3, [r7, #23]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800422c:	b004      	add	sp, #16
 800422e:	4770      	bx	lr
 8004230:	803c3800 	.word	0x803c3800

08004234 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3301      	adds	r3, #1
 8004246:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a13      	ldr	r2, [pc, #76]	; (8004298 <USB_FlushTxFifo+0x64>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e01b      	b.n	800428c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	daf2      	bge.n	8004242 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	019b      	lsls	r3, r3, #6
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3301      	adds	r3, #1
 8004270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4a08      	ldr	r2, [pc, #32]	; (8004298 <USB_FlushTxFifo+0x64>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e006      	b.n	800428c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b20      	cmp	r3, #32
 8004288:	d0f0      	beq.n	800426c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	00030d40 	.word	0x00030d40

0800429c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4a11      	ldr	r2, [pc, #68]	; (80042f8 <USB_FlushRxFifo+0x5c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e018      	b.n	80042ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	daf2      	bge.n	80042a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2210      	movs	r2, #16
 80042ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3301      	adds	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a08      	ldr	r2, [pc, #32]	; (80042f8 <USB_FlushRxFifo+0x5c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e006      	b.n	80042ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d0f0      	beq.n	80042cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	00030d40 	.word	0x00030d40

080042fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	68f9      	ldr	r1, [r7, #12]
 8004318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800432e:	b480      	push	{r7}
 8004330:	b085      	sub	sp, #20
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004348:	f023 0303 	bic.w	r3, r3, #3
 800434c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 0301 	and.w	r3, r3, #1
}
 8004380:	4618      	mov	r0, r3
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3301      	adds	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <USB_CoreReset+0x64>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e01b      	b.n	80043e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	daf2      	bge.n	8004398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f043 0201 	orr.w	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3301      	adds	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <USB_CoreReset+0x64>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e006      	b.n	80043e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d0f0      	beq.n	80043c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	00030d40 	.word	0x00030d40

080043f4 <__errno>:
 80043f4:	4b01      	ldr	r3, [pc, #4]	; (80043fc <__errno+0x8>)
 80043f6:	6818      	ldr	r0, [r3, #0]
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20000034 	.word	0x20000034

08004400 <__libc_init_array>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4d0d      	ldr	r5, [pc, #52]	; (8004438 <__libc_init_array+0x38>)
 8004404:	4c0d      	ldr	r4, [pc, #52]	; (800443c <__libc_init_array+0x3c>)
 8004406:	1b64      	subs	r4, r4, r5
 8004408:	10a4      	asrs	r4, r4, #2
 800440a:	2600      	movs	r6, #0
 800440c:	42a6      	cmp	r6, r4
 800440e:	d109      	bne.n	8004424 <__libc_init_array+0x24>
 8004410:	4d0b      	ldr	r5, [pc, #44]	; (8004440 <__libc_init_array+0x40>)
 8004412:	4c0c      	ldr	r4, [pc, #48]	; (8004444 <__libc_init_array+0x44>)
 8004414:	f002 fd38 	bl	8006e88 <_init>
 8004418:	1b64      	subs	r4, r4, r5
 800441a:	10a4      	asrs	r4, r4, #2
 800441c:	2600      	movs	r6, #0
 800441e:	42a6      	cmp	r6, r4
 8004420:	d105      	bne.n	800442e <__libc_init_array+0x2e>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	f855 3b04 	ldr.w	r3, [r5], #4
 8004428:	4798      	blx	r3
 800442a:	3601      	adds	r6, #1
 800442c:	e7ee      	b.n	800440c <__libc_init_array+0xc>
 800442e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004432:	4798      	blx	r3
 8004434:	3601      	adds	r6, #1
 8004436:	e7f2      	b.n	800441e <__libc_init_array+0x1e>
 8004438:	08007a9c 	.word	0x08007a9c
 800443c:	08007a9c 	.word	0x08007a9c
 8004440:	08007a9c 	.word	0x08007a9c
 8004444:	08007aa0 	.word	0x08007aa0

08004448 <memset>:
 8004448:	4402      	add	r2, r0
 800444a:	4603      	mov	r3, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <__cvt>:
 8004458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800445c:	ec55 4b10 	vmov	r4, r5, d0
 8004460:	2d00      	cmp	r5, #0
 8004462:	460e      	mov	r6, r1
 8004464:	4619      	mov	r1, r3
 8004466:	462b      	mov	r3, r5
 8004468:	bfbb      	ittet	lt
 800446a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800446e:	461d      	movlt	r5, r3
 8004470:	2300      	movge	r3, #0
 8004472:	232d      	movlt	r3, #45	; 0x2d
 8004474:	700b      	strb	r3, [r1, #0]
 8004476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004478:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800447c:	4691      	mov	r9, r2
 800447e:	f023 0820 	bic.w	r8, r3, #32
 8004482:	bfbc      	itt	lt
 8004484:	4622      	movlt	r2, r4
 8004486:	4614      	movlt	r4, r2
 8004488:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800448c:	d005      	beq.n	800449a <__cvt+0x42>
 800448e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004492:	d100      	bne.n	8004496 <__cvt+0x3e>
 8004494:	3601      	adds	r6, #1
 8004496:	2102      	movs	r1, #2
 8004498:	e000      	b.n	800449c <__cvt+0x44>
 800449a:	2103      	movs	r1, #3
 800449c:	ab03      	add	r3, sp, #12
 800449e:	9301      	str	r3, [sp, #4]
 80044a0:	ab02      	add	r3, sp, #8
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	ec45 4b10 	vmov	d0, r4, r5
 80044a8:	4653      	mov	r3, sl
 80044aa:	4632      	mov	r2, r6
 80044ac:	f000 fccc 	bl	8004e48 <_dtoa_r>
 80044b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044b4:	4607      	mov	r7, r0
 80044b6:	d102      	bne.n	80044be <__cvt+0x66>
 80044b8:	f019 0f01 	tst.w	r9, #1
 80044bc:	d022      	beq.n	8004504 <__cvt+0xac>
 80044be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044c2:	eb07 0906 	add.w	r9, r7, r6
 80044c6:	d110      	bne.n	80044ea <__cvt+0x92>
 80044c8:	783b      	ldrb	r3, [r7, #0]
 80044ca:	2b30      	cmp	r3, #48	; 0x30
 80044cc:	d10a      	bne.n	80044e4 <__cvt+0x8c>
 80044ce:	2200      	movs	r2, #0
 80044d0:	2300      	movs	r3, #0
 80044d2:	4620      	mov	r0, r4
 80044d4:	4629      	mov	r1, r5
 80044d6:	f7fc fb07 	bl	8000ae8 <__aeabi_dcmpeq>
 80044da:	b918      	cbnz	r0, 80044e4 <__cvt+0x8c>
 80044dc:	f1c6 0601 	rsb	r6, r6, #1
 80044e0:	f8ca 6000 	str.w	r6, [sl]
 80044e4:	f8da 3000 	ldr.w	r3, [sl]
 80044e8:	4499      	add	r9, r3
 80044ea:	2200      	movs	r2, #0
 80044ec:	2300      	movs	r3, #0
 80044ee:	4620      	mov	r0, r4
 80044f0:	4629      	mov	r1, r5
 80044f2:	f7fc faf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80044f6:	b108      	cbz	r0, 80044fc <__cvt+0xa4>
 80044f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80044fc:	2230      	movs	r2, #48	; 0x30
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	454b      	cmp	r3, r9
 8004502:	d307      	bcc.n	8004514 <__cvt+0xbc>
 8004504:	9b03      	ldr	r3, [sp, #12]
 8004506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004508:	1bdb      	subs	r3, r3, r7
 800450a:	4638      	mov	r0, r7
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	b004      	add	sp, #16
 8004510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004514:	1c59      	adds	r1, r3, #1
 8004516:	9103      	str	r1, [sp, #12]
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	e7f0      	b.n	80044fe <__cvt+0xa6>

0800451c <__exponent>:
 800451c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800451e:	4603      	mov	r3, r0
 8004520:	2900      	cmp	r1, #0
 8004522:	bfb8      	it	lt
 8004524:	4249      	neglt	r1, r1
 8004526:	f803 2b02 	strb.w	r2, [r3], #2
 800452a:	bfb4      	ite	lt
 800452c:	222d      	movlt	r2, #45	; 0x2d
 800452e:	222b      	movge	r2, #43	; 0x2b
 8004530:	2909      	cmp	r1, #9
 8004532:	7042      	strb	r2, [r0, #1]
 8004534:	dd2a      	ble.n	800458c <__exponent+0x70>
 8004536:	f10d 0407 	add.w	r4, sp, #7
 800453a:	46a4      	mov	ip, r4
 800453c:	270a      	movs	r7, #10
 800453e:	46a6      	mov	lr, r4
 8004540:	460a      	mov	r2, r1
 8004542:	fb91 f6f7 	sdiv	r6, r1, r7
 8004546:	fb07 1516 	mls	r5, r7, r6, r1
 800454a:	3530      	adds	r5, #48	; 0x30
 800454c:	2a63      	cmp	r2, #99	; 0x63
 800454e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004552:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004556:	4631      	mov	r1, r6
 8004558:	dcf1      	bgt.n	800453e <__exponent+0x22>
 800455a:	3130      	adds	r1, #48	; 0x30
 800455c:	f1ae 0502 	sub.w	r5, lr, #2
 8004560:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004564:	1c44      	adds	r4, r0, #1
 8004566:	4629      	mov	r1, r5
 8004568:	4561      	cmp	r1, ip
 800456a:	d30a      	bcc.n	8004582 <__exponent+0x66>
 800456c:	f10d 0209 	add.w	r2, sp, #9
 8004570:	eba2 020e 	sub.w	r2, r2, lr
 8004574:	4565      	cmp	r5, ip
 8004576:	bf88      	it	hi
 8004578:	2200      	movhi	r2, #0
 800457a:	4413      	add	r3, r2
 800457c:	1a18      	subs	r0, r3, r0
 800457e:	b003      	add	sp, #12
 8004580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004586:	f804 2f01 	strb.w	r2, [r4, #1]!
 800458a:	e7ed      	b.n	8004568 <__exponent+0x4c>
 800458c:	2330      	movs	r3, #48	; 0x30
 800458e:	3130      	adds	r1, #48	; 0x30
 8004590:	7083      	strb	r3, [r0, #2]
 8004592:	70c1      	strb	r1, [r0, #3]
 8004594:	1d03      	adds	r3, r0, #4
 8004596:	e7f1      	b.n	800457c <__exponent+0x60>

08004598 <_printf_float>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	ed2d 8b02 	vpush	{d8}
 80045a0:	b08d      	sub	sp, #52	; 0x34
 80045a2:	460c      	mov	r4, r1
 80045a4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045a8:	4616      	mov	r6, r2
 80045aa:	461f      	mov	r7, r3
 80045ac:	4605      	mov	r5, r0
 80045ae:	f001 fa39 	bl	8005a24 <_localeconv_r>
 80045b2:	f8d0 a000 	ldr.w	sl, [r0]
 80045b6:	4650      	mov	r0, sl
 80045b8:	f7fb fe1a 	bl	80001f0 <strlen>
 80045bc:	2300      	movs	r3, #0
 80045be:	930a      	str	r3, [sp, #40]	; 0x28
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	9305      	str	r3, [sp, #20]
 80045c4:	f8d8 3000 	ldr.w	r3, [r8]
 80045c8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80045cc:	3307      	adds	r3, #7
 80045ce:	f023 0307 	bic.w	r3, r3, #7
 80045d2:	f103 0208 	add.w	r2, r3, #8
 80045d6:	f8c8 2000 	str.w	r2, [r8]
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045e2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80045e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045ea:	9307      	str	r3, [sp, #28]
 80045ec:	f8cd 8018 	str.w	r8, [sp, #24]
 80045f0:	ee08 0a10 	vmov	s16, r0
 80045f4:	4b9f      	ldr	r3, [pc, #636]	; (8004874 <_printf_float+0x2dc>)
 80045f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045fa:	f04f 32ff 	mov.w	r2, #4294967295
 80045fe:	f7fc faa5 	bl	8000b4c <__aeabi_dcmpun>
 8004602:	bb88      	cbnz	r0, 8004668 <_printf_float+0xd0>
 8004604:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004608:	4b9a      	ldr	r3, [pc, #616]	; (8004874 <_printf_float+0x2dc>)
 800460a:	f04f 32ff 	mov.w	r2, #4294967295
 800460e:	f7fc fa7f 	bl	8000b10 <__aeabi_dcmple>
 8004612:	bb48      	cbnz	r0, 8004668 <_printf_float+0xd0>
 8004614:	2200      	movs	r2, #0
 8004616:	2300      	movs	r3, #0
 8004618:	4640      	mov	r0, r8
 800461a:	4649      	mov	r1, r9
 800461c:	f7fc fa6e 	bl	8000afc <__aeabi_dcmplt>
 8004620:	b110      	cbz	r0, 8004628 <_printf_float+0x90>
 8004622:	232d      	movs	r3, #45	; 0x2d
 8004624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004628:	4b93      	ldr	r3, [pc, #588]	; (8004878 <_printf_float+0x2e0>)
 800462a:	4894      	ldr	r0, [pc, #592]	; (800487c <_printf_float+0x2e4>)
 800462c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004630:	bf94      	ite	ls
 8004632:	4698      	movls	r8, r3
 8004634:	4680      	movhi	r8, r0
 8004636:	2303      	movs	r3, #3
 8004638:	6123      	str	r3, [r4, #16]
 800463a:	9b05      	ldr	r3, [sp, #20]
 800463c:	f023 0204 	bic.w	r2, r3, #4
 8004640:	6022      	str	r2, [r4, #0]
 8004642:	f04f 0900 	mov.w	r9, #0
 8004646:	9700      	str	r7, [sp, #0]
 8004648:	4633      	mov	r3, r6
 800464a:	aa0b      	add	r2, sp, #44	; 0x2c
 800464c:	4621      	mov	r1, r4
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f9d8 	bl	8004a04 <_printf_common>
 8004654:	3001      	adds	r0, #1
 8004656:	f040 8090 	bne.w	800477a <_printf_float+0x1e2>
 800465a:	f04f 30ff 	mov.w	r0, #4294967295
 800465e:	b00d      	add	sp, #52	; 0x34
 8004660:	ecbd 8b02 	vpop	{d8}
 8004664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004668:	4642      	mov	r2, r8
 800466a:	464b      	mov	r3, r9
 800466c:	4640      	mov	r0, r8
 800466e:	4649      	mov	r1, r9
 8004670:	f7fc fa6c 	bl	8000b4c <__aeabi_dcmpun>
 8004674:	b140      	cbz	r0, 8004688 <_printf_float+0xf0>
 8004676:	464b      	mov	r3, r9
 8004678:	2b00      	cmp	r3, #0
 800467a:	bfbc      	itt	lt
 800467c:	232d      	movlt	r3, #45	; 0x2d
 800467e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004682:	487f      	ldr	r0, [pc, #508]	; (8004880 <_printf_float+0x2e8>)
 8004684:	4b7f      	ldr	r3, [pc, #508]	; (8004884 <_printf_float+0x2ec>)
 8004686:	e7d1      	b.n	800462c <_printf_float+0x94>
 8004688:	6863      	ldr	r3, [r4, #4]
 800468a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800468e:	9206      	str	r2, [sp, #24]
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	d13f      	bne.n	8004714 <_printf_float+0x17c>
 8004694:	2306      	movs	r3, #6
 8004696:	6063      	str	r3, [r4, #4]
 8004698:	9b05      	ldr	r3, [sp, #20]
 800469a:	6861      	ldr	r1, [r4, #4]
 800469c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046a0:	2300      	movs	r3, #0
 80046a2:	9303      	str	r3, [sp, #12]
 80046a4:	ab0a      	add	r3, sp, #40	; 0x28
 80046a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046aa:	ab09      	add	r3, sp, #36	; 0x24
 80046ac:	ec49 8b10 	vmov	d0, r8, r9
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6022      	str	r2, [r4, #0]
 80046b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046b8:	4628      	mov	r0, r5
 80046ba:	f7ff fecd 	bl	8004458 <__cvt>
 80046be:	9b06      	ldr	r3, [sp, #24]
 80046c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046c2:	2b47      	cmp	r3, #71	; 0x47
 80046c4:	4680      	mov	r8, r0
 80046c6:	d108      	bne.n	80046da <_printf_float+0x142>
 80046c8:	1cc8      	adds	r0, r1, #3
 80046ca:	db02      	blt.n	80046d2 <_printf_float+0x13a>
 80046cc:	6863      	ldr	r3, [r4, #4]
 80046ce:	4299      	cmp	r1, r3
 80046d0:	dd41      	ble.n	8004756 <_printf_float+0x1be>
 80046d2:	f1ab 0b02 	sub.w	fp, fp, #2
 80046d6:	fa5f fb8b 	uxtb.w	fp, fp
 80046da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80046de:	d820      	bhi.n	8004722 <_printf_float+0x18a>
 80046e0:	3901      	subs	r1, #1
 80046e2:	465a      	mov	r2, fp
 80046e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046e8:	9109      	str	r1, [sp, #36]	; 0x24
 80046ea:	f7ff ff17 	bl	800451c <__exponent>
 80046ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046f0:	1813      	adds	r3, r2, r0
 80046f2:	2a01      	cmp	r2, #1
 80046f4:	4681      	mov	r9, r0
 80046f6:	6123      	str	r3, [r4, #16]
 80046f8:	dc02      	bgt.n	8004700 <_printf_float+0x168>
 80046fa:	6822      	ldr	r2, [r4, #0]
 80046fc:	07d2      	lsls	r2, r2, #31
 80046fe:	d501      	bpl.n	8004704 <_printf_float+0x16c>
 8004700:	3301      	adds	r3, #1
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004708:	2b00      	cmp	r3, #0
 800470a:	d09c      	beq.n	8004646 <_printf_float+0xae>
 800470c:	232d      	movs	r3, #45	; 0x2d
 800470e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004712:	e798      	b.n	8004646 <_printf_float+0xae>
 8004714:	9a06      	ldr	r2, [sp, #24]
 8004716:	2a47      	cmp	r2, #71	; 0x47
 8004718:	d1be      	bne.n	8004698 <_printf_float+0x100>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1bc      	bne.n	8004698 <_printf_float+0x100>
 800471e:	2301      	movs	r3, #1
 8004720:	e7b9      	b.n	8004696 <_printf_float+0xfe>
 8004722:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004726:	d118      	bne.n	800475a <_printf_float+0x1c2>
 8004728:	2900      	cmp	r1, #0
 800472a:	6863      	ldr	r3, [r4, #4]
 800472c:	dd0b      	ble.n	8004746 <_printf_float+0x1ae>
 800472e:	6121      	str	r1, [r4, #16]
 8004730:	b913      	cbnz	r3, 8004738 <_printf_float+0x1a0>
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	07d0      	lsls	r0, r2, #31
 8004736:	d502      	bpl.n	800473e <_printf_float+0x1a6>
 8004738:	3301      	adds	r3, #1
 800473a:	440b      	add	r3, r1
 800473c:	6123      	str	r3, [r4, #16]
 800473e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004740:	f04f 0900 	mov.w	r9, #0
 8004744:	e7de      	b.n	8004704 <_printf_float+0x16c>
 8004746:	b913      	cbnz	r3, 800474e <_printf_float+0x1b6>
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	07d2      	lsls	r2, r2, #31
 800474c:	d501      	bpl.n	8004752 <_printf_float+0x1ba>
 800474e:	3302      	adds	r3, #2
 8004750:	e7f4      	b.n	800473c <_printf_float+0x1a4>
 8004752:	2301      	movs	r3, #1
 8004754:	e7f2      	b.n	800473c <_printf_float+0x1a4>
 8004756:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800475a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800475c:	4299      	cmp	r1, r3
 800475e:	db05      	blt.n	800476c <_printf_float+0x1d4>
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	6121      	str	r1, [r4, #16]
 8004764:	07d8      	lsls	r0, r3, #31
 8004766:	d5ea      	bpl.n	800473e <_printf_float+0x1a6>
 8004768:	1c4b      	adds	r3, r1, #1
 800476a:	e7e7      	b.n	800473c <_printf_float+0x1a4>
 800476c:	2900      	cmp	r1, #0
 800476e:	bfd4      	ite	le
 8004770:	f1c1 0202 	rsble	r2, r1, #2
 8004774:	2201      	movgt	r2, #1
 8004776:	4413      	add	r3, r2
 8004778:	e7e0      	b.n	800473c <_printf_float+0x1a4>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	055a      	lsls	r2, r3, #21
 800477e:	d407      	bmi.n	8004790 <_printf_float+0x1f8>
 8004780:	6923      	ldr	r3, [r4, #16]
 8004782:	4642      	mov	r2, r8
 8004784:	4631      	mov	r1, r6
 8004786:	4628      	mov	r0, r5
 8004788:	47b8      	blx	r7
 800478a:	3001      	adds	r0, #1
 800478c:	d12c      	bne.n	80047e8 <_printf_float+0x250>
 800478e:	e764      	b.n	800465a <_printf_float+0xc2>
 8004790:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004794:	f240 80e0 	bls.w	8004958 <_printf_float+0x3c0>
 8004798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800479c:	2200      	movs	r2, #0
 800479e:	2300      	movs	r3, #0
 80047a0:	f7fc f9a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d034      	beq.n	8004812 <_printf_float+0x27a>
 80047a8:	4a37      	ldr	r2, [pc, #220]	; (8004888 <_printf_float+0x2f0>)
 80047aa:	2301      	movs	r3, #1
 80047ac:	4631      	mov	r1, r6
 80047ae:	4628      	mov	r0, r5
 80047b0:	47b8      	blx	r7
 80047b2:	3001      	adds	r0, #1
 80047b4:	f43f af51 	beq.w	800465a <_printf_float+0xc2>
 80047b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047bc:	429a      	cmp	r2, r3
 80047be:	db02      	blt.n	80047c6 <_printf_float+0x22e>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	07d8      	lsls	r0, r3, #31
 80047c4:	d510      	bpl.n	80047e8 <_printf_float+0x250>
 80047c6:	ee18 3a10 	vmov	r3, s16
 80047ca:	4652      	mov	r2, sl
 80047cc:	4631      	mov	r1, r6
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	f43f af41 	beq.w	800465a <_printf_float+0xc2>
 80047d8:	f04f 0800 	mov.w	r8, #0
 80047dc:	f104 091a 	add.w	r9, r4, #26
 80047e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	4543      	cmp	r3, r8
 80047e6:	dc09      	bgt.n	80047fc <_printf_float+0x264>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	079b      	lsls	r3, r3, #30
 80047ec:	f100 8105 	bmi.w	80049fa <_printf_float+0x462>
 80047f0:	68e0      	ldr	r0, [r4, #12]
 80047f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047f4:	4298      	cmp	r0, r3
 80047f6:	bfb8      	it	lt
 80047f8:	4618      	movlt	r0, r3
 80047fa:	e730      	b.n	800465e <_printf_float+0xc6>
 80047fc:	2301      	movs	r3, #1
 80047fe:	464a      	mov	r2, r9
 8004800:	4631      	mov	r1, r6
 8004802:	4628      	mov	r0, r5
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	f43f af27 	beq.w	800465a <_printf_float+0xc2>
 800480c:	f108 0801 	add.w	r8, r8, #1
 8004810:	e7e6      	b.n	80047e0 <_printf_float+0x248>
 8004812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	dc39      	bgt.n	800488c <_printf_float+0x2f4>
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <_printf_float+0x2f0>)
 800481a:	2301      	movs	r3, #1
 800481c:	4631      	mov	r1, r6
 800481e:	4628      	mov	r0, r5
 8004820:	47b8      	blx	r7
 8004822:	3001      	adds	r0, #1
 8004824:	f43f af19 	beq.w	800465a <_printf_float+0xc2>
 8004828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800482c:	4313      	orrs	r3, r2
 800482e:	d102      	bne.n	8004836 <_printf_float+0x29e>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	07d9      	lsls	r1, r3, #31
 8004834:	d5d8      	bpl.n	80047e8 <_printf_float+0x250>
 8004836:	ee18 3a10 	vmov	r3, s16
 800483a:	4652      	mov	r2, sl
 800483c:	4631      	mov	r1, r6
 800483e:	4628      	mov	r0, r5
 8004840:	47b8      	blx	r7
 8004842:	3001      	adds	r0, #1
 8004844:	f43f af09 	beq.w	800465a <_printf_float+0xc2>
 8004848:	f04f 0900 	mov.w	r9, #0
 800484c:	f104 0a1a 	add.w	sl, r4, #26
 8004850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004852:	425b      	negs	r3, r3
 8004854:	454b      	cmp	r3, r9
 8004856:	dc01      	bgt.n	800485c <_printf_float+0x2c4>
 8004858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800485a:	e792      	b.n	8004782 <_printf_float+0x1ea>
 800485c:	2301      	movs	r3, #1
 800485e:	4652      	mov	r2, sl
 8004860:	4631      	mov	r1, r6
 8004862:	4628      	mov	r0, r5
 8004864:	47b8      	blx	r7
 8004866:	3001      	adds	r0, #1
 8004868:	f43f aef7 	beq.w	800465a <_printf_float+0xc2>
 800486c:	f109 0901 	add.w	r9, r9, #1
 8004870:	e7ee      	b.n	8004850 <_printf_float+0x2b8>
 8004872:	bf00      	nop
 8004874:	7fefffff 	.word	0x7fefffff
 8004878:	080076c0 	.word	0x080076c0
 800487c:	080076c4 	.word	0x080076c4
 8004880:	080076cc 	.word	0x080076cc
 8004884:	080076c8 	.word	0x080076c8
 8004888:	080076d0 	.word	0x080076d0
 800488c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800488e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004890:	429a      	cmp	r2, r3
 8004892:	bfa8      	it	ge
 8004894:	461a      	movge	r2, r3
 8004896:	2a00      	cmp	r2, #0
 8004898:	4691      	mov	r9, r2
 800489a:	dc37      	bgt.n	800490c <_printf_float+0x374>
 800489c:	f04f 0b00 	mov.w	fp, #0
 80048a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048a4:	f104 021a 	add.w	r2, r4, #26
 80048a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048aa:	9305      	str	r3, [sp, #20]
 80048ac:	eba3 0309 	sub.w	r3, r3, r9
 80048b0:	455b      	cmp	r3, fp
 80048b2:	dc33      	bgt.n	800491c <_printf_float+0x384>
 80048b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048b8:	429a      	cmp	r2, r3
 80048ba:	db3b      	blt.n	8004934 <_printf_float+0x39c>
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	07da      	lsls	r2, r3, #31
 80048c0:	d438      	bmi.n	8004934 <_printf_float+0x39c>
 80048c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048c4:	9a05      	ldr	r2, [sp, #20]
 80048c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048c8:	1a9a      	subs	r2, r3, r2
 80048ca:	eba3 0901 	sub.w	r9, r3, r1
 80048ce:	4591      	cmp	r9, r2
 80048d0:	bfa8      	it	ge
 80048d2:	4691      	movge	r9, r2
 80048d4:	f1b9 0f00 	cmp.w	r9, #0
 80048d8:	dc35      	bgt.n	8004946 <_printf_float+0x3ae>
 80048da:	f04f 0800 	mov.w	r8, #0
 80048de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048e2:	f104 0a1a 	add.w	sl, r4, #26
 80048e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	eba3 0309 	sub.w	r3, r3, r9
 80048f0:	4543      	cmp	r3, r8
 80048f2:	f77f af79 	ble.w	80047e8 <_printf_float+0x250>
 80048f6:	2301      	movs	r3, #1
 80048f8:	4652      	mov	r2, sl
 80048fa:	4631      	mov	r1, r6
 80048fc:	4628      	mov	r0, r5
 80048fe:	47b8      	blx	r7
 8004900:	3001      	adds	r0, #1
 8004902:	f43f aeaa 	beq.w	800465a <_printf_float+0xc2>
 8004906:	f108 0801 	add.w	r8, r8, #1
 800490a:	e7ec      	b.n	80048e6 <_printf_float+0x34e>
 800490c:	4613      	mov	r3, r2
 800490e:	4631      	mov	r1, r6
 8004910:	4642      	mov	r2, r8
 8004912:	4628      	mov	r0, r5
 8004914:	47b8      	blx	r7
 8004916:	3001      	adds	r0, #1
 8004918:	d1c0      	bne.n	800489c <_printf_float+0x304>
 800491a:	e69e      	b.n	800465a <_printf_float+0xc2>
 800491c:	2301      	movs	r3, #1
 800491e:	4631      	mov	r1, r6
 8004920:	4628      	mov	r0, r5
 8004922:	9205      	str	r2, [sp, #20]
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f ae97 	beq.w	800465a <_printf_float+0xc2>
 800492c:	9a05      	ldr	r2, [sp, #20]
 800492e:	f10b 0b01 	add.w	fp, fp, #1
 8004932:	e7b9      	b.n	80048a8 <_printf_float+0x310>
 8004934:	ee18 3a10 	vmov	r3, s16
 8004938:	4652      	mov	r2, sl
 800493a:	4631      	mov	r1, r6
 800493c:	4628      	mov	r0, r5
 800493e:	47b8      	blx	r7
 8004940:	3001      	adds	r0, #1
 8004942:	d1be      	bne.n	80048c2 <_printf_float+0x32a>
 8004944:	e689      	b.n	800465a <_printf_float+0xc2>
 8004946:	9a05      	ldr	r2, [sp, #20]
 8004948:	464b      	mov	r3, r9
 800494a:	4442      	add	r2, r8
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	d1c1      	bne.n	80048da <_printf_float+0x342>
 8004956:	e680      	b.n	800465a <_printf_float+0xc2>
 8004958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800495a:	2a01      	cmp	r2, #1
 800495c:	dc01      	bgt.n	8004962 <_printf_float+0x3ca>
 800495e:	07db      	lsls	r3, r3, #31
 8004960:	d538      	bpl.n	80049d4 <_printf_float+0x43c>
 8004962:	2301      	movs	r3, #1
 8004964:	4642      	mov	r2, r8
 8004966:	4631      	mov	r1, r6
 8004968:	4628      	mov	r0, r5
 800496a:	47b8      	blx	r7
 800496c:	3001      	adds	r0, #1
 800496e:	f43f ae74 	beq.w	800465a <_printf_float+0xc2>
 8004972:	ee18 3a10 	vmov	r3, s16
 8004976:	4652      	mov	r2, sl
 8004978:	4631      	mov	r1, r6
 800497a:	4628      	mov	r0, r5
 800497c:	47b8      	blx	r7
 800497e:	3001      	adds	r0, #1
 8004980:	f43f ae6b 	beq.w	800465a <_printf_float+0xc2>
 8004984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004988:	2200      	movs	r2, #0
 800498a:	2300      	movs	r3, #0
 800498c:	f7fc f8ac 	bl	8000ae8 <__aeabi_dcmpeq>
 8004990:	b9d8      	cbnz	r0, 80049ca <_printf_float+0x432>
 8004992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004994:	f108 0201 	add.w	r2, r8, #1
 8004998:	3b01      	subs	r3, #1
 800499a:	4631      	mov	r1, r6
 800499c:	4628      	mov	r0, r5
 800499e:	47b8      	blx	r7
 80049a0:	3001      	adds	r0, #1
 80049a2:	d10e      	bne.n	80049c2 <_printf_float+0x42a>
 80049a4:	e659      	b.n	800465a <_printf_float+0xc2>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4652      	mov	r2, sl
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	f43f ae52 	beq.w	800465a <_printf_float+0xc2>
 80049b6:	f108 0801 	add.w	r8, r8, #1
 80049ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049bc:	3b01      	subs	r3, #1
 80049be:	4543      	cmp	r3, r8
 80049c0:	dcf1      	bgt.n	80049a6 <_printf_float+0x40e>
 80049c2:	464b      	mov	r3, r9
 80049c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049c8:	e6dc      	b.n	8004784 <_printf_float+0x1ec>
 80049ca:	f04f 0800 	mov.w	r8, #0
 80049ce:	f104 0a1a 	add.w	sl, r4, #26
 80049d2:	e7f2      	b.n	80049ba <_printf_float+0x422>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4642      	mov	r2, r8
 80049d8:	e7df      	b.n	800499a <_printf_float+0x402>
 80049da:	2301      	movs	r3, #1
 80049dc:	464a      	mov	r2, r9
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b8      	blx	r7
 80049e4:	3001      	adds	r0, #1
 80049e6:	f43f ae38 	beq.w	800465a <_printf_float+0xc2>
 80049ea:	f108 0801 	add.w	r8, r8, #1
 80049ee:	68e3      	ldr	r3, [r4, #12]
 80049f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80049f2:	1a5b      	subs	r3, r3, r1
 80049f4:	4543      	cmp	r3, r8
 80049f6:	dcf0      	bgt.n	80049da <_printf_float+0x442>
 80049f8:	e6fa      	b.n	80047f0 <_printf_float+0x258>
 80049fa:	f04f 0800 	mov.w	r8, #0
 80049fe:	f104 0919 	add.w	r9, r4, #25
 8004a02:	e7f4      	b.n	80049ee <_printf_float+0x456>

08004a04 <_printf_common>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	4616      	mov	r6, r2
 8004a0a:	4699      	mov	r9, r3
 8004a0c:	688a      	ldr	r2, [r1, #8]
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfb8      	it	lt
 8004a18:	4613      	movlt	r3, r2
 8004a1a:	6033      	str	r3, [r6, #0]
 8004a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a20:	4607      	mov	r7, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	b10a      	cbz	r2, 8004a2a <_printf_common+0x26>
 8004a26:	3301      	adds	r3, #1
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	0699      	lsls	r1, r3, #26
 8004a2e:	bf42      	ittt	mi
 8004a30:	6833      	ldrmi	r3, [r6, #0]
 8004a32:	3302      	addmi	r3, #2
 8004a34:	6033      	strmi	r3, [r6, #0]
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	f015 0506 	ands.w	r5, r5, #6
 8004a3c:	d106      	bne.n	8004a4c <_printf_common+0x48>
 8004a3e:	f104 0a19 	add.w	sl, r4, #25
 8004a42:	68e3      	ldr	r3, [r4, #12]
 8004a44:	6832      	ldr	r2, [r6, #0]
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	42ab      	cmp	r3, r5
 8004a4a:	dc26      	bgt.n	8004a9a <_printf_common+0x96>
 8004a4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a50:	1e13      	subs	r3, r2, #0
 8004a52:	6822      	ldr	r2, [r4, #0]
 8004a54:	bf18      	it	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	0692      	lsls	r2, r2, #26
 8004a5a:	d42b      	bmi.n	8004ab4 <_printf_common+0xb0>
 8004a5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a60:	4649      	mov	r1, r9
 8004a62:	4638      	mov	r0, r7
 8004a64:	47c0      	blx	r8
 8004a66:	3001      	adds	r0, #1
 8004a68:	d01e      	beq.n	8004aa8 <_printf_common+0xa4>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	68e5      	ldr	r5, [r4, #12]
 8004a6e:	6832      	ldr	r2, [r6, #0]
 8004a70:	f003 0306 	and.w	r3, r3, #6
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	bf08      	it	eq
 8004a78:	1aad      	subeq	r5, r5, r2
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	6922      	ldr	r2, [r4, #16]
 8004a7e:	bf0c      	ite	eq
 8004a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a84:	2500      	movne	r5, #0
 8004a86:	4293      	cmp	r3, r2
 8004a88:	bfc4      	itt	gt
 8004a8a:	1a9b      	subgt	r3, r3, r2
 8004a8c:	18ed      	addgt	r5, r5, r3
 8004a8e:	2600      	movs	r6, #0
 8004a90:	341a      	adds	r4, #26
 8004a92:	42b5      	cmp	r5, r6
 8004a94:	d11a      	bne.n	8004acc <_printf_common+0xc8>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e008      	b.n	8004aac <_printf_common+0xa8>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	47c0      	blx	r8
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d103      	bne.n	8004ab0 <_printf_common+0xac>
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	e7c6      	b.n	8004a42 <_printf_common+0x3e>
 8004ab4:	18e1      	adds	r1, r4, r3
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	2030      	movs	r0, #48	; 0x30
 8004aba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004abe:	4422      	add	r2, r4
 8004ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ac8:	3302      	adds	r3, #2
 8004aca:	e7c7      	b.n	8004a5c <_printf_common+0x58>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4622      	mov	r2, r4
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	47c0      	blx	r8
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d0e6      	beq.n	8004aa8 <_printf_common+0xa4>
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7d9      	b.n	8004a92 <_printf_common+0x8e>
	...

08004ae0 <_printf_i>:
 8004ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	7e0f      	ldrb	r7, [r1, #24]
 8004ae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ae8:	2f78      	cmp	r7, #120	; 0x78
 8004aea:	4691      	mov	r9, r2
 8004aec:	4680      	mov	r8, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	469a      	mov	sl, r3
 8004af2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004af6:	d807      	bhi.n	8004b08 <_printf_i+0x28>
 8004af8:	2f62      	cmp	r7, #98	; 0x62
 8004afa:	d80a      	bhi.n	8004b12 <_printf_i+0x32>
 8004afc:	2f00      	cmp	r7, #0
 8004afe:	f000 80d8 	beq.w	8004cb2 <_printf_i+0x1d2>
 8004b02:	2f58      	cmp	r7, #88	; 0x58
 8004b04:	f000 80a3 	beq.w	8004c4e <_printf_i+0x16e>
 8004b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b10:	e03a      	b.n	8004b88 <_printf_i+0xa8>
 8004b12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b16:	2b15      	cmp	r3, #21
 8004b18:	d8f6      	bhi.n	8004b08 <_printf_i+0x28>
 8004b1a:	a101      	add	r1, pc, #4	; (adr r1, 8004b20 <_printf_i+0x40>)
 8004b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b20:	08004b79 	.word	0x08004b79
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b09 	.word	0x08004b09
 8004b2c:	08004b09 	.word	0x08004b09
 8004b30:	08004b09 	.word	0x08004b09
 8004b34:	08004b09 	.word	0x08004b09
 8004b38:	08004b8d 	.word	0x08004b8d
 8004b3c:	08004b09 	.word	0x08004b09
 8004b40:	08004b09 	.word	0x08004b09
 8004b44:	08004b09 	.word	0x08004b09
 8004b48:	08004b09 	.word	0x08004b09
 8004b4c:	08004c99 	.word	0x08004c99
 8004b50:	08004bbd 	.word	0x08004bbd
 8004b54:	08004c7b 	.word	0x08004c7b
 8004b58:	08004b09 	.word	0x08004b09
 8004b5c:	08004b09 	.word	0x08004b09
 8004b60:	08004cbb 	.word	0x08004cbb
 8004b64:	08004b09 	.word	0x08004b09
 8004b68:	08004bbd 	.word	0x08004bbd
 8004b6c:	08004b09 	.word	0x08004b09
 8004b70:	08004b09 	.word	0x08004b09
 8004b74:	08004c83 	.word	0x08004c83
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	602a      	str	r2, [r5, #0]
 8004b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0a3      	b.n	8004cd4 <_printf_i+0x1f4>
 8004b8c:	6820      	ldr	r0, [r4, #0]
 8004b8e:	6829      	ldr	r1, [r5, #0]
 8004b90:	0606      	lsls	r6, r0, #24
 8004b92:	f101 0304 	add.w	r3, r1, #4
 8004b96:	d50a      	bpl.n	8004bae <_printf_i+0xce>
 8004b98:	680e      	ldr	r6, [r1, #0]
 8004b9a:	602b      	str	r3, [r5, #0]
 8004b9c:	2e00      	cmp	r6, #0
 8004b9e:	da03      	bge.n	8004ba8 <_printf_i+0xc8>
 8004ba0:	232d      	movs	r3, #45	; 0x2d
 8004ba2:	4276      	negs	r6, r6
 8004ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ba8:	485e      	ldr	r0, [pc, #376]	; (8004d24 <_printf_i+0x244>)
 8004baa:	230a      	movs	r3, #10
 8004bac:	e019      	b.n	8004be2 <_printf_i+0x102>
 8004bae:	680e      	ldr	r6, [r1, #0]
 8004bb0:	602b      	str	r3, [r5, #0]
 8004bb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bb6:	bf18      	it	ne
 8004bb8:	b236      	sxthne	r6, r6
 8004bba:	e7ef      	b.n	8004b9c <_printf_i+0xbc>
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	6820      	ldr	r0, [r4, #0]
 8004bc0:	1d19      	adds	r1, r3, #4
 8004bc2:	6029      	str	r1, [r5, #0]
 8004bc4:	0601      	lsls	r1, r0, #24
 8004bc6:	d501      	bpl.n	8004bcc <_printf_i+0xec>
 8004bc8:	681e      	ldr	r6, [r3, #0]
 8004bca:	e002      	b.n	8004bd2 <_printf_i+0xf2>
 8004bcc:	0646      	lsls	r6, r0, #25
 8004bce:	d5fb      	bpl.n	8004bc8 <_printf_i+0xe8>
 8004bd0:	881e      	ldrh	r6, [r3, #0]
 8004bd2:	4854      	ldr	r0, [pc, #336]	; (8004d24 <_printf_i+0x244>)
 8004bd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2308      	moveq	r3, #8
 8004bda:	230a      	movne	r3, #10
 8004bdc:	2100      	movs	r1, #0
 8004bde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004be2:	6865      	ldr	r5, [r4, #4]
 8004be4:	60a5      	str	r5, [r4, #8]
 8004be6:	2d00      	cmp	r5, #0
 8004be8:	bfa2      	ittt	ge
 8004bea:	6821      	ldrge	r1, [r4, #0]
 8004bec:	f021 0104 	bicge.w	r1, r1, #4
 8004bf0:	6021      	strge	r1, [r4, #0]
 8004bf2:	b90e      	cbnz	r6, 8004bf8 <_printf_i+0x118>
 8004bf4:	2d00      	cmp	r5, #0
 8004bf6:	d04d      	beq.n	8004c94 <_printf_i+0x1b4>
 8004bf8:	4615      	mov	r5, r2
 8004bfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004bfe:	fb03 6711 	mls	r7, r3, r1, r6
 8004c02:	5dc7      	ldrb	r7, [r0, r7]
 8004c04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c08:	4637      	mov	r7, r6
 8004c0a:	42bb      	cmp	r3, r7
 8004c0c:	460e      	mov	r6, r1
 8004c0e:	d9f4      	bls.n	8004bfa <_printf_i+0x11a>
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d10b      	bne.n	8004c2c <_printf_i+0x14c>
 8004c14:	6823      	ldr	r3, [r4, #0]
 8004c16:	07de      	lsls	r6, r3, #31
 8004c18:	d508      	bpl.n	8004c2c <_printf_i+0x14c>
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	6861      	ldr	r1, [r4, #4]
 8004c1e:	4299      	cmp	r1, r3
 8004c20:	bfde      	ittt	le
 8004c22:	2330      	movle	r3, #48	; 0x30
 8004c24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c2c:	1b52      	subs	r2, r2, r5
 8004c2e:	6122      	str	r2, [r4, #16]
 8004c30:	f8cd a000 	str.w	sl, [sp]
 8004c34:	464b      	mov	r3, r9
 8004c36:	aa03      	add	r2, sp, #12
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	f7ff fee2 	bl	8004a04 <_printf_common>
 8004c40:	3001      	adds	r0, #1
 8004c42:	d14c      	bne.n	8004cde <_printf_i+0x1fe>
 8004c44:	f04f 30ff 	mov.w	r0, #4294967295
 8004c48:	b004      	add	sp, #16
 8004c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4e:	4835      	ldr	r0, [pc, #212]	; (8004d24 <_printf_i+0x244>)
 8004c50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c54:	6829      	ldr	r1, [r5, #0]
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c5c:	6029      	str	r1, [r5, #0]
 8004c5e:	061d      	lsls	r5, r3, #24
 8004c60:	d514      	bpl.n	8004c8c <_printf_i+0x1ac>
 8004c62:	07df      	lsls	r7, r3, #31
 8004c64:	bf44      	itt	mi
 8004c66:	f043 0320 	orrmi.w	r3, r3, #32
 8004c6a:	6023      	strmi	r3, [r4, #0]
 8004c6c:	b91e      	cbnz	r6, 8004c76 <_printf_i+0x196>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	f023 0320 	bic.w	r3, r3, #32
 8004c74:	6023      	str	r3, [r4, #0]
 8004c76:	2310      	movs	r3, #16
 8004c78:	e7b0      	b.n	8004bdc <_printf_i+0xfc>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	f043 0320 	orr.w	r3, r3, #32
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	2378      	movs	r3, #120	; 0x78
 8004c84:	4828      	ldr	r0, [pc, #160]	; (8004d28 <_printf_i+0x248>)
 8004c86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c8a:	e7e3      	b.n	8004c54 <_printf_i+0x174>
 8004c8c:	0659      	lsls	r1, r3, #25
 8004c8e:	bf48      	it	mi
 8004c90:	b2b6      	uxthmi	r6, r6
 8004c92:	e7e6      	b.n	8004c62 <_printf_i+0x182>
 8004c94:	4615      	mov	r5, r2
 8004c96:	e7bb      	b.n	8004c10 <_printf_i+0x130>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	6826      	ldr	r6, [r4, #0]
 8004c9c:	6961      	ldr	r1, [r4, #20]
 8004c9e:	1d18      	adds	r0, r3, #4
 8004ca0:	6028      	str	r0, [r5, #0]
 8004ca2:	0635      	lsls	r5, r6, #24
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	d501      	bpl.n	8004cac <_printf_i+0x1cc>
 8004ca8:	6019      	str	r1, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <_printf_i+0x1d2>
 8004cac:	0670      	lsls	r0, r6, #25
 8004cae:	d5fb      	bpl.n	8004ca8 <_printf_i+0x1c8>
 8004cb0:	8019      	strh	r1, [r3, #0]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	6123      	str	r3, [r4, #16]
 8004cb6:	4615      	mov	r5, r2
 8004cb8:	e7ba      	b.n	8004c30 <_printf_i+0x150>
 8004cba:	682b      	ldr	r3, [r5, #0]
 8004cbc:	1d1a      	adds	r2, r3, #4
 8004cbe:	602a      	str	r2, [r5, #0]
 8004cc0:	681d      	ldr	r5, [r3, #0]
 8004cc2:	6862      	ldr	r2, [r4, #4]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f7fb fa9a 	bl	8000200 <memchr>
 8004ccc:	b108      	cbz	r0, 8004cd2 <_printf_i+0x1f2>
 8004cce:	1b40      	subs	r0, r0, r5
 8004cd0:	6060      	str	r0, [r4, #4]
 8004cd2:	6863      	ldr	r3, [r4, #4]
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cdc:	e7a8      	b.n	8004c30 <_printf_i+0x150>
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	47d0      	blx	sl
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d0ab      	beq.n	8004c44 <_printf_i+0x164>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	079b      	lsls	r3, r3, #30
 8004cf0:	d413      	bmi.n	8004d1a <_printf_i+0x23a>
 8004cf2:	68e0      	ldr	r0, [r4, #12]
 8004cf4:	9b03      	ldr	r3, [sp, #12]
 8004cf6:	4298      	cmp	r0, r3
 8004cf8:	bfb8      	it	lt
 8004cfa:	4618      	movlt	r0, r3
 8004cfc:	e7a4      	b.n	8004c48 <_printf_i+0x168>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4632      	mov	r2, r6
 8004d02:	4649      	mov	r1, r9
 8004d04:	4640      	mov	r0, r8
 8004d06:	47d0      	blx	sl
 8004d08:	3001      	adds	r0, #1
 8004d0a:	d09b      	beq.n	8004c44 <_printf_i+0x164>
 8004d0c:	3501      	adds	r5, #1
 8004d0e:	68e3      	ldr	r3, [r4, #12]
 8004d10:	9903      	ldr	r1, [sp, #12]
 8004d12:	1a5b      	subs	r3, r3, r1
 8004d14:	42ab      	cmp	r3, r5
 8004d16:	dcf2      	bgt.n	8004cfe <_printf_i+0x21e>
 8004d18:	e7eb      	b.n	8004cf2 <_printf_i+0x212>
 8004d1a:	2500      	movs	r5, #0
 8004d1c:	f104 0619 	add.w	r6, r4, #25
 8004d20:	e7f5      	b.n	8004d0e <_printf_i+0x22e>
 8004d22:	bf00      	nop
 8004d24:	080076d2 	.word	0x080076d2
 8004d28:	080076e3 	.word	0x080076e3

08004d2c <quorem>:
 8004d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d30:	6903      	ldr	r3, [r0, #16]
 8004d32:	690c      	ldr	r4, [r1, #16]
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	4607      	mov	r7, r0
 8004d38:	f2c0 8081 	blt.w	8004e3e <quorem+0x112>
 8004d3c:	3c01      	subs	r4, #1
 8004d3e:	f101 0814 	add.w	r8, r1, #20
 8004d42:	f100 0514 	add.w	r5, r0, #20
 8004d46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d54:	3301      	adds	r3, #1
 8004d56:	429a      	cmp	r2, r3
 8004d58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d60:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d64:	d331      	bcc.n	8004dca <quorem+0x9e>
 8004d66:	f04f 0e00 	mov.w	lr, #0
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	46ac      	mov	ip, r5
 8004d6e:	46f2      	mov	sl, lr
 8004d70:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d74:	b293      	uxth	r3, r2
 8004d76:	fb06 e303 	mla	r3, r6, r3, lr
 8004d7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	ebaa 0303 	sub.w	r3, sl, r3
 8004d84:	f8dc a000 	ldr.w	sl, [ip]
 8004d88:	0c12      	lsrs	r2, r2, #16
 8004d8a:	fa13 f38a 	uxtah	r3, r3, sl
 8004d8e:	fb06 e202 	mla	r2, r6, r2, lr
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	9b00      	ldr	r3, [sp, #0]
 8004d96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d9a:	b292      	uxth	r2, r2
 8004d9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004da0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004da4:	f8bd 3000 	ldrh.w	r3, [sp]
 8004da8:	4581      	cmp	r9, r0
 8004daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dae:	f84c 3b04 	str.w	r3, [ip], #4
 8004db2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004db6:	d2db      	bcs.n	8004d70 <quorem+0x44>
 8004db8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004dbc:	b92b      	cbnz	r3, 8004dca <quorem+0x9e>
 8004dbe:	9b01      	ldr	r3, [sp, #4]
 8004dc0:	3b04      	subs	r3, #4
 8004dc2:	429d      	cmp	r5, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	d32e      	bcc.n	8004e26 <quorem+0xfa>
 8004dc8:	613c      	str	r4, [r7, #16]
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f001 f8c6 	bl	8005f5c <__mcmp>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	db24      	blt.n	8004e1e <quorem+0xf2>
 8004dd4:	3601      	adds	r6, #1
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f04f 0c00 	mov.w	ip, #0
 8004ddc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004de0:	f8d0 e000 	ldr.w	lr, [r0]
 8004de4:	b293      	uxth	r3, r2
 8004de6:	ebac 0303 	sub.w	r3, ip, r3
 8004dea:	0c12      	lsrs	r2, r2, #16
 8004dec:	fa13 f38e 	uxtah	r3, r3, lr
 8004df0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004df4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dfe:	45c1      	cmp	r9, r8
 8004e00:	f840 3b04 	str.w	r3, [r0], #4
 8004e04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e08:	d2e8      	bcs.n	8004ddc <quorem+0xb0>
 8004e0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e12:	b922      	cbnz	r2, 8004e1e <quorem+0xf2>
 8004e14:	3b04      	subs	r3, #4
 8004e16:	429d      	cmp	r5, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	d30a      	bcc.n	8004e32 <quorem+0x106>
 8004e1c:	613c      	str	r4, [r7, #16]
 8004e1e:	4630      	mov	r0, r6
 8004e20:	b003      	add	sp, #12
 8004e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	2a00      	cmp	r2, #0
 8004e2c:	d1cc      	bne.n	8004dc8 <quorem+0x9c>
 8004e2e:	3c01      	subs	r4, #1
 8004e30:	e7c7      	b.n	8004dc2 <quorem+0x96>
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	3b04      	subs	r3, #4
 8004e36:	2a00      	cmp	r2, #0
 8004e38:	d1f0      	bne.n	8004e1c <quorem+0xf0>
 8004e3a:	3c01      	subs	r4, #1
 8004e3c:	e7eb      	b.n	8004e16 <quorem+0xea>
 8004e3e:	2000      	movs	r0, #0
 8004e40:	e7ee      	b.n	8004e20 <quorem+0xf4>
 8004e42:	0000      	movs	r0, r0
 8004e44:	0000      	movs	r0, r0
	...

08004e48 <_dtoa_r>:
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	ed2d 8b04 	vpush	{d8-d9}
 8004e50:	ec57 6b10 	vmov	r6, r7, d0
 8004e54:	b093      	sub	sp, #76	; 0x4c
 8004e56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e5c:	9106      	str	r1, [sp, #24]
 8004e5e:	ee10 aa10 	vmov	sl, s0
 8004e62:	4604      	mov	r4, r0
 8004e64:	9209      	str	r2, [sp, #36]	; 0x24
 8004e66:	930c      	str	r3, [sp, #48]	; 0x30
 8004e68:	46bb      	mov	fp, r7
 8004e6a:	b975      	cbnz	r5, 8004e8a <_dtoa_r+0x42>
 8004e6c:	2010      	movs	r0, #16
 8004e6e:	f000 fddd 	bl	8005a2c <malloc>
 8004e72:	4602      	mov	r2, r0
 8004e74:	6260      	str	r0, [r4, #36]	; 0x24
 8004e76:	b920      	cbnz	r0, 8004e82 <_dtoa_r+0x3a>
 8004e78:	4ba7      	ldr	r3, [pc, #668]	; (8005118 <_dtoa_r+0x2d0>)
 8004e7a:	21ea      	movs	r1, #234	; 0xea
 8004e7c:	48a7      	ldr	r0, [pc, #668]	; (800511c <_dtoa_r+0x2d4>)
 8004e7e:	f001 fa75 	bl	800636c <__assert_func>
 8004e82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e86:	6005      	str	r5, [r0, #0]
 8004e88:	60c5      	str	r5, [r0, #12]
 8004e8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e8c:	6819      	ldr	r1, [r3, #0]
 8004e8e:	b151      	cbz	r1, 8004ea6 <_dtoa_r+0x5e>
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	604a      	str	r2, [r1, #4]
 8004e94:	2301      	movs	r3, #1
 8004e96:	4093      	lsls	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	f000 fe1c 	bl	8005ad8 <_Bfree>
 8004ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	1e3b      	subs	r3, r7, #0
 8004ea8:	bfaa      	itet	ge
 8004eaa:	2300      	movge	r3, #0
 8004eac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004eb0:	f8c8 3000 	strge.w	r3, [r8]
 8004eb4:	4b9a      	ldr	r3, [pc, #616]	; (8005120 <_dtoa_r+0x2d8>)
 8004eb6:	bfbc      	itt	lt
 8004eb8:	2201      	movlt	r2, #1
 8004eba:	f8c8 2000 	strlt.w	r2, [r8]
 8004ebe:	ea33 030b 	bics.w	r3, r3, fp
 8004ec2:	d11b      	bne.n	8004efc <_dtoa_r+0xb4>
 8004ec4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ec6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ed0:	4333      	orrs	r3, r6
 8004ed2:	f000 8592 	beq.w	80059fa <_dtoa_r+0xbb2>
 8004ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ed8:	b963      	cbnz	r3, 8004ef4 <_dtoa_r+0xac>
 8004eda:	4b92      	ldr	r3, [pc, #584]	; (8005124 <_dtoa_r+0x2dc>)
 8004edc:	e022      	b.n	8004f24 <_dtoa_r+0xdc>
 8004ede:	4b92      	ldr	r3, [pc, #584]	; (8005128 <_dtoa_r+0x2e0>)
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	9801      	ldr	r0, [sp, #4]
 8004eea:	b013      	add	sp, #76	; 0x4c
 8004eec:	ecbd 8b04 	vpop	{d8-d9}
 8004ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef4:	4b8b      	ldr	r3, [pc, #556]	; (8005124 <_dtoa_r+0x2dc>)
 8004ef6:	9301      	str	r3, [sp, #4]
 8004ef8:	3303      	adds	r3, #3
 8004efa:	e7f3      	b.n	8004ee4 <_dtoa_r+0x9c>
 8004efc:	2200      	movs	r2, #0
 8004efe:	2300      	movs	r3, #0
 8004f00:	4650      	mov	r0, sl
 8004f02:	4659      	mov	r1, fp
 8004f04:	f7fb fdf0 	bl	8000ae8 <__aeabi_dcmpeq>
 8004f08:	ec4b ab19 	vmov	d9, sl, fp
 8004f0c:	4680      	mov	r8, r0
 8004f0e:	b158      	cbz	r0, 8004f28 <_dtoa_r+0xe0>
 8004f10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f12:	2301      	movs	r3, #1
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 856b 	beq.w	80059f4 <_dtoa_r+0xbac>
 8004f1e:	4883      	ldr	r0, [pc, #524]	; (800512c <_dtoa_r+0x2e4>)
 8004f20:	6018      	str	r0, [r3, #0]
 8004f22:	1e43      	subs	r3, r0, #1
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	e7df      	b.n	8004ee8 <_dtoa_r+0xa0>
 8004f28:	ec4b ab10 	vmov	d0, sl, fp
 8004f2c:	aa10      	add	r2, sp, #64	; 0x40
 8004f2e:	a911      	add	r1, sp, #68	; 0x44
 8004f30:	4620      	mov	r0, r4
 8004f32:	f001 f8b9 	bl	80060a8 <__d2b>
 8004f36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004f3a:	ee08 0a10 	vmov	s16, r0
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	f000 8084 	beq.w	800504c <_dtoa_r+0x204>
 8004f44:	ee19 3a90 	vmov	r3, s19
 8004f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004f50:	4656      	mov	r6, sl
 8004f52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004f56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004f5e:	4b74      	ldr	r3, [pc, #464]	; (8005130 <_dtoa_r+0x2e8>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb f99f 	bl	80002a8 <__aeabi_dsub>
 8004f6a:	a365      	add	r3, pc, #404	; (adr r3, 8005100 <_dtoa_r+0x2b8>)
 8004f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f70:	f7fb fb52 	bl	8000618 <__aeabi_dmul>
 8004f74:	a364      	add	r3, pc, #400	; (adr r3, 8005108 <_dtoa_r+0x2c0>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	f7fb f997 	bl	80002ac <__adddf3>
 8004f7e:	4606      	mov	r6, r0
 8004f80:	4628      	mov	r0, r5
 8004f82:	460f      	mov	r7, r1
 8004f84:	f7fb fade 	bl	8000544 <__aeabi_i2d>
 8004f88:	a361      	add	r3, pc, #388	; (adr r3, 8005110 <_dtoa_r+0x2c8>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f7fb fb43 	bl	8000618 <__aeabi_dmul>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4630      	mov	r0, r6
 8004f98:	4639      	mov	r1, r7
 8004f9a:	f7fb f987 	bl	80002ac <__adddf3>
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	460f      	mov	r7, r1
 8004fa2:	f7fb fde9 	bl	8000b78 <__aeabi_d2iz>
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	9000      	str	r0, [sp, #0]
 8004faa:	2300      	movs	r3, #0
 8004fac:	4630      	mov	r0, r6
 8004fae:	4639      	mov	r1, r7
 8004fb0:	f7fb fda4 	bl	8000afc <__aeabi_dcmplt>
 8004fb4:	b150      	cbz	r0, 8004fcc <_dtoa_r+0x184>
 8004fb6:	9800      	ldr	r0, [sp, #0]
 8004fb8:	f7fb fac4 	bl	8000544 <__aeabi_i2d>
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	f7fb fd92 	bl	8000ae8 <__aeabi_dcmpeq>
 8004fc4:	b910      	cbnz	r0, 8004fcc <_dtoa_r+0x184>
 8004fc6:	9b00      	ldr	r3, [sp, #0]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	9b00      	ldr	r3, [sp, #0]
 8004fce:	2b16      	cmp	r3, #22
 8004fd0:	d85a      	bhi.n	8005088 <_dtoa_r+0x240>
 8004fd2:	9a00      	ldr	r2, [sp, #0]
 8004fd4:	4b57      	ldr	r3, [pc, #348]	; (8005134 <_dtoa_r+0x2ec>)
 8004fd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	ec51 0b19 	vmov	r0, r1, d9
 8004fe2:	f7fb fd8b 	bl	8000afc <__aeabi_dcmplt>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d050      	beq.n	800508c <_dtoa_r+0x244>
 8004fea:	9b00      	ldr	r3, [sp, #0]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ff6:	1b5d      	subs	r5, r3, r5
 8004ff8:	1e6b      	subs	r3, r5, #1
 8004ffa:	9305      	str	r3, [sp, #20]
 8004ffc:	bf45      	ittet	mi
 8004ffe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005002:	9304      	strmi	r3, [sp, #16]
 8005004:	2300      	movpl	r3, #0
 8005006:	2300      	movmi	r3, #0
 8005008:	bf4c      	ite	mi
 800500a:	9305      	strmi	r3, [sp, #20]
 800500c:	9304      	strpl	r3, [sp, #16]
 800500e:	9b00      	ldr	r3, [sp, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	db3d      	blt.n	8005090 <_dtoa_r+0x248>
 8005014:	9b05      	ldr	r3, [sp, #20]
 8005016:	9a00      	ldr	r2, [sp, #0]
 8005018:	920a      	str	r2, [sp, #40]	; 0x28
 800501a:	4413      	add	r3, r2
 800501c:	9305      	str	r3, [sp, #20]
 800501e:	2300      	movs	r3, #0
 8005020:	9307      	str	r3, [sp, #28]
 8005022:	9b06      	ldr	r3, [sp, #24]
 8005024:	2b09      	cmp	r3, #9
 8005026:	f200 8089 	bhi.w	800513c <_dtoa_r+0x2f4>
 800502a:	2b05      	cmp	r3, #5
 800502c:	bfc4      	itt	gt
 800502e:	3b04      	subgt	r3, #4
 8005030:	9306      	strgt	r3, [sp, #24]
 8005032:	9b06      	ldr	r3, [sp, #24]
 8005034:	f1a3 0302 	sub.w	r3, r3, #2
 8005038:	bfcc      	ite	gt
 800503a:	2500      	movgt	r5, #0
 800503c:	2501      	movle	r5, #1
 800503e:	2b03      	cmp	r3, #3
 8005040:	f200 8087 	bhi.w	8005152 <_dtoa_r+0x30a>
 8005044:	e8df f003 	tbb	[pc, r3]
 8005048:	59383a2d 	.word	0x59383a2d
 800504c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005050:	441d      	add	r5, r3
 8005052:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005056:	2b20      	cmp	r3, #32
 8005058:	bfc1      	itttt	gt
 800505a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800505e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005062:	fa0b f303 	lslgt.w	r3, fp, r3
 8005066:	fa26 f000 	lsrgt.w	r0, r6, r0
 800506a:	bfda      	itte	le
 800506c:	f1c3 0320 	rsble	r3, r3, #32
 8005070:	fa06 f003 	lslle.w	r0, r6, r3
 8005074:	4318      	orrgt	r0, r3
 8005076:	f7fb fa55 	bl	8000524 <__aeabi_ui2d>
 800507a:	2301      	movs	r3, #1
 800507c:	4606      	mov	r6, r0
 800507e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005082:	3d01      	subs	r5, #1
 8005084:	930e      	str	r3, [sp, #56]	; 0x38
 8005086:	e76a      	b.n	8004f5e <_dtoa_r+0x116>
 8005088:	2301      	movs	r3, #1
 800508a:	e7b2      	b.n	8004ff2 <_dtoa_r+0x1aa>
 800508c:	900b      	str	r0, [sp, #44]	; 0x2c
 800508e:	e7b1      	b.n	8004ff4 <_dtoa_r+0x1ac>
 8005090:	9b04      	ldr	r3, [sp, #16]
 8005092:	9a00      	ldr	r2, [sp, #0]
 8005094:	1a9b      	subs	r3, r3, r2
 8005096:	9304      	str	r3, [sp, #16]
 8005098:	4253      	negs	r3, r2
 800509a:	9307      	str	r3, [sp, #28]
 800509c:	2300      	movs	r3, #0
 800509e:	930a      	str	r3, [sp, #40]	; 0x28
 80050a0:	e7bf      	b.n	8005022 <_dtoa_r+0x1da>
 80050a2:	2300      	movs	r3, #0
 80050a4:	9308      	str	r3, [sp, #32]
 80050a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dc55      	bgt.n	8005158 <_dtoa_r+0x310>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80050b2:	461a      	mov	r2, r3
 80050b4:	9209      	str	r2, [sp, #36]	; 0x24
 80050b6:	e00c      	b.n	80050d2 <_dtoa_r+0x28a>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e7f3      	b.n	80050a4 <_dtoa_r+0x25c>
 80050bc:	2300      	movs	r3, #0
 80050be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050c0:	9308      	str	r3, [sp, #32]
 80050c2:	9b00      	ldr	r3, [sp, #0]
 80050c4:	4413      	add	r3, r2
 80050c6:	9302      	str	r3, [sp, #8]
 80050c8:	3301      	adds	r3, #1
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	9303      	str	r3, [sp, #12]
 80050ce:	bfb8      	it	lt
 80050d0:	2301      	movlt	r3, #1
 80050d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80050d4:	2200      	movs	r2, #0
 80050d6:	6042      	str	r2, [r0, #4]
 80050d8:	2204      	movs	r2, #4
 80050da:	f102 0614 	add.w	r6, r2, #20
 80050de:	429e      	cmp	r6, r3
 80050e0:	6841      	ldr	r1, [r0, #4]
 80050e2:	d93d      	bls.n	8005160 <_dtoa_r+0x318>
 80050e4:	4620      	mov	r0, r4
 80050e6:	f000 fcb7 	bl	8005a58 <_Balloc>
 80050ea:	9001      	str	r0, [sp, #4]
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d13b      	bne.n	8005168 <_dtoa_r+0x320>
 80050f0:	4b11      	ldr	r3, [pc, #68]	; (8005138 <_dtoa_r+0x2f0>)
 80050f2:	4602      	mov	r2, r0
 80050f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050f8:	e6c0      	b.n	8004e7c <_dtoa_r+0x34>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e7df      	b.n	80050be <_dtoa_r+0x276>
 80050fe:	bf00      	nop
 8005100:	636f4361 	.word	0x636f4361
 8005104:	3fd287a7 	.word	0x3fd287a7
 8005108:	8b60c8b3 	.word	0x8b60c8b3
 800510c:	3fc68a28 	.word	0x3fc68a28
 8005110:	509f79fb 	.word	0x509f79fb
 8005114:	3fd34413 	.word	0x3fd34413
 8005118:	08007701 	.word	0x08007701
 800511c:	08007718 	.word	0x08007718
 8005120:	7ff00000 	.word	0x7ff00000
 8005124:	080076fd 	.word	0x080076fd
 8005128:	080076f4 	.word	0x080076f4
 800512c:	080076d1 	.word	0x080076d1
 8005130:	3ff80000 	.word	0x3ff80000
 8005134:	08007808 	.word	0x08007808
 8005138:	08007773 	.word	0x08007773
 800513c:	2501      	movs	r5, #1
 800513e:	2300      	movs	r3, #0
 8005140:	9306      	str	r3, [sp, #24]
 8005142:	9508      	str	r5, [sp, #32]
 8005144:	f04f 33ff 	mov.w	r3, #4294967295
 8005148:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	2312      	movs	r3, #18
 8005150:	e7b0      	b.n	80050b4 <_dtoa_r+0x26c>
 8005152:	2301      	movs	r3, #1
 8005154:	9308      	str	r3, [sp, #32]
 8005156:	e7f5      	b.n	8005144 <_dtoa_r+0x2fc>
 8005158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800515e:	e7b8      	b.n	80050d2 <_dtoa_r+0x28a>
 8005160:	3101      	adds	r1, #1
 8005162:	6041      	str	r1, [r0, #4]
 8005164:	0052      	lsls	r2, r2, #1
 8005166:	e7b8      	b.n	80050da <_dtoa_r+0x292>
 8005168:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800516a:	9a01      	ldr	r2, [sp, #4]
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	2b0e      	cmp	r3, #14
 8005172:	f200 809d 	bhi.w	80052b0 <_dtoa_r+0x468>
 8005176:	2d00      	cmp	r5, #0
 8005178:	f000 809a 	beq.w	80052b0 <_dtoa_r+0x468>
 800517c:	9b00      	ldr	r3, [sp, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	dd32      	ble.n	80051e8 <_dtoa_r+0x3a0>
 8005182:	4ab7      	ldr	r2, [pc, #732]	; (8005460 <_dtoa_r+0x618>)
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800518c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005190:	9b00      	ldr	r3, [sp, #0]
 8005192:	05d8      	lsls	r0, r3, #23
 8005194:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005198:	d516      	bpl.n	80051c8 <_dtoa_r+0x380>
 800519a:	4bb2      	ldr	r3, [pc, #712]	; (8005464 <_dtoa_r+0x61c>)
 800519c:	ec51 0b19 	vmov	r0, r1, d9
 80051a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051a4:	f7fb fb62 	bl	800086c <__aeabi_ddiv>
 80051a8:	f007 070f 	and.w	r7, r7, #15
 80051ac:	4682      	mov	sl, r0
 80051ae:	468b      	mov	fp, r1
 80051b0:	2503      	movs	r5, #3
 80051b2:	4eac      	ldr	r6, [pc, #688]	; (8005464 <_dtoa_r+0x61c>)
 80051b4:	b957      	cbnz	r7, 80051cc <_dtoa_r+0x384>
 80051b6:	4642      	mov	r2, r8
 80051b8:	464b      	mov	r3, r9
 80051ba:	4650      	mov	r0, sl
 80051bc:	4659      	mov	r1, fp
 80051be:	f7fb fb55 	bl	800086c <__aeabi_ddiv>
 80051c2:	4682      	mov	sl, r0
 80051c4:	468b      	mov	fp, r1
 80051c6:	e028      	b.n	800521a <_dtoa_r+0x3d2>
 80051c8:	2502      	movs	r5, #2
 80051ca:	e7f2      	b.n	80051b2 <_dtoa_r+0x36a>
 80051cc:	07f9      	lsls	r1, r7, #31
 80051ce:	d508      	bpl.n	80051e2 <_dtoa_r+0x39a>
 80051d0:	4640      	mov	r0, r8
 80051d2:	4649      	mov	r1, r9
 80051d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051d8:	f7fb fa1e 	bl	8000618 <__aeabi_dmul>
 80051dc:	3501      	adds	r5, #1
 80051de:	4680      	mov	r8, r0
 80051e0:	4689      	mov	r9, r1
 80051e2:	107f      	asrs	r7, r7, #1
 80051e4:	3608      	adds	r6, #8
 80051e6:	e7e5      	b.n	80051b4 <_dtoa_r+0x36c>
 80051e8:	f000 809b 	beq.w	8005322 <_dtoa_r+0x4da>
 80051ec:	9b00      	ldr	r3, [sp, #0]
 80051ee:	4f9d      	ldr	r7, [pc, #628]	; (8005464 <_dtoa_r+0x61c>)
 80051f0:	425e      	negs	r6, r3
 80051f2:	4b9b      	ldr	r3, [pc, #620]	; (8005460 <_dtoa_r+0x618>)
 80051f4:	f006 020f 	and.w	r2, r6, #15
 80051f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	ec51 0b19 	vmov	r0, r1, d9
 8005204:	f7fb fa08 	bl	8000618 <__aeabi_dmul>
 8005208:	1136      	asrs	r6, r6, #4
 800520a:	4682      	mov	sl, r0
 800520c:	468b      	mov	fp, r1
 800520e:	2300      	movs	r3, #0
 8005210:	2502      	movs	r5, #2
 8005212:	2e00      	cmp	r6, #0
 8005214:	d17a      	bne.n	800530c <_dtoa_r+0x4c4>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1d3      	bne.n	80051c2 <_dtoa_r+0x37a>
 800521a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8082 	beq.w	8005326 <_dtoa_r+0x4de>
 8005222:	4b91      	ldr	r3, [pc, #580]	; (8005468 <_dtoa_r+0x620>)
 8005224:	2200      	movs	r2, #0
 8005226:	4650      	mov	r0, sl
 8005228:	4659      	mov	r1, fp
 800522a:	f7fb fc67 	bl	8000afc <__aeabi_dcmplt>
 800522e:	2800      	cmp	r0, #0
 8005230:	d079      	beq.n	8005326 <_dtoa_r+0x4de>
 8005232:	9b03      	ldr	r3, [sp, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d076      	beq.n	8005326 <_dtoa_r+0x4de>
 8005238:	9b02      	ldr	r3, [sp, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	dd36      	ble.n	80052ac <_dtoa_r+0x464>
 800523e:	9b00      	ldr	r3, [sp, #0]
 8005240:	4650      	mov	r0, sl
 8005242:	4659      	mov	r1, fp
 8005244:	1e5f      	subs	r7, r3, #1
 8005246:	2200      	movs	r2, #0
 8005248:	4b88      	ldr	r3, [pc, #544]	; (800546c <_dtoa_r+0x624>)
 800524a:	f7fb f9e5 	bl	8000618 <__aeabi_dmul>
 800524e:	9e02      	ldr	r6, [sp, #8]
 8005250:	4682      	mov	sl, r0
 8005252:	468b      	mov	fp, r1
 8005254:	3501      	adds	r5, #1
 8005256:	4628      	mov	r0, r5
 8005258:	f7fb f974 	bl	8000544 <__aeabi_i2d>
 800525c:	4652      	mov	r2, sl
 800525e:	465b      	mov	r3, fp
 8005260:	f7fb f9da 	bl	8000618 <__aeabi_dmul>
 8005264:	4b82      	ldr	r3, [pc, #520]	; (8005470 <_dtoa_r+0x628>)
 8005266:	2200      	movs	r2, #0
 8005268:	f7fb f820 	bl	80002ac <__adddf3>
 800526c:	46d0      	mov	r8, sl
 800526e:	46d9      	mov	r9, fp
 8005270:	4682      	mov	sl, r0
 8005272:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005276:	2e00      	cmp	r6, #0
 8005278:	d158      	bne.n	800532c <_dtoa_r+0x4e4>
 800527a:	4b7e      	ldr	r3, [pc, #504]	; (8005474 <_dtoa_r+0x62c>)
 800527c:	2200      	movs	r2, #0
 800527e:	4640      	mov	r0, r8
 8005280:	4649      	mov	r1, r9
 8005282:	f7fb f811 	bl	80002a8 <__aeabi_dsub>
 8005286:	4652      	mov	r2, sl
 8005288:	465b      	mov	r3, fp
 800528a:	4680      	mov	r8, r0
 800528c:	4689      	mov	r9, r1
 800528e:	f7fb fc53 	bl	8000b38 <__aeabi_dcmpgt>
 8005292:	2800      	cmp	r0, #0
 8005294:	f040 8295 	bne.w	80057c2 <_dtoa_r+0x97a>
 8005298:	4652      	mov	r2, sl
 800529a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800529e:	4640      	mov	r0, r8
 80052a0:	4649      	mov	r1, r9
 80052a2:	f7fb fc2b 	bl	8000afc <__aeabi_dcmplt>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f040 8289 	bne.w	80057be <_dtoa_r+0x976>
 80052ac:	ec5b ab19 	vmov	sl, fp, d9
 80052b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f2c0 8148 	blt.w	8005548 <_dtoa_r+0x700>
 80052b8:	9a00      	ldr	r2, [sp, #0]
 80052ba:	2a0e      	cmp	r2, #14
 80052bc:	f300 8144 	bgt.w	8005548 <_dtoa_r+0x700>
 80052c0:	4b67      	ldr	r3, [pc, #412]	; (8005460 <_dtoa_r+0x618>)
 80052c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f280 80d5 	bge.w	800547c <_dtoa_r+0x634>
 80052d2:	9b03      	ldr	r3, [sp, #12]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f300 80d1 	bgt.w	800547c <_dtoa_r+0x634>
 80052da:	f040 826f 	bne.w	80057bc <_dtoa_r+0x974>
 80052de:	4b65      	ldr	r3, [pc, #404]	; (8005474 <_dtoa_r+0x62c>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	4640      	mov	r0, r8
 80052e4:	4649      	mov	r1, r9
 80052e6:	f7fb f997 	bl	8000618 <__aeabi_dmul>
 80052ea:	4652      	mov	r2, sl
 80052ec:	465b      	mov	r3, fp
 80052ee:	f7fb fc19 	bl	8000b24 <__aeabi_dcmpge>
 80052f2:	9e03      	ldr	r6, [sp, #12]
 80052f4:	4637      	mov	r7, r6
 80052f6:	2800      	cmp	r0, #0
 80052f8:	f040 8245 	bne.w	8005786 <_dtoa_r+0x93e>
 80052fc:	9d01      	ldr	r5, [sp, #4]
 80052fe:	2331      	movs	r3, #49	; 0x31
 8005300:	f805 3b01 	strb.w	r3, [r5], #1
 8005304:	9b00      	ldr	r3, [sp, #0]
 8005306:	3301      	adds	r3, #1
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	e240      	b.n	800578e <_dtoa_r+0x946>
 800530c:	07f2      	lsls	r2, r6, #31
 800530e:	d505      	bpl.n	800531c <_dtoa_r+0x4d4>
 8005310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005314:	f7fb f980 	bl	8000618 <__aeabi_dmul>
 8005318:	3501      	adds	r5, #1
 800531a:	2301      	movs	r3, #1
 800531c:	1076      	asrs	r6, r6, #1
 800531e:	3708      	adds	r7, #8
 8005320:	e777      	b.n	8005212 <_dtoa_r+0x3ca>
 8005322:	2502      	movs	r5, #2
 8005324:	e779      	b.n	800521a <_dtoa_r+0x3d2>
 8005326:	9f00      	ldr	r7, [sp, #0]
 8005328:	9e03      	ldr	r6, [sp, #12]
 800532a:	e794      	b.n	8005256 <_dtoa_r+0x40e>
 800532c:	9901      	ldr	r1, [sp, #4]
 800532e:	4b4c      	ldr	r3, [pc, #304]	; (8005460 <_dtoa_r+0x618>)
 8005330:	4431      	add	r1, r6
 8005332:	910d      	str	r1, [sp, #52]	; 0x34
 8005334:	9908      	ldr	r1, [sp, #32]
 8005336:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800533a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800533e:	2900      	cmp	r1, #0
 8005340:	d043      	beq.n	80053ca <_dtoa_r+0x582>
 8005342:	494d      	ldr	r1, [pc, #308]	; (8005478 <_dtoa_r+0x630>)
 8005344:	2000      	movs	r0, #0
 8005346:	f7fb fa91 	bl	800086c <__aeabi_ddiv>
 800534a:	4652      	mov	r2, sl
 800534c:	465b      	mov	r3, fp
 800534e:	f7fa ffab 	bl	80002a8 <__aeabi_dsub>
 8005352:	9d01      	ldr	r5, [sp, #4]
 8005354:	4682      	mov	sl, r0
 8005356:	468b      	mov	fp, r1
 8005358:	4649      	mov	r1, r9
 800535a:	4640      	mov	r0, r8
 800535c:	f7fb fc0c 	bl	8000b78 <__aeabi_d2iz>
 8005360:	4606      	mov	r6, r0
 8005362:	f7fb f8ef 	bl	8000544 <__aeabi_i2d>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f7fa ff9b 	bl	80002a8 <__aeabi_dsub>
 8005372:	3630      	adds	r6, #48	; 0x30
 8005374:	f805 6b01 	strb.w	r6, [r5], #1
 8005378:	4652      	mov	r2, sl
 800537a:	465b      	mov	r3, fp
 800537c:	4680      	mov	r8, r0
 800537e:	4689      	mov	r9, r1
 8005380:	f7fb fbbc 	bl	8000afc <__aeabi_dcmplt>
 8005384:	2800      	cmp	r0, #0
 8005386:	d163      	bne.n	8005450 <_dtoa_r+0x608>
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	4936      	ldr	r1, [pc, #216]	; (8005468 <_dtoa_r+0x620>)
 800538e:	2000      	movs	r0, #0
 8005390:	f7fa ff8a 	bl	80002a8 <__aeabi_dsub>
 8005394:	4652      	mov	r2, sl
 8005396:	465b      	mov	r3, fp
 8005398:	f7fb fbb0 	bl	8000afc <__aeabi_dcmplt>
 800539c:	2800      	cmp	r0, #0
 800539e:	f040 80b5 	bne.w	800550c <_dtoa_r+0x6c4>
 80053a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053a4:	429d      	cmp	r5, r3
 80053a6:	d081      	beq.n	80052ac <_dtoa_r+0x464>
 80053a8:	4b30      	ldr	r3, [pc, #192]	; (800546c <_dtoa_r+0x624>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	4650      	mov	r0, sl
 80053ae:	4659      	mov	r1, fp
 80053b0:	f7fb f932 	bl	8000618 <__aeabi_dmul>
 80053b4:	4b2d      	ldr	r3, [pc, #180]	; (800546c <_dtoa_r+0x624>)
 80053b6:	4682      	mov	sl, r0
 80053b8:	468b      	mov	fp, r1
 80053ba:	4640      	mov	r0, r8
 80053bc:	4649      	mov	r1, r9
 80053be:	2200      	movs	r2, #0
 80053c0:	f7fb f92a 	bl	8000618 <__aeabi_dmul>
 80053c4:	4680      	mov	r8, r0
 80053c6:	4689      	mov	r9, r1
 80053c8:	e7c6      	b.n	8005358 <_dtoa_r+0x510>
 80053ca:	4650      	mov	r0, sl
 80053cc:	4659      	mov	r1, fp
 80053ce:	f7fb f923 	bl	8000618 <__aeabi_dmul>
 80053d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053d4:	9d01      	ldr	r5, [sp, #4]
 80053d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80053d8:	4682      	mov	sl, r0
 80053da:	468b      	mov	fp, r1
 80053dc:	4649      	mov	r1, r9
 80053de:	4640      	mov	r0, r8
 80053e0:	f7fb fbca 	bl	8000b78 <__aeabi_d2iz>
 80053e4:	4606      	mov	r6, r0
 80053e6:	f7fb f8ad 	bl	8000544 <__aeabi_i2d>
 80053ea:	3630      	adds	r6, #48	; 0x30
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4640      	mov	r0, r8
 80053f2:	4649      	mov	r1, r9
 80053f4:	f7fa ff58 	bl	80002a8 <__aeabi_dsub>
 80053f8:	f805 6b01 	strb.w	r6, [r5], #1
 80053fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053fe:	429d      	cmp	r5, r3
 8005400:	4680      	mov	r8, r0
 8005402:	4689      	mov	r9, r1
 8005404:	f04f 0200 	mov.w	r2, #0
 8005408:	d124      	bne.n	8005454 <_dtoa_r+0x60c>
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <_dtoa_r+0x630>)
 800540c:	4650      	mov	r0, sl
 800540e:	4659      	mov	r1, fp
 8005410:	f7fa ff4c 	bl	80002ac <__adddf3>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	f7fb fb8c 	bl	8000b38 <__aeabi_dcmpgt>
 8005420:	2800      	cmp	r0, #0
 8005422:	d173      	bne.n	800550c <_dtoa_r+0x6c4>
 8005424:	4652      	mov	r2, sl
 8005426:	465b      	mov	r3, fp
 8005428:	4913      	ldr	r1, [pc, #76]	; (8005478 <_dtoa_r+0x630>)
 800542a:	2000      	movs	r0, #0
 800542c:	f7fa ff3c 	bl	80002a8 <__aeabi_dsub>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4640      	mov	r0, r8
 8005436:	4649      	mov	r1, r9
 8005438:	f7fb fb60 	bl	8000afc <__aeabi_dcmplt>
 800543c:	2800      	cmp	r0, #0
 800543e:	f43f af35 	beq.w	80052ac <_dtoa_r+0x464>
 8005442:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005444:	1e6b      	subs	r3, r5, #1
 8005446:	930f      	str	r3, [sp, #60]	; 0x3c
 8005448:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	d0f8      	beq.n	8005442 <_dtoa_r+0x5fa>
 8005450:	9700      	str	r7, [sp, #0]
 8005452:	e049      	b.n	80054e8 <_dtoa_r+0x6a0>
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <_dtoa_r+0x624>)
 8005456:	f7fb f8df 	bl	8000618 <__aeabi_dmul>
 800545a:	4680      	mov	r8, r0
 800545c:	4689      	mov	r9, r1
 800545e:	e7bd      	b.n	80053dc <_dtoa_r+0x594>
 8005460:	08007808 	.word	0x08007808
 8005464:	080077e0 	.word	0x080077e0
 8005468:	3ff00000 	.word	0x3ff00000
 800546c:	40240000 	.word	0x40240000
 8005470:	401c0000 	.word	0x401c0000
 8005474:	40140000 	.word	0x40140000
 8005478:	3fe00000 	.word	0x3fe00000
 800547c:	9d01      	ldr	r5, [sp, #4]
 800547e:	4656      	mov	r6, sl
 8005480:	465f      	mov	r7, fp
 8005482:	4642      	mov	r2, r8
 8005484:	464b      	mov	r3, r9
 8005486:	4630      	mov	r0, r6
 8005488:	4639      	mov	r1, r7
 800548a:	f7fb f9ef 	bl	800086c <__aeabi_ddiv>
 800548e:	f7fb fb73 	bl	8000b78 <__aeabi_d2iz>
 8005492:	4682      	mov	sl, r0
 8005494:	f7fb f856 	bl	8000544 <__aeabi_i2d>
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	f7fb f8bc 	bl	8000618 <__aeabi_dmul>
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4630      	mov	r0, r6
 80054a6:	4639      	mov	r1, r7
 80054a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80054ac:	f7fa fefc 	bl	80002a8 <__aeabi_dsub>
 80054b0:	f805 6b01 	strb.w	r6, [r5], #1
 80054b4:	9e01      	ldr	r6, [sp, #4]
 80054b6:	9f03      	ldr	r7, [sp, #12]
 80054b8:	1bae      	subs	r6, r5, r6
 80054ba:	42b7      	cmp	r7, r6
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	d135      	bne.n	800552e <_dtoa_r+0x6e6>
 80054c2:	f7fa fef3 	bl	80002ac <__adddf3>
 80054c6:	4642      	mov	r2, r8
 80054c8:	464b      	mov	r3, r9
 80054ca:	4606      	mov	r6, r0
 80054cc:	460f      	mov	r7, r1
 80054ce:	f7fb fb33 	bl	8000b38 <__aeabi_dcmpgt>
 80054d2:	b9d0      	cbnz	r0, 800550a <_dtoa_r+0x6c2>
 80054d4:	4642      	mov	r2, r8
 80054d6:	464b      	mov	r3, r9
 80054d8:	4630      	mov	r0, r6
 80054da:	4639      	mov	r1, r7
 80054dc:	f7fb fb04 	bl	8000ae8 <__aeabi_dcmpeq>
 80054e0:	b110      	cbz	r0, 80054e8 <_dtoa_r+0x6a0>
 80054e2:	f01a 0f01 	tst.w	sl, #1
 80054e6:	d110      	bne.n	800550a <_dtoa_r+0x6c2>
 80054e8:	4620      	mov	r0, r4
 80054ea:	ee18 1a10 	vmov	r1, s16
 80054ee:	f000 faf3 	bl	8005ad8 <_Bfree>
 80054f2:	2300      	movs	r3, #0
 80054f4:	9800      	ldr	r0, [sp, #0]
 80054f6:	702b      	strb	r3, [r5, #0]
 80054f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054fa:	3001      	adds	r0, #1
 80054fc:	6018      	str	r0, [r3, #0]
 80054fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005500:	2b00      	cmp	r3, #0
 8005502:	f43f acf1 	beq.w	8004ee8 <_dtoa_r+0xa0>
 8005506:	601d      	str	r5, [r3, #0]
 8005508:	e4ee      	b.n	8004ee8 <_dtoa_r+0xa0>
 800550a:	9f00      	ldr	r7, [sp, #0]
 800550c:	462b      	mov	r3, r5
 800550e:	461d      	mov	r5, r3
 8005510:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005514:	2a39      	cmp	r2, #57	; 0x39
 8005516:	d106      	bne.n	8005526 <_dtoa_r+0x6de>
 8005518:	9a01      	ldr	r2, [sp, #4]
 800551a:	429a      	cmp	r2, r3
 800551c:	d1f7      	bne.n	800550e <_dtoa_r+0x6c6>
 800551e:	9901      	ldr	r1, [sp, #4]
 8005520:	2230      	movs	r2, #48	; 0x30
 8005522:	3701      	adds	r7, #1
 8005524:	700a      	strb	r2, [r1, #0]
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	3201      	adds	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e790      	b.n	8005450 <_dtoa_r+0x608>
 800552e:	4ba6      	ldr	r3, [pc, #664]	; (80057c8 <_dtoa_r+0x980>)
 8005530:	2200      	movs	r2, #0
 8005532:	f7fb f871 	bl	8000618 <__aeabi_dmul>
 8005536:	2200      	movs	r2, #0
 8005538:	2300      	movs	r3, #0
 800553a:	4606      	mov	r6, r0
 800553c:	460f      	mov	r7, r1
 800553e:	f7fb fad3 	bl	8000ae8 <__aeabi_dcmpeq>
 8005542:	2800      	cmp	r0, #0
 8005544:	d09d      	beq.n	8005482 <_dtoa_r+0x63a>
 8005546:	e7cf      	b.n	80054e8 <_dtoa_r+0x6a0>
 8005548:	9a08      	ldr	r2, [sp, #32]
 800554a:	2a00      	cmp	r2, #0
 800554c:	f000 80d7 	beq.w	80056fe <_dtoa_r+0x8b6>
 8005550:	9a06      	ldr	r2, [sp, #24]
 8005552:	2a01      	cmp	r2, #1
 8005554:	f300 80ba 	bgt.w	80056cc <_dtoa_r+0x884>
 8005558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800555a:	2a00      	cmp	r2, #0
 800555c:	f000 80b2 	beq.w	80056c4 <_dtoa_r+0x87c>
 8005560:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005564:	9e07      	ldr	r6, [sp, #28]
 8005566:	9d04      	ldr	r5, [sp, #16]
 8005568:	9a04      	ldr	r2, [sp, #16]
 800556a:	441a      	add	r2, r3
 800556c:	9204      	str	r2, [sp, #16]
 800556e:	9a05      	ldr	r2, [sp, #20]
 8005570:	2101      	movs	r1, #1
 8005572:	441a      	add	r2, r3
 8005574:	4620      	mov	r0, r4
 8005576:	9205      	str	r2, [sp, #20]
 8005578:	f000 fb66 	bl	8005c48 <__i2b>
 800557c:	4607      	mov	r7, r0
 800557e:	2d00      	cmp	r5, #0
 8005580:	dd0c      	ble.n	800559c <_dtoa_r+0x754>
 8005582:	9b05      	ldr	r3, [sp, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	dd09      	ble.n	800559c <_dtoa_r+0x754>
 8005588:	42ab      	cmp	r3, r5
 800558a:	9a04      	ldr	r2, [sp, #16]
 800558c:	bfa8      	it	ge
 800558e:	462b      	movge	r3, r5
 8005590:	1ad2      	subs	r2, r2, r3
 8005592:	9204      	str	r2, [sp, #16]
 8005594:	9a05      	ldr	r2, [sp, #20]
 8005596:	1aed      	subs	r5, r5, r3
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	9305      	str	r3, [sp, #20]
 800559c:	9b07      	ldr	r3, [sp, #28]
 800559e:	b31b      	cbz	r3, 80055e8 <_dtoa_r+0x7a0>
 80055a0:	9b08      	ldr	r3, [sp, #32]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 80af 	beq.w	8005706 <_dtoa_r+0x8be>
 80055a8:	2e00      	cmp	r6, #0
 80055aa:	dd13      	ble.n	80055d4 <_dtoa_r+0x78c>
 80055ac:	4639      	mov	r1, r7
 80055ae:	4632      	mov	r2, r6
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fc09 	bl	8005dc8 <__pow5mult>
 80055b6:	ee18 2a10 	vmov	r2, s16
 80055ba:	4601      	mov	r1, r0
 80055bc:	4607      	mov	r7, r0
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 fb58 	bl	8005c74 <__multiply>
 80055c4:	ee18 1a10 	vmov	r1, s16
 80055c8:	4680      	mov	r8, r0
 80055ca:	4620      	mov	r0, r4
 80055cc:	f000 fa84 	bl	8005ad8 <_Bfree>
 80055d0:	ee08 8a10 	vmov	s16, r8
 80055d4:	9b07      	ldr	r3, [sp, #28]
 80055d6:	1b9a      	subs	r2, r3, r6
 80055d8:	d006      	beq.n	80055e8 <_dtoa_r+0x7a0>
 80055da:	ee18 1a10 	vmov	r1, s16
 80055de:	4620      	mov	r0, r4
 80055e0:	f000 fbf2 	bl	8005dc8 <__pow5mult>
 80055e4:	ee08 0a10 	vmov	s16, r0
 80055e8:	2101      	movs	r1, #1
 80055ea:	4620      	mov	r0, r4
 80055ec:	f000 fb2c 	bl	8005c48 <__i2b>
 80055f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	4606      	mov	r6, r0
 80055f6:	f340 8088 	ble.w	800570a <_dtoa_r+0x8c2>
 80055fa:	461a      	mov	r2, r3
 80055fc:	4601      	mov	r1, r0
 80055fe:	4620      	mov	r0, r4
 8005600:	f000 fbe2 	bl	8005dc8 <__pow5mult>
 8005604:	9b06      	ldr	r3, [sp, #24]
 8005606:	2b01      	cmp	r3, #1
 8005608:	4606      	mov	r6, r0
 800560a:	f340 8081 	ble.w	8005710 <_dtoa_r+0x8c8>
 800560e:	f04f 0800 	mov.w	r8, #0
 8005612:	6933      	ldr	r3, [r6, #16]
 8005614:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005618:	6918      	ldr	r0, [r3, #16]
 800561a:	f000 fac5 	bl	8005ba8 <__hi0bits>
 800561e:	f1c0 0020 	rsb	r0, r0, #32
 8005622:	9b05      	ldr	r3, [sp, #20]
 8005624:	4418      	add	r0, r3
 8005626:	f010 001f 	ands.w	r0, r0, #31
 800562a:	f000 8092 	beq.w	8005752 <_dtoa_r+0x90a>
 800562e:	f1c0 0320 	rsb	r3, r0, #32
 8005632:	2b04      	cmp	r3, #4
 8005634:	f340 808a 	ble.w	800574c <_dtoa_r+0x904>
 8005638:	f1c0 001c 	rsb	r0, r0, #28
 800563c:	9b04      	ldr	r3, [sp, #16]
 800563e:	4403      	add	r3, r0
 8005640:	9304      	str	r3, [sp, #16]
 8005642:	9b05      	ldr	r3, [sp, #20]
 8005644:	4403      	add	r3, r0
 8005646:	4405      	add	r5, r0
 8005648:	9305      	str	r3, [sp, #20]
 800564a:	9b04      	ldr	r3, [sp, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dd07      	ble.n	8005660 <_dtoa_r+0x818>
 8005650:	ee18 1a10 	vmov	r1, s16
 8005654:	461a      	mov	r2, r3
 8005656:	4620      	mov	r0, r4
 8005658:	f000 fc10 	bl	8005e7c <__lshift>
 800565c:	ee08 0a10 	vmov	s16, r0
 8005660:	9b05      	ldr	r3, [sp, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	dd05      	ble.n	8005672 <_dtoa_r+0x82a>
 8005666:	4631      	mov	r1, r6
 8005668:	461a      	mov	r2, r3
 800566a:	4620      	mov	r0, r4
 800566c:	f000 fc06 	bl	8005e7c <__lshift>
 8005670:	4606      	mov	r6, r0
 8005672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d06e      	beq.n	8005756 <_dtoa_r+0x90e>
 8005678:	ee18 0a10 	vmov	r0, s16
 800567c:	4631      	mov	r1, r6
 800567e:	f000 fc6d 	bl	8005f5c <__mcmp>
 8005682:	2800      	cmp	r0, #0
 8005684:	da67      	bge.n	8005756 <_dtoa_r+0x90e>
 8005686:	9b00      	ldr	r3, [sp, #0]
 8005688:	3b01      	subs	r3, #1
 800568a:	ee18 1a10 	vmov	r1, s16
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	220a      	movs	r2, #10
 8005692:	2300      	movs	r3, #0
 8005694:	4620      	mov	r0, r4
 8005696:	f000 fa41 	bl	8005b1c <__multadd>
 800569a:	9b08      	ldr	r3, [sp, #32]
 800569c:	ee08 0a10 	vmov	s16, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 81b1 	beq.w	8005a08 <_dtoa_r+0xbc0>
 80056a6:	2300      	movs	r3, #0
 80056a8:	4639      	mov	r1, r7
 80056aa:	220a      	movs	r2, #10
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 fa35 	bl	8005b1c <__multadd>
 80056b2:	9b02      	ldr	r3, [sp, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	4607      	mov	r7, r0
 80056b8:	f300 808e 	bgt.w	80057d8 <_dtoa_r+0x990>
 80056bc:	9b06      	ldr	r3, [sp, #24]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	dc51      	bgt.n	8005766 <_dtoa_r+0x91e>
 80056c2:	e089      	b.n	80057d8 <_dtoa_r+0x990>
 80056c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056ca:	e74b      	b.n	8005564 <_dtoa_r+0x71c>
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	1e5e      	subs	r6, r3, #1
 80056d0:	9b07      	ldr	r3, [sp, #28]
 80056d2:	42b3      	cmp	r3, r6
 80056d4:	bfbf      	itttt	lt
 80056d6:	9b07      	ldrlt	r3, [sp, #28]
 80056d8:	9607      	strlt	r6, [sp, #28]
 80056da:	1af2      	sublt	r2, r6, r3
 80056dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80056de:	bfb6      	itet	lt
 80056e0:	189b      	addlt	r3, r3, r2
 80056e2:	1b9e      	subge	r6, r3, r6
 80056e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	bfb8      	it	lt
 80056ea:	2600      	movlt	r6, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfb7      	itett	lt
 80056f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80056f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80056f8:	1a9d      	sublt	r5, r3, r2
 80056fa:	2300      	movlt	r3, #0
 80056fc:	e734      	b.n	8005568 <_dtoa_r+0x720>
 80056fe:	9e07      	ldr	r6, [sp, #28]
 8005700:	9d04      	ldr	r5, [sp, #16]
 8005702:	9f08      	ldr	r7, [sp, #32]
 8005704:	e73b      	b.n	800557e <_dtoa_r+0x736>
 8005706:	9a07      	ldr	r2, [sp, #28]
 8005708:	e767      	b.n	80055da <_dtoa_r+0x792>
 800570a:	9b06      	ldr	r3, [sp, #24]
 800570c:	2b01      	cmp	r3, #1
 800570e:	dc18      	bgt.n	8005742 <_dtoa_r+0x8fa>
 8005710:	f1ba 0f00 	cmp.w	sl, #0
 8005714:	d115      	bne.n	8005742 <_dtoa_r+0x8fa>
 8005716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800571a:	b993      	cbnz	r3, 8005742 <_dtoa_r+0x8fa>
 800571c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005720:	0d1b      	lsrs	r3, r3, #20
 8005722:	051b      	lsls	r3, r3, #20
 8005724:	b183      	cbz	r3, 8005748 <_dtoa_r+0x900>
 8005726:	9b04      	ldr	r3, [sp, #16]
 8005728:	3301      	adds	r3, #1
 800572a:	9304      	str	r3, [sp, #16]
 800572c:	9b05      	ldr	r3, [sp, #20]
 800572e:	3301      	adds	r3, #1
 8005730:	9305      	str	r3, [sp, #20]
 8005732:	f04f 0801 	mov.w	r8, #1
 8005736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005738:	2b00      	cmp	r3, #0
 800573a:	f47f af6a 	bne.w	8005612 <_dtoa_r+0x7ca>
 800573e:	2001      	movs	r0, #1
 8005740:	e76f      	b.n	8005622 <_dtoa_r+0x7da>
 8005742:	f04f 0800 	mov.w	r8, #0
 8005746:	e7f6      	b.n	8005736 <_dtoa_r+0x8ee>
 8005748:	4698      	mov	r8, r3
 800574a:	e7f4      	b.n	8005736 <_dtoa_r+0x8ee>
 800574c:	f43f af7d 	beq.w	800564a <_dtoa_r+0x802>
 8005750:	4618      	mov	r0, r3
 8005752:	301c      	adds	r0, #28
 8005754:	e772      	b.n	800563c <_dtoa_r+0x7f4>
 8005756:	9b03      	ldr	r3, [sp, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	dc37      	bgt.n	80057cc <_dtoa_r+0x984>
 800575c:	9b06      	ldr	r3, [sp, #24]
 800575e:	2b02      	cmp	r3, #2
 8005760:	dd34      	ble.n	80057cc <_dtoa_r+0x984>
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	9302      	str	r3, [sp, #8]
 8005766:	9b02      	ldr	r3, [sp, #8]
 8005768:	b96b      	cbnz	r3, 8005786 <_dtoa_r+0x93e>
 800576a:	4631      	mov	r1, r6
 800576c:	2205      	movs	r2, #5
 800576e:	4620      	mov	r0, r4
 8005770:	f000 f9d4 	bl	8005b1c <__multadd>
 8005774:	4601      	mov	r1, r0
 8005776:	4606      	mov	r6, r0
 8005778:	ee18 0a10 	vmov	r0, s16
 800577c:	f000 fbee 	bl	8005f5c <__mcmp>
 8005780:	2800      	cmp	r0, #0
 8005782:	f73f adbb 	bgt.w	80052fc <_dtoa_r+0x4b4>
 8005786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005788:	9d01      	ldr	r5, [sp, #4]
 800578a:	43db      	mvns	r3, r3
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	f04f 0800 	mov.w	r8, #0
 8005792:	4631      	mov	r1, r6
 8005794:	4620      	mov	r0, r4
 8005796:	f000 f99f 	bl	8005ad8 <_Bfree>
 800579a:	2f00      	cmp	r7, #0
 800579c:	f43f aea4 	beq.w	80054e8 <_dtoa_r+0x6a0>
 80057a0:	f1b8 0f00 	cmp.w	r8, #0
 80057a4:	d005      	beq.n	80057b2 <_dtoa_r+0x96a>
 80057a6:	45b8      	cmp	r8, r7
 80057a8:	d003      	beq.n	80057b2 <_dtoa_r+0x96a>
 80057aa:	4641      	mov	r1, r8
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 f993 	bl	8005ad8 <_Bfree>
 80057b2:	4639      	mov	r1, r7
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 f98f 	bl	8005ad8 <_Bfree>
 80057ba:	e695      	b.n	80054e8 <_dtoa_r+0x6a0>
 80057bc:	2600      	movs	r6, #0
 80057be:	4637      	mov	r7, r6
 80057c0:	e7e1      	b.n	8005786 <_dtoa_r+0x93e>
 80057c2:	9700      	str	r7, [sp, #0]
 80057c4:	4637      	mov	r7, r6
 80057c6:	e599      	b.n	80052fc <_dtoa_r+0x4b4>
 80057c8:	40240000 	.word	0x40240000
 80057cc:	9b08      	ldr	r3, [sp, #32]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80ca 	beq.w	8005968 <_dtoa_r+0xb20>
 80057d4:	9b03      	ldr	r3, [sp, #12]
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	2d00      	cmp	r5, #0
 80057da:	dd05      	ble.n	80057e8 <_dtoa_r+0x9a0>
 80057dc:	4639      	mov	r1, r7
 80057de:	462a      	mov	r2, r5
 80057e0:	4620      	mov	r0, r4
 80057e2:	f000 fb4b 	bl	8005e7c <__lshift>
 80057e6:	4607      	mov	r7, r0
 80057e8:	f1b8 0f00 	cmp.w	r8, #0
 80057ec:	d05b      	beq.n	80058a6 <_dtoa_r+0xa5e>
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4620      	mov	r0, r4
 80057f2:	f000 f931 	bl	8005a58 <_Balloc>
 80057f6:	4605      	mov	r5, r0
 80057f8:	b928      	cbnz	r0, 8005806 <_dtoa_r+0x9be>
 80057fa:	4b87      	ldr	r3, [pc, #540]	; (8005a18 <_dtoa_r+0xbd0>)
 80057fc:	4602      	mov	r2, r0
 80057fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005802:	f7ff bb3b 	b.w	8004e7c <_dtoa_r+0x34>
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	3202      	adds	r2, #2
 800580a:	0092      	lsls	r2, r2, #2
 800580c:	f107 010c 	add.w	r1, r7, #12
 8005810:	300c      	adds	r0, #12
 8005812:	f000 f913 	bl	8005a3c <memcpy>
 8005816:	2201      	movs	r2, #1
 8005818:	4629      	mov	r1, r5
 800581a:	4620      	mov	r0, r4
 800581c:	f000 fb2e 	bl	8005e7c <__lshift>
 8005820:	9b01      	ldr	r3, [sp, #4]
 8005822:	f103 0901 	add.w	r9, r3, #1
 8005826:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800582a:	4413      	add	r3, r2
 800582c:	9305      	str	r3, [sp, #20]
 800582e:	f00a 0301 	and.w	r3, sl, #1
 8005832:	46b8      	mov	r8, r7
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	4607      	mov	r7, r0
 8005838:	4631      	mov	r1, r6
 800583a:	ee18 0a10 	vmov	r0, s16
 800583e:	f7ff fa75 	bl	8004d2c <quorem>
 8005842:	4641      	mov	r1, r8
 8005844:	9002      	str	r0, [sp, #8]
 8005846:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800584a:	ee18 0a10 	vmov	r0, s16
 800584e:	f000 fb85 	bl	8005f5c <__mcmp>
 8005852:	463a      	mov	r2, r7
 8005854:	9003      	str	r0, [sp, #12]
 8005856:	4631      	mov	r1, r6
 8005858:	4620      	mov	r0, r4
 800585a:	f000 fb9b 	bl	8005f94 <__mdiff>
 800585e:	68c2      	ldr	r2, [r0, #12]
 8005860:	f109 3bff 	add.w	fp, r9, #4294967295
 8005864:	4605      	mov	r5, r0
 8005866:	bb02      	cbnz	r2, 80058aa <_dtoa_r+0xa62>
 8005868:	4601      	mov	r1, r0
 800586a:	ee18 0a10 	vmov	r0, s16
 800586e:	f000 fb75 	bl	8005f5c <__mcmp>
 8005872:	4602      	mov	r2, r0
 8005874:	4629      	mov	r1, r5
 8005876:	4620      	mov	r0, r4
 8005878:	9207      	str	r2, [sp, #28]
 800587a:	f000 f92d 	bl	8005ad8 <_Bfree>
 800587e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005882:	ea43 0102 	orr.w	r1, r3, r2
 8005886:	9b04      	ldr	r3, [sp, #16]
 8005888:	430b      	orrs	r3, r1
 800588a:	464d      	mov	r5, r9
 800588c:	d10f      	bne.n	80058ae <_dtoa_r+0xa66>
 800588e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005892:	d02a      	beq.n	80058ea <_dtoa_r+0xaa2>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	2b00      	cmp	r3, #0
 8005898:	dd02      	ble.n	80058a0 <_dtoa_r+0xa58>
 800589a:	9b02      	ldr	r3, [sp, #8]
 800589c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80058a0:	f88b a000 	strb.w	sl, [fp]
 80058a4:	e775      	b.n	8005792 <_dtoa_r+0x94a>
 80058a6:	4638      	mov	r0, r7
 80058a8:	e7ba      	b.n	8005820 <_dtoa_r+0x9d8>
 80058aa:	2201      	movs	r2, #1
 80058ac:	e7e2      	b.n	8005874 <_dtoa_r+0xa2c>
 80058ae:	9b03      	ldr	r3, [sp, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	db04      	blt.n	80058be <_dtoa_r+0xa76>
 80058b4:	9906      	ldr	r1, [sp, #24]
 80058b6:	430b      	orrs	r3, r1
 80058b8:	9904      	ldr	r1, [sp, #16]
 80058ba:	430b      	orrs	r3, r1
 80058bc:	d122      	bne.n	8005904 <_dtoa_r+0xabc>
 80058be:	2a00      	cmp	r2, #0
 80058c0:	ddee      	ble.n	80058a0 <_dtoa_r+0xa58>
 80058c2:	ee18 1a10 	vmov	r1, s16
 80058c6:	2201      	movs	r2, #1
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fad7 	bl	8005e7c <__lshift>
 80058ce:	4631      	mov	r1, r6
 80058d0:	ee08 0a10 	vmov	s16, r0
 80058d4:	f000 fb42 	bl	8005f5c <__mcmp>
 80058d8:	2800      	cmp	r0, #0
 80058da:	dc03      	bgt.n	80058e4 <_dtoa_r+0xa9c>
 80058dc:	d1e0      	bne.n	80058a0 <_dtoa_r+0xa58>
 80058de:	f01a 0f01 	tst.w	sl, #1
 80058e2:	d0dd      	beq.n	80058a0 <_dtoa_r+0xa58>
 80058e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058e8:	d1d7      	bne.n	800589a <_dtoa_r+0xa52>
 80058ea:	2339      	movs	r3, #57	; 0x39
 80058ec:	f88b 3000 	strb.w	r3, [fp]
 80058f0:	462b      	mov	r3, r5
 80058f2:	461d      	mov	r5, r3
 80058f4:	3b01      	subs	r3, #1
 80058f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058fa:	2a39      	cmp	r2, #57	; 0x39
 80058fc:	d071      	beq.n	80059e2 <_dtoa_r+0xb9a>
 80058fe:	3201      	adds	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	e746      	b.n	8005792 <_dtoa_r+0x94a>
 8005904:	2a00      	cmp	r2, #0
 8005906:	dd07      	ble.n	8005918 <_dtoa_r+0xad0>
 8005908:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800590c:	d0ed      	beq.n	80058ea <_dtoa_r+0xaa2>
 800590e:	f10a 0301 	add.w	r3, sl, #1
 8005912:	f88b 3000 	strb.w	r3, [fp]
 8005916:	e73c      	b.n	8005792 <_dtoa_r+0x94a>
 8005918:	9b05      	ldr	r3, [sp, #20]
 800591a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800591e:	4599      	cmp	r9, r3
 8005920:	d047      	beq.n	80059b2 <_dtoa_r+0xb6a>
 8005922:	ee18 1a10 	vmov	r1, s16
 8005926:	2300      	movs	r3, #0
 8005928:	220a      	movs	r2, #10
 800592a:	4620      	mov	r0, r4
 800592c:	f000 f8f6 	bl	8005b1c <__multadd>
 8005930:	45b8      	cmp	r8, r7
 8005932:	ee08 0a10 	vmov	s16, r0
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	f04f 020a 	mov.w	r2, #10
 800593e:	4641      	mov	r1, r8
 8005940:	4620      	mov	r0, r4
 8005942:	d106      	bne.n	8005952 <_dtoa_r+0xb0a>
 8005944:	f000 f8ea 	bl	8005b1c <__multadd>
 8005948:	4680      	mov	r8, r0
 800594a:	4607      	mov	r7, r0
 800594c:	f109 0901 	add.w	r9, r9, #1
 8005950:	e772      	b.n	8005838 <_dtoa_r+0x9f0>
 8005952:	f000 f8e3 	bl	8005b1c <__multadd>
 8005956:	4639      	mov	r1, r7
 8005958:	4680      	mov	r8, r0
 800595a:	2300      	movs	r3, #0
 800595c:	220a      	movs	r2, #10
 800595e:	4620      	mov	r0, r4
 8005960:	f000 f8dc 	bl	8005b1c <__multadd>
 8005964:	4607      	mov	r7, r0
 8005966:	e7f1      	b.n	800594c <_dtoa_r+0xb04>
 8005968:	9b03      	ldr	r3, [sp, #12]
 800596a:	9302      	str	r3, [sp, #8]
 800596c:	9d01      	ldr	r5, [sp, #4]
 800596e:	ee18 0a10 	vmov	r0, s16
 8005972:	4631      	mov	r1, r6
 8005974:	f7ff f9da 	bl	8004d2c <quorem>
 8005978:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800597c:	9b01      	ldr	r3, [sp, #4]
 800597e:	f805 ab01 	strb.w	sl, [r5], #1
 8005982:	1aea      	subs	r2, r5, r3
 8005984:	9b02      	ldr	r3, [sp, #8]
 8005986:	4293      	cmp	r3, r2
 8005988:	dd09      	ble.n	800599e <_dtoa_r+0xb56>
 800598a:	ee18 1a10 	vmov	r1, s16
 800598e:	2300      	movs	r3, #0
 8005990:	220a      	movs	r2, #10
 8005992:	4620      	mov	r0, r4
 8005994:	f000 f8c2 	bl	8005b1c <__multadd>
 8005998:	ee08 0a10 	vmov	s16, r0
 800599c:	e7e7      	b.n	800596e <_dtoa_r+0xb26>
 800599e:	9b02      	ldr	r3, [sp, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bfc8      	it	gt
 80059a4:	461d      	movgt	r5, r3
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	bfd8      	it	le
 80059aa:	2501      	movle	r5, #1
 80059ac:	441d      	add	r5, r3
 80059ae:	f04f 0800 	mov.w	r8, #0
 80059b2:	ee18 1a10 	vmov	r1, s16
 80059b6:	2201      	movs	r2, #1
 80059b8:	4620      	mov	r0, r4
 80059ba:	f000 fa5f 	bl	8005e7c <__lshift>
 80059be:	4631      	mov	r1, r6
 80059c0:	ee08 0a10 	vmov	s16, r0
 80059c4:	f000 faca 	bl	8005f5c <__mcmp>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	dc91      	bgt.n	80058f0 <_dtoa_r+0xaa8>
 80059cc:	d102      	bne.n	80059d4 <_dtoa_r+0xb8c>
 80059ce:	f01a 0f01 	tst.w	sl, #1
 80059d2:	d18d      	bne.n	80058f0 <_dtoa_r+0xaa8>
 80059d4:	462b      	mov	r3, r5
 80059d6:	461d      	mov	r5, r3
 80059d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059dc:	2a30      	cmp	r2, #48	; 0x30
 80059de:	d0fa      	beq.n	80059d6 <_dtoa_r+0xb8e>
 80059e0:	e6d7      	b.n	8005792 <_dtoa_r+0x94a>
 80059e2:	9a01      	ldr	r2, [sp, #4]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d184      	bne.n	80058f2 <_dtoa_r+0xaaa>
 80059e8:	9b00      	ldr	r3, [sp, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	2331      	movs	r3, #49	; 0x31
 80059f0:	7013      	strb	r3, [r2, #0]
 80059f2:	e6ce      	b.n	8005792 <_dtoa_r+0x94a>
 80059f4:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <_dtoa_r+0xbd4>)
 80059f6:	f7ff ba95 	b.w	8004f24 <_dtoa_r+0xdc>
 80059fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f47f aa6e 	bne.w	8004ede <_dtoa_r+0x96>
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <_dtoa_r+0xbd8>)
 8005a04:	f7ff ba8e 	b.w	8004f24 <_dtoa_r+0xdc>
 8005a08:	9b02      	ldr	r3, [sp, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	dcae      	bgt.n	800596c <_dtoa_r+0xb24>
 8005a0e:	9b06      	ldr	r3, [sp, #24]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	f73f aea8 	bgt.w	8005766 <_dtoa_r+0x91e>
 8005a16:	e7a9      	b.n	800596c <_dtoa_r+0xb24>
 8005a18:	08007773 	.word	0x08007773
 8005a1c:	080076d0 	.word	0x080076d0
 8005a20:	080076f4 	.word	0x080076f4

08005a24 <_localeconv_r>:
 8005a24:	4800      	ldr	r0, [pc, #0]	; (8005a28 <_localeconv_r+0x4>)
 8005a26:	4770      	bx	lr
 8005a28:	20000188 	.word	0x20000188

08005a2c <malloc>:
 8005a2c:	4b02      	ldr	r3, [pc, #8]	; (8005a38 <malloc+0xc>)
 8005a2e:	4601      	mov	r1, r0
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	f000 bc17 	b.w	8006264 <_malloc_r>
 8005a36:	bf00      	nop
 8005a38:	20000034 	.word	0x20000034

08005a3c <memcpy>:
 8005a3c:	440a      	add	r2, r1
 8005a3e:	4291      	cmp	r1, r2
 8005a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a44:	d100      	bne.n	8005a48 <memcpy+0xc>
 8005a46:	4770      	bx	lr
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a52:	4291      	cmp	r1, r2
 8005a54:	d1f9      	bne.n	8005a4a <memcpy+0xe>
 8005a56:	bd10      	pop	{r4, pc}

08005a58 <_Balloc>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	460d      	mov	r5, r1
 8005a60:	b976      	cbnz	r6, 8005a80 <_Balloc+0x28>
 8005a62:	2010      	movs	r0, #16
 8005a64:	f7ff ffe2 	bl	8005a2c <malloc>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6260      	str	r0, [r4, #36]	; 0x24
 8005a6c:	b920      	cbnz	r0, 8005a78 <_Balloc+0x20>
 8005a6e:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <_Balloc+0x78>)
 8005a70:	4818      	ldr	r0, [pc, #96]	; (8005ad4 <_Balloc+0x7c>)
 8005a72:	2166      	movs	r1, #102	; 0x66
 8005a74:	f000 fc7a 	bl	800636c <__assert_func>
 8005a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a7c:	6006      	str	r6, [r0, #0]
 8005a7e:	60c6      	str	r6, [r0, #12]
 8005a80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a82:	68f3      	ldr	r3, [r6, #12]
 8005a84:	b183      	cbz	r3, 8005aa8 <_Balloc+0x50>
 8005a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a8e:	b9b8      	cbnz	r0, 8005ac0 <_Balloc+0x68>
 8005a90:	2101      	movs	r1, #1
 8005a92:	fa01 f605 	lsl.w	r6, r1, r5
 8005a96:	1d72      	adds	r2, r6, #5
 8005a98:	0092      	lsls	r2, r2, #2
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 fb60 	bl	8006160 <_calloc_r>
 8005aa0:	b160      	cbz	r0, 8005abc <_Balloc+0x64>
 8005aa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aa6:	e00e      	b.n	8005ac6 <_Balloc+0x6e>
 8005aa8:	2221      	movs	r2, #33	; 0x21
 8005aaa:	2104      	movs	r1, #4
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fb57 	bl	8006160 <_calloc_r>
 8005ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab4:	60f0      	str	r0, [r6, #12]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e4      	bne.n	8005a86 <_Balloc+0x2e>
 8005abc:	2000      	movs	r0, #0
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	6802      	ldr	r2, [r0, #0]
 8005ac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005acc:	e7f7      	b.n	8005abe <_Balloc+0x66>
 8005ace:	bf00      	nop
 8005ad0:	08007701 	.word	0x08007701
 8005ad4:	08007784 	.word	0x08007784

08005ad8 <_Bfree>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005adc:	4605      	mov	r5, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	b976      	cbnz	r6, 8005b00 <_Bfree+0x28>
 8005ae2:	2010      	movs	r0, #16
 8005ae4:	f7ff ffa2 	bl	8005a2c <malloc>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6268      	str	r0, [r5, #36]	; 0x24
 8005aec:	b920      	cbnz	r0, 8005af8 <_Bfree+0x20>
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <_Bfree+0x3c>)
 8005af0:	4809      	ldr	r0, [pc, #36]	; (8005b18 <_Bfree+0x40>)
 8005af2:	218a      	movs	r1, #138	; 0x8a
 8005af4:	f000 fc3a 	bl	800636c <__assert_func>
 8005af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005afc:	6006      	str	r6, [r0, #0]
 8005afe:	60c6      	str	r6, [r0, #12]
 8005b00:	b13c      	cbz	r4, 8005b12 <_Bfree+0x3a>
 8005b02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b04:	6862      	ldr	r2, [r4, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b0c:	6021      	str	r1, [r4, #0]
 8005b0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	08007701 	.word	0x08007701
 8005b18:	08007784 	.word	0x08007784

08005b1c <__multadd>:
 8005b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b20:	690d      	ldr	r5, [r1, #16]
 8005b22:	4607      	mov	r7, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	461e      	mov	r6, r3
 8005b28:	f101 0c14 	add.w	ip, r1, #20
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	f8dc 3000 	ldr.w	r3, [ip]
 8005b32:	b299      	uxth	r1, r3
 8005b34:	fb02 6101 	mla	r1, r2, r1, r6
 8005b38:	0c1e      	lsrs	r6, r3, #16
 8005b3a:	0c0b      	lsrs	r3, r1, #16
 8005b3c:	fb02 3306 	mla	r3, r2, r6, r3
 8005b40:	b289      	uxth	r1, r1
 8005b42:	3001      	adds	r0, #1
 8005b44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b48:	4285      	cmp	r5, r0
 8005b4a:	f84c 1b04 	str.w	r1, [ip], #4
 8005b4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b52:	dcec      	bgt.n	8005b2e <__multadd+0x12>
 8005b54:	b30e      	cbz	r6, 8005b9a <__multadd+0x7e>
 8005b56:	68a3      	ldr	r3, [r4, #8]
 8005b58:	42ab      	cmp	r3, r5
 8005b5a:	dc19      	bgt.n	8005b90 <__multadd+0x74>
 8005b5c:	6861      	ldr	r1, [r4, #4]
 8005b5e:	4638      	mov	r0, r7
 8005b60:	3101      	adds	r1, #1
 8005b62:	f7ff ff79 	bl	8005a58 <_Balloc>
 8005b66:	4680      	mov	r8, r0
 8005b68:	b928      	cbnz	r0, 8005b76 <__multadd+0x5a>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <__multadd+0x84>)
 8005b6e:	480d      	ldr	r0, [pc, #52]	; (8005ba4 <__multadd+0x88>)
 8005b70:	21b5      	movs	r1, #181	; 0xb5
 8005b72:	f000 fbfb 	bl	800636c <__assert_func>
 8005b76:	6922      	ldr	r2, [r4, #16]
 8005b78:	3202      	adds	r2, #2
 8005b7a:	f104 010c 	add.w	r1, r4, #12
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	300c      	adds	r0, #12
 8005b82:	f7ff ff5b 	bl	8005a3c <memcpy>
 8005b86:	4621      	mov	r1, r4
 8005b88:	4638      	mov	r0, r7
 8005b8a:	f7ff ffa5 	bl	8005ad8 <_Bfree>
 8005b8e:	4644      	mov	r4, r8
 8005b90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b94:	3501      	adds	r5, #1
 8005b96:	615e      	str	r6, [r3, #20]
 8005b98:	6125      	str	r5, [r4, #16]
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba0:	08007773 	.word	0x08007773
 8005ba4:	08007784 	.word	0x08007784

08005ba8 <__hi0bits>:
 8005ba8:	0c03      	lsrs	r3, r0, #16
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	b9d3      	cbnz	r3, 8005be4 <__hi0bits+0x3c>
 8005bae:	0400      	lsls	r0, r0, #16
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bb6:	bf04      	itt	eq
 8005bb8:	0200      	lsleq	r0, r0, #8
 8005bba:	3308      	addeq	r3, #8
 8005bbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bc0:	bf04      	itt	eq
 8005bc2:	0100      	lsleq	r0, r0, #4
 8005bc4:	3304      	addeq	r3, #4
 8005bc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005bca:	bf04      	itt	eq
 8005bcc:	0080      	lsleq	r0, r0, #2
 8005bce:	3302      	addeq	r3, #2
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	db05      	blt.n	8005be0 <__hi0bits+0x38>
 8005bd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005bd8:	f103 0301 	add.w	r3, r3, #1
 8005bdc:	bf08      	it	eq
 8005bde:	2320      	moveq	r3, #32
 8005be0:	4618      	mov	r0, r3
 8005be2:	4770      	bx	lr
 8005be4:	2300      	movs	r3, #0
 8005be6:	e7e4      	b.n	8005bb2 <__hi0bits+0xa>

08005be8 <__lo0bits>:
 8005be8:	6803      	ldr	r3, [r0, #0]
 8005bea:	f013 0207 	ands.w	r2, r3, #7
 8005bee:	4601      	mov	r1, r0
 8005bf0:	d00b      	beq.n	8005c0a <__lo0bits+0x22>
 8005bf2:	07da      	lsls	r2, r3, #31
 8005bf4:	d423      	bmi.n	8005c3e <__lo0bits+0x56>
 8005bf6:	0798      	lsls	r0, r3, #30
 8005bf8:	bf49      	itett	mi
 8005bfa:	085b      	lsrmi	r3, r3, #1
 8005bfc:	089b      	lsrpl	r3, r3, #2
 8005bfe:	2001      	movmi	r0, #1
 8005c00:	600b      	strmi	r3, [r1, #0]
 8005c02:	bf5c      	itt	pl
 8005c04:	600b      	strpl	r3, [r1, #0]
 8005c06:	2002      	movpl	r0, #2
 8005c08:	4770      	bx	lr
 8005c0a:	b298      	uxth	r0, r3
 8005c0c:	b9a8      	cbnz	r0, 8005c3a <__lo0bits+0x52>
 8005c0e:	0c1b      	lsrs	r3, r3, #16
 8005c10:	2010      	movs	r0, #16
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	b90a      	cbnz	r2, 8005c1a <__lo0bits+0x32>
 8005c16:	3008      	adds	r0, #8
 8005c18:	0a1b      	lsrs	r3, r3, #8
 8005c1a:	071a      	lsls	r2, r3, #28
 8005c1c:	bf04      	itt	eq
 8005c1e:	091b      	lsreq	r3, r3, #4
 8005c20:	3004      	addeq	r0, #4
 8005c22:	079a      	lsls	r2, r3, #30
 8005c24:	bf04      	itt	eq
 8005c26:	089b      	lsreq	r3, r3, #2
 8005c28:	3002      	addeq	r0, #2
 8005c2a:	07da      	lsls	r2, r3, #31
 8005c2c:	d403      	bmi.n	8005c36 <__lo0bits+0x4e>
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	f100 0001 	add.w	r0, r0, #1
 8005c34:	d005      	beq.n	8005c42 <__lo0bits+0x5a>
 8005c36:	600b      	str	r3, [r1, #0]
 8005c38:	4770      	bx	lr
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	e7e9      	b.n	8005c12 <__lo0bits+0x2a>
 8005c3e:	2000      	movs	r0, #0
 8005c40:	4770      	bx	lr
 8005c42:	2020      	movs	r0, #32
 8005c44:	4770      	bx	lr
	...

08005c48 <__i2b>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	f7ff ff03 	bl	8005a58 <_Balloc>
 8005c52:	4602      	mov	r2, r0
 8005c54:	b928      	cbnz	r0, 8005c62 <__i2b+0x1a>
 8005c56:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <__i2b+0x24>)
 8005c58:	4805      	ldr	r0, [pc, #20]	; (8005c70 <__i2b+0x28>)
 8005c5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c5e:	f000 fb85 	bl	800636c <__assert_func>
 8005c62:	2301      	movs	r3, #1
 8005c64:	6144      	str	r4, [r0, #20]
 8005c66:	6103      	str	r3, [r0, #16]
 8005c68:	bd10      	pop	{r4, pc}
 8005c6a:	bf00      	nop
 8005c6c:	08007773 	.word	0x08007773
 8005c70:	08007784 	.word	0x08007784

08005c74 <__multiply>:
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	4691      	mov	r9, r2
 8005c7a:	690a      	ldr	r2, [r1, #16]
 8005c7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	bfb8      	it	lt
 8005c84:	460b      	movlt	r3, r1
 8005c86:	460c      	mov	r4, r1
 8005c88:	bfbc      	itt	lt
 8005c8a:	464c      	movlt	r4, r9
 8005c8c:	4699      	movlt	r9, r3
 8005c8e:	6927      	ldr	r7, [r4, #16]
 8005c90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005c94:	68a3      	ldr	r3, [r4, #8]
 8005c96:	6861      	ldr	r1, [r4, #4]
 8005c98:	eb07 060a 	add.w	r6, r7, sl
 8005c9c:	42b3      	cmp	r3, r6
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	bfb8      	it	lt
 8005ca2:	3101      	addlt	r1, #1
 8005ca4:	f7ff fed8 	bl	8005a58 <_Balloc>
 8005ca8:	b930      	cbnz	r0, 8005cb8 <__multiply+0x44>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4b44      	ldr	r3, [pc, #272]	; (8005dc0 <__multiply+0x14c>)
 8005cae:	4845      	ldr	r0, [pc, #276]	; (8005dc4 <__multiply+0x150>)
 8005cb0:	f240 115d 	movw	r1, #349	; 0x15d
 8005cb4:	f000 fb5a 	bl	800636c <__assert_func>
 8005cb8:	f100 0514 	add.w	r5, r0, #20
 8005cbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005cc0:	462b      	mov	r3, r5
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	4543      	cmp	r3, r8
 8005cc6:	d321      	bcc.n	8005d0c <__multiply+0x98>
 8005cc8:	f104 0314 	add.w	r3, r4, #20
 8005ccc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005cd0:	f109 0314 	add.w	r3, r9, #20
 8005cd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005cd8:	9202      	str	r2, [sp, #8]
 8005cda:	1b3a      	subs	r2, r7, r4
 8005cdc:	3a15      	subs	r2, #21
 8005cde:	f022 0203 	bic.w	r2, r2, #3
 8005ce2:	3204      	adds	r2, #4
 8005ce4:	f104 0115 	add.w	r1, r4, #21
 8005ce8:	428f      	cmp	r7, r1
 8005cea:	bf38      	it	cc
 8005cec:	2204      	movcc	r2, #4
 8005cee:	9201      	str	r2, [sp, #4]
 8005cf0:	9a02      	ldr	r2, [sp, #8]
 8005cf2:	9303      	str	r3, [sp, #12]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d80c      	bhi.n	8005d12 <__multiply+0x9e>
 8005cf8:	2e00      	cmp	r6, #0
 8005cfa:	dd03      	ble.n	8005d04 <__multiply+0x90>
 8005cfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d05a      	beq.n	8005dba <__multiply+0x146>
 8005d04:	6106      	str	r6, [r0, #16]
 8005d06:	b005      	add	sp, #20
 8005d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0c:	f843 2b04 	str.w	r2, [r3], #4
 8005d10:	e7d8      	b.n	8005cc4 <__multiply+0x50>
 8005d12:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d16:	f1ba 0f00 	cmp.w	sl, #0
 8005d1a:	d024      	beq.n	8005d66 <__multiply+0xf2>
 8005d1c:	f104 0e14 	add.w	lr, r4, #20
 8005d20:	46a9      	mov	r9, r5
 8005d22:	f04f 0c00 	mov.w	ip, #0
 8005d26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d2a:	f8d9 1000 	ldr.w	r1, [r9]
 8005d2e:	fa1f fb82 	uxth.w	fp, r2
 8005d32:	b289      	uxth	r1, r1
 8005d34:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8005d40:	4461      	add	r1, ip
 8005d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d46:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d4e:	b289      	uxth	r1, r1
 8005d50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d54:	4577      	cmp	r7, lr
 8005d56:	f849 1b04 	str.w	r1, [r9], #4
 8005d5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d5e:	d8e2      	bhi.n	8005d26 <__multiply+0xb2>
 8005d60:	9a01      	ldr	r2, [sp, #4]
 8005d62:	f845 c002 	str.w	ip, [r5, r2]
 8005d66:	9a03      	ldr	r2, [sp, #12]
 8005d68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	f1b9 0f00 	cmp.w	r9, #0
 8005d72:	d020      	beq.n	8005db6 <__multiply+0x142>
 8005d74:	6829      	ldr	r1, [r5, #0]
 8005d76:	f104 0c14 	add.w	ip, r4, #20
 8005d7a:	46ae      	mov	lr, r5
 8005d7c:	f04f 0a00 	mov.w	sl, #0
 8005d80:	f8bc b000 	ldrh.w	fp, [ip]
 8005d84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005d88:	fb09 220b 	mla	r2, r9, fp, r2
 8005d8c:	4492      	add	sl, r2
 8005d8e:	b289      	uxth	r1, r1
 8005d90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005d94:	f84e 1b04 	str.w	r1, [lr], #4
 8005d98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005d9c:	f8be 1000 	ldrh.w	r1, [lr]
 8005da0:	0c12      	lsrs	r2, r2, #16
 8005da2:	fb09 1102 	mla	r1, r9, r2, r1
 8005da6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005daa:	4567      	cmp	r7, ip
 8005dac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005db0:	d8e6      	bhi.n	8005d80 <__multiply+0x10c>
 8005db2:	9a01      	ldr	r2, [sp, #4]
 8005db4:	50a9      	str	r1, [r5, r2]
 8005db6:	3504      	adds	r5, #4
 8005db8:	e79a      	b.n	8005cf0 <__multiply+0x7c>
 8005dba:	3e01      	subs	r6, #1
 8005dbc:	e79c      	b.n	8005cf8 <__multiply+0x84>
 8005dbe:	bf00      	nop
 8005dc0:	08007773 	.word	0x08007773
 8005dc4:	08007784 	.word	0x08007784

08005dc8 <__pow5mult>:
 8005dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dcc:	4615      	mov	r5, r2
 8005dce:	f012 0203 	ands.w	r2, r2, #3
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	d007      	beq.n	8005de8 <__pow5mult+0x20>
 8005dd8:	4c25      	ldr	r4, [pc, #148]	; (8005e70 <__pow5mult+0xa8>)
 8005dda:	3a01      	subs	r2, #1
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005de2:	f7ff fe9b 	bl	8005b1c <__multadd>
 8005de6:	4607      	mov	r7, r0
 8005de8:	10ad      	asrs	r5, r5, #2
 8005dea:	d03d      	beq.n	8005e68 <__pow5mult+0xa0>
 8005dec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dee:	b97c      	cbnz	r4, 8005e10 <__pow5mult+0x48>
 8005df0:	2010      	movs	r0, #16
 8005df2:	f7ff fe1b 	bl	8005a2c <malloc>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6270      	str	r0, [r6, #36]	; 0x24
 8005dfa:	b928      	cbnz	r0, 8005e08 <__pow5mult+0x40>
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <__pow5mult+0xac>)
 8005dfe:	481e      	ldr	r0, [pc, #120]	; (8005e78 <__pow5mult+0xb0>)
 8005e00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e04:	f000 fab2 	bl	800636c <__assert_func>
 8005e08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e0c:	6004      	str	r4, [r0, #0]
 8005e0e:	60c4      	str	r4, [r0, #12]
 8005e10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e18:	b94c      	cbnz	r4, 8005e2e <__pow5mult+0x66>
 8005e1a:	f240 2171 	movw	r1, #625	; 0x271
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff ff12 	bl	8005c48 <__i2b>
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	6003      	str	r3, [r0, #0]
 8005e2e:	f04f 0900 	mov.w	r9, #0
 8005e32:	07eb      	lsls	r3, r5, #31
 8005e34:	d50a      	bpl.n	8005e4c <__pow5mult+0x84>
 8005e36:	4639      	mov	r1, r7
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7ff ff1a 	bl	8005c74 <__multiply>
 8005e40:	4639      	mov	r1, r7
 8005e42:	4680      	mov	r8, r0
 8005e44:	4630      	mov	r0, r6
 8005e46:	f7ff fe47 	bl	8005ad8 <_Bfree>
 8005e4a:	4647      	mov	r7, r8
 8005e4c:	106d      	asrs	r5, r5, #1
 8005e4e:	d00b      	beq.n	8005e68 <__pow5mult+0xa0>
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	b938      	cbnz	r0, 8005e64 <__pow5mult+0x9c>
 8005e54:	4622      	mov	r2, r4
 8005e56:	4621      	mov	r1, r4
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f7ff ff0b 	bl	8005c74 <__multiply>
 8005e5e:	6020      	str	r0, [r4, #0]
 8005e60:	f8c0 9000 	str.w	r9, [r0]
 8005e64:	4604      	mov	r4, r0
 8005e66:	e7e4      	b.n	8005e32 <__pow5mult+0x6a>
 8005e68:	4638      	mov	r0, r7
 8005e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6e:	bf00      	nop
 8005e70:	080078d0 	.word	0x080078d0
 8005e74:	08007701 	.word	0x08007701
 8005e78:	08007784 	.word	0x08007784

08005e7c <__lshift>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	460c      	mov	r4, r1
 8005e82:	6849      	ldr	r1, [r1, #4]
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e8a:	68a3      	ldr	r3, [r4, #8]
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	4691      	mov	r9, r2
 8005e90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e94:	f108 0601 	add.w	r6, r8, #1
 8005e98:	42b3      	cmp	r3, r6
 8005e9a:	db0b      	blt.n	8005eb4 <__lshift+0x38>
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f7ff fddb 	bl	8005a58 <_Balloc>
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	b948      	cbnz	r0, 8005eba <__lshift+0x3e>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	4b2a      	ldr	r3, [pc, #168]	; (8005f54 <__lshift+0xd8>)
 8005eaa:	482b      	ldr	r0, [pc, #172]	; (8005f58 <__lshift+0xdc>)
 8005eac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005eb0:	f000 fa5c 	bl	800636c <__assert_func>
 8005eb4:	3101      	adds	r1, #1
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	e7ee      	b.n	8005e98 <__lshift+0x1c>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f100 0114 	add.w	r1, r0, #20
 8005ec0:	f100 0210 	add.w	r2, r0, #16
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	4553      	cmp	r3, sl
 8005ec8:	db37      	blt.n	8005f3a <__lshift+0xbe>
 8005eca:	6920      	ldr	r0, [r4, #16]
 8005ecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ed0:	f104 0314 	add.w	r3, r4, #20
 8005ed4:	f019 091f 	ands.w	r9, r9, #31
 8005ed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005edc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ee0:	d02f      	beq.n	8005f42 <__lshift+0xc6>
 8005ee2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ee6:	468a      	mov	sl, r1
 8005ee8:	f04f 0c00 	mov.w	ip, #0
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	fa02 f209 	lsl.w	r2, r2, r9
 8005ef2:	ea42 020c 	orr.w	r2, r2, ip
 8005ef6:	f84a 2b04 	str.w	r2, [sl], #4
 8005efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005efe:	4298      	cmp	r0, r3
 8005f00:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005f04:	d8f2      	bhi.n	8005eec <__lshift+0x70>
 8005f06:	1b03      	subs	r3, r0, r4
 8005f08:	3b15      	subs	r3, #21
 8005f0a:	f023 0303 	bic.w	r3, r3, #3
 8005f0e:	3304      	adds	r3, #4
 8005f10:	f104 0215 	add.w	r2, r4, #21
 8005f14:	4290      	cmp	r0, r2
 8005f16:	bf38      	it	cc
 8005f18:	2304      	movcc	r3, #4
 8005f1a:	f841 c003 	str.w	ip, [r1, r3]
 8005f1e:	f1bc 0f00 	cmp.w	ip, #0
 8005f22:	d001      	beq.n	8005f28 <__lshift+0xac>
 8005f24:	f108 0602 	add.w	r6, r8, #2
 8005f28:	3e01      	subs	r6, #1
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	612e      	str	r6, [r5, #16]
 8005f2e:	4621      	mov	r1, r4
 8005f30:	f7ff fdd2 	bl	8005ad8 <_Bfree>
 8005f34:	4628      	mov	r0, r5
 8005f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f3e:	3301      	adds	r3, #1
 8005f40:	e7c1      	b.n	8005ec6 <__lshift+0x4a>
 8005f42:	3904      	subs	r1, #4
 8005f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f48:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f4c:	4298      	cmp	r0, r3
 8005f4e:	d8f9      	bhi.n	8005f44 <__lshift+0xc8>
 8005f50:	e7ea      	b.n	8005f28 <__lshift+0xac>
 8005f52:	bf00      	nop
 8005f54:	08007773 	.word	0x08007773
 8005f58:	08007784 	.word	0x08007784

08005f5c <__mcmp>:
 8005f5c:	b530      	push	{r4, r5, lr}
 8005f5e:	6902      	ldr	r2, [r0, #16]
 8005f60:	690c      	ldr	r4, [r1, #16]
 8005f62:	1b12      	subs	r2, r2, r4
 8005f64:	d10e      	bne.n	8005f84 <__mcmp+0x28>
 8005f66:	f100 0314 	add.w	r3, r0, #20
 8005f6a:	3114      	adds	r1, #20
 8005f6c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f70:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f74:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f78:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f7c:	42a5      	cmp	r5, r4
 8005f7e:	d003      	beq.n	8005f88 <__mcmp+0x2c>
 8005f80:	d305      	bcc.n	8005f8e <__mcmp+0x32>
 8005f82:	2201      	movs	r2, #1
 8005f84:	4610      	mov	r0, r2
 8005f86:	bd30      	pop	{r4, r5, pc}
 8005f88:	4283      	cmp	r3, r0
 8005f8a:	d3f3      	bcc.n	8005f74 <__mcmp+0x18>
 8005f8c:	e7fa      	b.n	8005f84 <__mcmp+0x28>
 8005f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f92:	e7f7      	b.n	8005f84 <__mcmp+0x28>

08005f94 <__mdiff>:
 8005f94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	460c      	mov	r4, r1
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	4690      	mov	r8, r2
 8005fa2:	f7ff ffdb 	bl	8005f5c <__mcmp>
 8005fa6:	1e05      	subs	r5, r0, #0
 8005fa8:	d110      	bne.n	8005fcc <__mdiff+0x38>
 8005faa:	4629      	mov	r1, r5
 8005fac:	4630      	mov	r0, r6
 8005fae:	f7ff fd53 	bl	8005a58 <_Balloc>
 8005fb2:	b930      	cbnz	r0, 8005fc2 <__mdiff+0x2e>
 8005fb4:	4b3a      	ldr	r3, [pc, #232]	; (80060a0 <__mdiff+0x10c>)
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	f240 2132 	movw	r1, #562	; 0x232
 8005fbc:	4839      	ldr	r0, [pc, #228]	; (80060a4 <__mdiff+0x110>)
 8005fbe:	f000 f9d5 	bl	800636c <__assert_func>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fcc:	bfa4      	itt	ge
 8005fce:	4643      	movge	r3, r8
 8005fd0:	46a0      	movge	r8, r4
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fd8:	bfa6      	itte	ge
 8005fda:	461c      	movge	r4, r3
 8005fdc:	2500      	movge	r5, #0
 8005fde:	2501      	movlt	r5, #1
 8005fe0:	f7ff fd3a 	bl	8005a58 <_Balloc>
 8005fe4:	b920      	cbnz	r0, 8005ff0 <__mdiff+0x5c>
 8005fe6:	4b2e      	ldr	r3, [pc, #184]	; (80060a0 <__mdiff+0x10c>)
 8005fe8:	4602      	mov	r2, r0
 8005fea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fee:	e7e5      	b.n	8005fbc <__mdiff+0x28>
 8005ff0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005ff4:	6926      	ldr	r6, [r4, #16]
 8005ff6:	60c5      	str	r5, [r0, #12]
 8005ff8:	f104 0914 	add.w	r9, r4, #20
 8005ffc:	f108 0514 	add.w	r5, r8, #20
 8006000:	f100 0e14 	add.w	lr, r0, #20
 8006004:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006008:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800600c:	f108 0210 	add.w	r2, r8, #16
 8006010:	46f2      	mov	sl, lr
 8006012:	2100      	movs	r1, #0
 8006014:	f859 3b04 	ldr.w	r3, [r9], #4
 8006018:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800601c:	fa1f f883 	uxth.w	r8, r3
 8006020:	fa11 f18b 	uxtah	r1, r1, fp
 8006024:	0c1b      	lsrs	r3, r3, #16
 8006026:	eba1 0808 	sub.w	r8, r1, r8
 800602a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800602e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006032:	fa1f f888 	uxth.w	r8, r8
 8006036:	1419      	asrs	r1, r3, #16
 8006038:	454e      	cmp	r6, r9
 800603a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800603e:	f84a 3b04 	str.w	r3, [sl], #4
 8006042:	d8e7      	bhi.n	8006014 <__mdiff+0x80>
 8006044:	1b33      	subs	r3, r6, r4
 8006046:	3b15      	subs	r3, #21
 8006048:	f023 0303 	bic.w	r3, r3, #3
 800604c:	3304      	adds	r3, #4
 800604e:	3415      	adds	r4, #21
 8006050:	42a6      	cmp	r6, r4
 8006052:	bf38      	it	cc
 8006054:	2304      	movcc	r3, #4
 8006056:	441d      	add	r5, r3
 8006058:	4473      	add	r3, lr
 800605a:	469e      	mov	lr, r3
 800605c:	462e      	mov	r6, r5
 800605e:	4566      	cmp	r6, ip
 8006060:	d30e      	bcc.n	8006080 <__mdiff+0xec>
 8006062:	f10c 0203 	add.w	r2, ip, #3
 8006066:	1b52      	subs	r2, r2, r5
 8006068:	f022 0203 	bic.w	r2, r2, #3
 800606c:	3d03      	subs	r5, #3
 800606e:	45ac      	cmp	ip, r5
 8006070:	bf38      	it	cc
 8006072:	2200      	movcc	r2, #0
 8006074:	441a      	add	r2, r3
 8006076:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800607a:	b17b      	cbz	r3, 800609c <__mdiff+0x108>
 800607c:	6107      	str	r7, [r0, #16]
 800607e:	e7a3      	b.n	8005fc8 <__mdiff+0x34>
 8006080:	f856 8b04 	ldr.w	r8, [r6], #4
 8006084:	fa11 f288 	uxtah	r2, r1, r8
 8006088:	1414      	asrs	r4, r2, #16
 800608a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800608e:	b292      	uxth	r2, r2
 8006090:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006094:	f84e 2b04 	str.w	r2, [lr], #4
 8006098:	1421      	asrs	r1, r4, #16
 800609a:	e7e0      	b.n	800605e <__mdiff+0xca>
 800609c:	3f01      	subs	r7, #1
 800609e:	e7ea      	b.n	8006076 <__mdiff+0xe2>
 80060a0:	08007773 	.word	0x08007773
 80060a4:	08007784 	.word	0x08007784

080060a8 <__d2b>:
 80060a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060ac:	4689      	mov	r9, r1
 80060ae:	2101      	movs	r1, #1
 80060b0:	ec57 6b10 	vmov	r6, r7, d0
 80060b4:	4690      	mov	r8, r2
 80060b6:	f7ff fccf 	bl	8005a58 <_Balloc>
 80060ba:	4604      	mov	r4, r0
 80060bc:	b930      	cbnz	r0, 80060cc <__d2b+0x24>
 80060be:	4602      	mov	r2, r0
 80060c0:	4b25      	ldr	r3, [pc, #148]	; (8006158 <__d2b+0xb0>)
 80060c2:	4826      	ldr	r0, [pc, #152]	; (800615c <__d2b+0xb4>)
 80060c4:	f240 310a 	movw	r1, #778	; 0x30a
 80060c8:	f000 f950 	bl	800636c <__assert_func>
 80060cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80060d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060d4:	bb35      	cbnz	r5, 8006124 <__d2b+0x7c>
 80060d6:	2e00      	cmp	r6, #0
 80060d8:	9301      	str	r3, [sp, #4]
 80060da:	d028      	beq.n	800612e <__d2b+0x86>
 80060dc:	4668      	mov	r0, sp
 80060de:	9600      	str	r6, [sp, #0]
 80060e0:	f7ff fd82 	bl	8005be8 <__lo0bits>
 80060e4:	9900      	ldr	r1, [sp, #0]
 80060e6:	b300      	cbz	r0, 800612a <__d2b+0x82>
 80060e8:	9a01      	ldr	r2, [sp, #4]
 80060ea:	f1c0 0320 	rsb	r3, r0, #32
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	430b      	orrs	r3, r1
 80060f4:	40c2      	lsrs	r2, r0
 80060f6:	6163      	str	r3, [r4, #20]
 80060f8:	9201      	str	r2, [sp, #4]
 80060fa:	9b01      	ldr	r3, [sp, #4]
 80060fc:	61a3      	str	r3, [r4, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bf14      	ite	ne
 8006102:	2202      	movne	r2, #2
 8006104:	2201      	moveq	r2, #1
 8006106:	6122      	str	r2, [r4, #16]
 8006108:	b1d5      	cbz	r5, 8006140 <__d2b+0x98>
 800610a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800610e:	4405      	add	r5, r0
 8006110:	f8c9 5000 	str.w	r5, [r9]
 8006114:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006118:	f8c8 0000 	str.w	r0, [r8]
 800611c:	4620      	mov	r0, r4
 800611e:	b003      	add	sp, #12
 8006120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006128:	e7d5      	b.n	80060d6 <__d2b+0x2e>
 800612a:	6161      	str	r1, [r4, #20]
 800612c:	e7e5      	b.n	80060fa <__d2b+0x52>
 800612e:	a801      	add	r0, sp, #4
 8006130:	f7ff fd5a 	bl	8005be8 <__lo0bits>
 8006134:	9b01      	ldr	r3, [sp, #4]
 8006136:	6163      	str	r3, [r4, #20]
 8006138:	2201      	movs	r2, #1
 800613a:	6122      	str	r2, [r4, #16]
 800613c:	3020      	adds	r0, #32
 800613e:	e7e3      	b.n	8006108 <__d2b+0x60>
 8006140:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006144:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006148:	f8c9 0000 	str.w	r0, [r9]
 800614c:	6918      	ldr	r0, [r3, #16]
 800614e:	f7ff fd2b 	bl	8005ba8 <__hi0bits>
 8006152:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006156:	e7df      	b.n	8006118 <__d2b+0x70>
 8006158:	08007773 	.word	0x08007773
 800615c:	08007784 	.word	0x08007784

08006160 <_calloc_r>:
 8006160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006162:	fba1 2402 	umull	r2, r4, r1, r2
 8006166:	b94c      	cbnz	r4, 800617c <_calloc_r+0x1c>
 8006168:	4611      	mov	r1, r2
 800616a:	9201      	str	r2, [sp, #4]
 800616c:	f000 f87a 	bl	8006264 <_malloc_r>
 8006170:	9a01      	ldr	r2, [sp, #4]
 8006172:	4605      	mov	r5, r0
 8006174:	b930      	cbnz	r0, 8006184 <_calloc_r+0x24>
 8006176:	4628      	mov	r0, r5
 8006178:	b003      	add	sp, #12
 800617a:	bd30      	pop	{r4, r5, pc}
 800617c:	220c      	movs	r2, #12
 800617e:	6002      	str	r2, [r0, #0]
 8006180:	2500      	movs	r5, #0
 8006182:	e7f8      	b.n	8006176 <_calloc_r+0x16>
 8006184:	4621      	mov	r1, r4
 8006186:	f7fe f95f 	bl	8004448 <memset>
 800618a:	e7f4      	b.n	8006176 <_calloc_r+0x16>

0800618c <_free_r>:
 800618c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800618e:	2900      	cmp	r1, #0
 8006190:	d044      	beq.n	800621c <_free_r+0x90>
 8006192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006196:	9001      	str	r0, [sp, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f1a1 0404 	sub.w	r4, r1, #4
 800619e:	bfb8      	it	lt
 80061a0:	18e4      	addlt	r4, r4, r3
 80061a2:	f000 f925 	bl	80063f0 <__malloc_lock>
 80061a6:	4a1e      	ldr	r2, [pc, #120]	; (8006220 <_free_r+0x94>)
 80061a8:	9801      	ldr	r0, [sp, #4]
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	b933      	cbnz	r3, 80061bc <_free_r+0x30>
 80061ae:	6063      	str	r3, [r4, #4]
 80061b0:	6014      	str	r4, [r2, #0]
 80061b2:	b003      	add	sp, #12
 80061b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061b8:	f000 b920 	b.w	80063fc <__malloc_unlock>
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d908      	bls.n	80061d2 <_free_r+0x46>
 80061c0:	6825      	ldr	r5, [r4, #0]
 80061c2:	1961      	adds	r1, r4, r5
 80061c4:	428b      	cmp	r3, r1
 80061c6:	bf01      	itttt	eq
 80061c8:	6819      	ldreq	r1, [r3, #0]
 80061ca:	685b      	ldreq	r3, [r3, #4]
 80061cc:	1949      	addeq	r1, r1, r5
 80061ce:	6021      	streq	r1, [r4, #0]
 80061d0:	e7ed      	b.n	80061ae <_free_r+0x22>
 80061d2:	461a      	mov	r2, r3
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	b10b      	cbz	r3, 80061dc <_free_r+0x50>
 80061d8:	42a3      	cmp	r3, r4
 80061da:	d9fa      	bls.n	80061d2 <_free_r+0x46>
 80061dc:	6811      	ldr	r1, [r2, #0]
 80061de:	1855      	adds	r5, r2, r1
 80061e0:	42a5      	cmp	r5, r4
 80061e2:	d10b      	bne.n	80061fc <_free_r+0x70>
 80061e4:	6824      	ldr	r4, [r4, #0]
 80061e6:	4421      	add	r1, r4
 80061e8:	1854      	adds	r4, r2, r1
 80061ea:	42a3      	cmp	r3, r4
 80061ec:	6011      	str	r1, [r2, #0]
 80061ee:	d1e0      	bne.n	80061b2 <_free_r+0x26>
 80061f0:	681c      	ldr	r4, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	6053      	str	r3, [r2, #4]
 80061f6:	4421      	add	r1, r4
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	e7da      	b.n	80061b2 <_free_r+0x26>
 80061fc:	d902      	bls.n	8006204 <_free_r+0x78>
 80061fe:	230c      	movs	r3, #12
 8006200:	6003      	str	r3, [r0, #0]
 8006202:	e7d6      	b.n	80061b2 <_free_r+0x26>
 8006204:	6825      	ldr	r5, [r4, #0]
 8006206:	1961      	adds	r1, r4, r5
 8006208:	428b      	cmp	r3, r1
 800620a:	bf04      	itt	eq
 800620c:	6819      	ldreq	r1, [r3, #0]
 800620e:	685b      	ldreq	r3, [r3, #4]
 8006210:	6063      	str	r3, [r4, #4]
 8006212:	bf04      	itt	eq
 8006214:	1949      	addeq	r1, r1, r5
 8006216:	6021      	streq	r1, [r4, #0]
 8006218:	6054      	str	r4, [r2, #4]
 800621a:	e7ca      	b.n	80061b2 <_free_r+0x26>
 800621c:	b003      	add	sp, #12
 800621e:	bd30      	pop	{r4, r5, pc}
 8006220:	2000081c 	.word	0x2000081c

08006224 <sbrk_aligned>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	4e0e      	ldr	r6, [pc, #56]	; (8006260 <sbrk_aligned+0x3c>)
 8006228:	460c      	mov	r4, r1
 800622a:	6831      	ldr	r1, [r6, #0]
 800622c:	4605      	mov	r5, r0
 800622e:	b911      	cbnz	r1, 8006236 <sbrk_aligned+0x12>
 8006230:	f000 f88c 	bl	800634c <_sbrk_r>
 8006234:	6030      	str	r0, [r6, #0]
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f887 	bl	800634c <_sbrk_r>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	d00a      	beq.n	8006258 <sbrk_aligned+0x34>
 8006242:	1cc4      	adds	r4, r0, #3
 8006244:	f024 0403 	bic.w	r4, r4, #3
 8006248:	42a0      	cmp	r0, r4
 800624a:	d007      	beq.n	800625c <sbrk_aligned+0x38>
 800624c:	1a21      	subs	r1, r4, r0
 800624e:	4628      	mov	r0, r5
 8006250:	f000 f87c 	bl	800634c <_sbrk_r>
 8006254:	3001      	adds	r0, #1
 8006256:	d101      	bne.n	800625c <sbrk_aligned+0x38>
 8006258:	f04f 34ff 	mov.w	r4, #4294967295
 800625c:	4620      	mov	r0, r4
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	20000820 	.word	0x20000820

08006264 <_malloc_r>:
 8006264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006268:	1ccd      	adds	r5, r1, #3
 800626a:	f025 0503 	bic.w	r5, r5, #3
 800626e:	3508      	adds	r5, #8
 8006270:	2d0c      	cmp	r5, #12
 8006272:	bf38      	it	cc
 8006274:	250c      	movcc	r5, #12
 8006276:	2d00      	cmp	r5, #0
 8006278:	4607      	mov	r7, r0
 800627a:	db01      	blt.n	8006280 <_malloc_r+0x1c>
 800627c:	42a9      	cmp	r1, r5
 800627e:	d905      	bls.n	800628c <_malloc_r+0x28>
 8006280:	230c      	movs	r3, #12
 8006282:	603b      	str	r3, [r7, #0]
 8006284:	2600      	movs	r6, #0
 8006286:	4630      	mov	r0, r6
 8006288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800628c:	4e2e      	ldr	r6, [pc, #184]	; (8006348 <_malloc_r+0xe4>)
 800628e:	f000 f8af 	bl	80063f0 <__malloc_lock>
 8006292:	6833      	ldr	r3, [r6, #0]
 8006294:	461c      	mov	r4, r3
 8006296:	bb34      	cbnz	r4, 80062e6 <_malloc_r+0x82>
 8006298:	4629      	mov	r1, r5
 800629a:	4638      	mov	r0, r7
 800629c:	f7ff ffc2 	bl	8006224 <sbrk_aligned>
 80062a0:	1c43      	adds	r3, r0, #1
 80062a2:	4604      	mov	r4, r0
 80062a4:	d14d      	bne.n	8006342 <_malloc_r+0xde>
 80062a6:	6834      	ldr	r4, [r6, #0]
 80062a8:	4626      	mov	r6, r4
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	d140      	bne.n	8006330 <_malloc_r+0xcc>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	4631      	mov	r1, r6
 80062b2:	4638      	mov	r0, r7
 80062b4:	eb04 0803 	add.w	r8, r4, r3
 80062b8:	f000 f848 	bl	800634c <_sbrk_r>
 80062bc:	4580      	cmp	r8, r0
 80062be:	d13a      	bne.n	8006336 <_malloc_r+0xd2>
 80062c0:	6821      	ldr	r1, [r4, #0]
 80062c2:	3503      	adds	r5, #3
 80062c4:	1a6d      	subs	r5, r5, r1
 80062c6:	f025 0503 	bic.w	r5, r5, #3
 80062ca:	3508      	adds	r5, #8
 80062cc:	2d0c      	cmp	r5, #12
 80062ce:	bf38      	it	cc
 80062d0:	250c      	movcc	r5, #12
 80062d2:	4629      	mov	r1, r5
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7ff ffa5 	bl	8006224 <sbrk_aligned>
 80062da:	3001      	adds	r0, #1
 80062dc:	d02b      	beq.n	8006336 <_malloc_r+0xd2>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	442b      	add	r3, r5
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	e00e      	b.n	8006304 <_malloc_r+0xa0>
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	1b52      	subs	r2, r2, r5
 80062ea:	d41e      	bmi.n	800632a <_malloc_r+0xc6>
 80062ec:	2a0b      	cmp	r2, #11
 80062ee:	d916      	bls.n	800631e <_malloc_r+0xba>
 80062f0:	1961      	adds	r1, r4, r5
 80062f2:	42a3      	cmp	r3, r4
 80062f4:	6025      	str	r5, [r4, #0]
 80062f6:	bf18      	it	ne
 80062f8:	6059      	strne	r1, [r3, #4]
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	bf08      	it	eq
 80062fe:	6031      	streq	r1, [r6, #0]
 8006300:	5162      	str	r2, [r4, r5]
 8006302:	604b      	str	r3, [r1, #4]
 8006304:	4638      	mov	r0, r7
 8006306:	f104 060b 	add.w	r6, r4, #11
 800630a:	f000 f877 	bl	80063fc <__malloc_unlock>
 800630e:	f026 0607 	bic.w	r6, r6, #7
 8006312:	1d23      	adds	r3, r4, #4
 8006314:	1af2      	subs	r2, r6, r3
 8006316:	d0b6      	beq.n	8006286 <_malloc_r+0x22>
 8006318:	1b9b      	subs	r3, r3, r6
 800631a:	50a3      	str	r3, [r4, r2]
 800631c:	e7b3      	b.n	8006286 <_malloc_r+0x22>
 800631e:	6862      	ldr	r2, [r4, #4]
 8006320:	42a3      	cmp	r3, r4
 8006322:	bf0c      	ite	eq
 8006324:	6032      	streq	r2, [r6, #0]
 8006326:	605a      	strne	r2, [r3, #4]
 8006328:	e7ec      	b.n	8006304 <_malloc_r+0xa0>
 800632a:	4623      	mov	r3, r4
 800632c:	6864      	ldr	r4, [r4, #4]
 800632e:	e7b2      	b.n	8006296 <_malloc_r+0x32>
 8006330:	4634      	mov	r4, r6
 8006332:	6876      	ldr	r6, [r6, #4]
 8006334:	e7b9      	b.n	80062aa <_malloc_r+0x46>
 8006336:	230c      	movs	r3, #12
 8006338:	603b      	str	r3, [r7, #0]
 800633a:	4638      	mov	r0, r7
 800633c:	f000 f85e 	bl	80063fc <__malloc_unlock>
 8006340:	e7a1      	b.n	8006286 <_malloc_r+0x22>
 8006342:	6025      	str	r5, [r4, #0]
 8006344:	e7de      	b.n	8006304 <_malloc_r+0xa0>
 8006346:	bf00      	nop
 8006348:	2000081c 	.word	0x2000081c

0800634c <_sbrk_r>:
 800634c:	b538      	push	{r3, r4, r5, lr}
 800634e:	4d06      	ldr	r5, [pc, #24]	; (8006368 <_sbrk_r+0x1c>)
 8006350:	2300      	movs	r3, #0
 8006352:	4604      	mov	r4, r0
 8006354:	4608      	mov	r0, r1
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	f7fb fa48 	bl	80017ec <_sbrk>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_sbrk_r+0x1a>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_sbrk_r+0x1a>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20000824 	.word	0x20000824

0800636c <__assert_func>:
 800636c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800636e:	4614      	mov	r4, r2
 8006370:	461a      	mov	r2, r3
 8006372:	4b09      	ldr	r3, [pc, #36]	; (8006398 <__assert_func+0x2c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4605      	mov	r5, r0
 8006378:	68d8      	ldr	r0, [r3, #12]
 800637a:	b14c      	cbz	r4, 8006390 <__assert_func+0x24>
 800637c:	4b07      	ldr	r3, [pc, #28]	; (800639c <__assert_func+0x30>)
 800637e:	9100      	str	r1, [sp, #0]
 8006380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006384:	4906      	ldr	r1, [pc, #24]	; (80063a0 <__assert_func+0x34>)
 8006386:	462b      	mov	r3, r5
 8006388:	f000 f80e 	bl	80063a8 <fiprintf>
 800638c:	f000 fa64 	bl	8006858 <abort>
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <__assert_func+0x38>)
 8006392:	461c      	mov	r4, r3
 8006394:	e7f3      	b.n	800637e <__assert_func+0x12>
 8006396:	bf00      	nop
 8006398:	20000034 	.word	0x20000034
 800639c:	080078dc 	.word	0x080078dc
 80063a0:	080078e9 	.word	0x080078e9
 80063a4:	08007917 	.word	0x08007917

080063a8 <fiprintf>:
 80063a8:	b40e      	push	{r1, r2, r3}
 80063aa:	b503      	push	{r0, r1, lr}
 80063ac:	4601      	mov	r1, r0
 80063ae:	ab03      	add	r3, sp, #12
 80063b0:	4805      	ldr	r0, [pc, #20]	; (80063c8 <fiprintf+0x20>)
 80063b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063b6:	6800      	ldr	r0, [r0, #0]
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	f000 f84f 	bl	800645c <_vfiprintf_r>
 80063be:	b002      	add	sp, #8
 80063c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063c4:	b003      	add	sp, #12
 80063c6:	4770      	bx	lr
 80063c8:	20000034 	.word	0x20000034

080063cc <__ascii_mbtowc>:
 80063cc:	b082      	sub	sp, #8
 80063ce:	b901      	cbnz	r1, 80063d2 <__ascii_mbtowc+0x6>
 80063d0:	a901      	add	r1, sp, #4
 80063d2:	b142      	cbz	r2, 80063e6 <__ascii_mbtowc+0x1a>
 80063d4:	b14b      	cbz	r3, 80063ea <__ascii_mbtowc+0x1e>
 80063d6:	7813      	ldrb	r3, [r2, #0]
 80063d8:	600b      	str	r3, [r1, #0]
 80063da:	7812      	ldrb	r2, [r2, #0]
 80063dc:	1e10      	subs	r0, r2, #0
 80063de:	bf18      	it	ne
 80063e0:	2001      	movne	r0, #1
 80063e2:	b002      	add	sp, #8
 80063e4:	4770      	bx	lr
 80063e6:	4610      	mov	r0, r2
 80063e8:	e7fb      	b.n	80063e2 <__ascii_mbtowc+0x16>
 80063ea:	f06f 0001 	mvn.w	r0, #1
 80063ee:	e7f8      	b.n	80063e2 <__ascii_mbtowc+0x16>

080063f0 <__malloc_lock>:
 80063f0:	4801      	ldr	r0, [pc, #4]	; (80063f8 <__malloc_lock+0x8>)
 80063f2:	f000 bbf1 	b.w	8006bd8 <__retarget_lock_acquire_recursive>
 80063f6:	bf00      	nop
 80063f8:	20000828 	.word	0x20000828

080063fc <__malloc_unlock>:
 80063fc:	4801      	ldr	r0, [pc, #4]	; (8006404 <__malloc_unlock+0x8>)
 80063fe:	f000 bbec 	b.w	8006bda <__retarget_lock_release_recursive>
 8006402:	bf00      	nop
 8006404:	20000828 	.word	0x20000828

08006408 <__sfputc_r>:
 8006408:	6893      	ldr	r3, [r2, #8]
 800640a:	3b01      	subs	r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	b410      	push	{r4}
 8006410:	6093      	str	r3, [r2, #8]
 8006412:	da08      	bge.n	8006426 <__sfputc_r+0x1e>
 8006414:	6994      	ldr	r4, [r2, #24]
 8006416:	42a3      	cmp	r3, r4
 8006418:	db01      	blt.n	800641e <__sfputc_r+0x16>
 800641a:	290a      	cmp	r1, #10
 800641c:	d103      	bne.n	8006426 <__sfputc_r+0x1e>
 800641e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006422:	f000 b94b 	b.w	80066bc <__swbuf_r>
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	1c58      	adds	r0, r3, #1
 800642a:	6010      	str	r0, [r2, #0]
 800642c:	7019      	strb	r1, [r3, #0]
 800642e:	4608      	mov	r0, r1
 8006430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006434:	4770      	bx	lr

08006436 <__sfputs_r>:
 8006436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006438:	4606      	mov	r6, r0
 800643a:	460f      	mov	r7, r1
 800643c:	4614      	mov	r4, r2
 800643e:	18d5      	adds	r5, r2, r3
 8006440:	42ac      	cmp	r4, r5
 8006442:	d101      	bne.n	8006448 <__sfputs_r+0x12>
 8006444:	2000      	movs	r0, #0
 8006446:	e007      	b.n	8006458 <__sfputs_r+0x22>
 8006448:	f814 1b01 	ldrb.w	r1, [r4], #1
 800644c:	463a      	mov	r2, r7
 800644e:	4630      	mov	r0, r6
 8006450:	f7ff ffda 	bl	8006408 <__sfputc_r>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d1f3      	bne.n	8006440 <__sfputs_r+0xa>
 8006458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800645c <_vfiprintf_r>:
 800645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006460:	460d      	mov	r5, r1
 8006462:	b09d      	sub	sp, #116	; 0x74
 8006464:	4614      	mov	r4, r2
 8006466:	4698      	mov	r8, r3
 8006468:	4606      	mov	r6, r0
 800646a:	b118      	cbz	r0, 8006474 <_vfiprintf_r+0x18>
 800646c:	6983      	ldr	r3, [r0, #24]
 800646e:	b90b      	cbnz	r3, 8006474 <_vfiprintf_r+0x18>
 8006470:	f000 fb14 	bl	8006a9c <__sinit>
 8006474:	4b89      	ldr	r3, [pc, #548]	; (800669c <_vfiprintf_r+0x240>)
 8006476:	429d      	cmp	r5, r3
 8006478:	d11b      	bne.n	80064b2 <_vfiprintf_r+0x56>
 800647a:	6875      	ldr	r5, [r6, #4]
 800647c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800647e:	07d9      	lsls	r1, r3, #31
 8006480:	d405      	bmi.n	800648e <_vfiprintf_r+0x32>
 8006482:	89ab      	ldrh	r3, [r5, #12]
 8006484:	059a      	lsls	r2, r3, #22
 8006486:	d402      	bmi.n	800648e <_vfiprintf_r+0x32>
 8006488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800648a:	f000 fba5 	bl	8006bd8 <__retarget_lock_acquire_recursive>
 800648e:	89ab      	ldrh	r3, [r5, #12]
 8006490:	071b      	lsls	r3, r3, #28
 8006492:	d501      	bpl.n	8006498 <_vfiprintf_r+0x3c>
 8006494:	692b      	ldr	r3, [r5, #16]
 8006496:	b9eb      	cbnz	r3, 80064d4 <_vfiprintf_r+0x78>
 8006498:	4629      	mov	r1, r5
 800649a:	4630      	mov	r0, r6
 800649c:	f000 f96e 	bl	800677c <__swsetup_r>
 80064a0:	b1c0      	cbz	r0, 80064d4 <_vfiprintf_r+0x78>
 80064a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064a4:	07dc      	lsls	r4, r3, #31
 80064a6:	d50e      	bpl.n	80064c6 <_vfiprintf_r+0x6a>
 80064a8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ac:	b01d      	add	sp, #116	; 0x74
 80064ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b2:	4b7b      	ldr	r3, [pc, #492]	; (80066a0 <_vfiprintf_r+0x244>)
 80064b4:	429d      	cmp	r5, r3
 80064b6:	d101      	bne.n	80064bc <_vfiprintf_r+0x60>
 80064b8:	68b5      	ldr	r5, [r6, #8]
 80064ba:	e7df      	b.n	800647c <_vfiprintf_r+0x20>
 80064bc:	4b79      	ldr	r3, [pc, #484]	; (80066a4 <_vfiprintf_r+0x248>)
 80064be:	429d      	cmp	r5, r3
 80064c0:	bf08      	it	eq
 80064c2:	68f5      	ldreq	r5, [r6, #12]
 80064c4:	e7da      	b.n	800647c <_vfiprintf_r+0x20>
 80064c6:	89ab      	ldrh	r3, [r5, #12]
 80064c8:	0598      	lsls	r0, r3, #22
 80064ca:	d4ed      	bmi.n	80064a8 <_vfiprintf_r+0x4c>
 80064cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064ce:	f000 fb84 	bl	8006bda <__retarget_lock_release_recursive>
 80064d2:	e7e9      	b.n	80064a8 <_vfiprintf_r+0x4c>
 80064d4:	2300      	movs	r3, #0
 80064d6:	9309      	str	r3, [sp, #36]	; 0x24
 80064d8:	2320      	movs	r3, #32
 80064da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064de:	f8cd 800c 	str.w	r8, [sp, #12]
 80064e2:	2330      	movs	r3, #48	; 0x30
 80064e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80066a8 <_vfiprintf_r+0x24c>
 80064e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ec:	f04f 0901 	mov.w	r9, #1
 80064f0:	4623      	mov	r3, r4
 80064f2:	469a      	mov	sl, r3
 80064f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064f8:	b10a      	cbz	r2, 80064fe <_vfiprintf_r+0xa2>
 80064fa:	2a25      	cmp	r2, #37	; 0x25
 80064fc:	d1f9      	bne.n	80064f2 <_vfiprintf_r+0x96>
 80064fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006502:	d00b      	beq.n	800651c <_vfiprintf_r+0xc0>
 8006504:	465b      	mov	r3, fp
 8006506:	4622      	mov	r2, r4
 8006508:	4629      	mov	r1, r5
 800650a:	4630      	mov	r0, r6
 800650c:	f7ff ff93 	bl	8006436 <__sfputs_r>
 8006510:	3001      	adds	r0, #1
 8006512:	f000 80aa 	beq.w	800666a <_vfiprintf_r+0x20e>
 8006516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006518:	445a      	add	r2, fp
 800651a:	9209      	str	r2, [sp, #36]	; 0x24
 800651c:	f89a 3000 	ldrb.w	r3, [sl]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 80a2 	beq.w	800666a <_vfiprintf_r+0x20e>
 8006526:	2300      	movs	r3, #0
 8006528:	f04f 32ff 	mov.w	r2, #4294967295
 800652c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006530:	f10a 0a01 	add.w	sl, sl, #1
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	9307      	str	r3, [sp, #28]
 8006538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800653c:	931a      	str	r3, [sp, #104]	; 0x68
 800653e:	4654      	mov	r4, sl
 8006540:	2205      	movs	r2, #5
 8006542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006546:	4858      	ldr	r0, [pc, #352]	; (80066a8 <_vfiprintf_r+0x24c>)
 8006548:	f7f9 fe5a 	bl	8000200 <memchr>
 800654c:	9a04      	ldr	r2, [sp, #16]
 800654e:	b9d8      	cbnz	r0, 8006588 <_vfiprintf_r+0x12c>
 8006550:	06d1      	lsls	r1, r2, #27
 8006552:	bf44      	itt	mi
 8006554:	2320      	movmi	r3, #32
 8006556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800655a:	0713      	lsls	r3, r2, #28
 800655c:	bf44      	itt	mi
 800655e:	232b      	movmi	r3, #43	; 0x2b
 8006560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006564:	f89a 3000 	ldrb.w	r3, [sl]
 8006568:	2b2a      	cmp	r3, #42	; 0x2a
 800656a:	d015      	beq.n	8006598 <_vfiprintf_r+0x13c>
 800656c:	9a07      	ldr	r2, [sp, #28]
 800656e:	4654      	mov	r4, sl
 8006570:	2000      	movs	r0, #0
 8006572:	f04f 0c0a 	mov.w	ip, #10
 8006576:	4621      	mov	r1, r4
 8006578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800657c:	3b30      	subs	r3, #48	; 0x30
 800657e:	2b09      	cmp	r3, #9
 8006580:	d94e      	bls.n	8006620 <_vfiprintf_r+0x1c4>
 8006582:	b1b0      	cbz	r0, 80065b2 <_vfiprintf_r+0x156>
 8006584:	9207      	str	r2, [sp, #28]
 8006586:	e014      	b.n	80065b2 <_vfiprintf_r+0x156>
 8006588:	eba0 0308 	sub.w	r3, r0, r8
 800658c:	fa09 f303 	lsl.w	r3, r9, r3
 8006590:	4313      	orrs	r3, r2
 8006592:	9304      	str	r3, [sp, #16]
 8006594:	46a2      	mov	sl, r4
 8006596:	e7d2      	b.n	800653e <_vfiprintf_r+0xe2>
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	1d19      	adds	r1, r3, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	9103      	str	r1, [sp, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bfbb      	ittet	lt
 80065a4:	425b      	neglt	r3, r3
 80065a6:	f042 0202 	orrlt.w	r2, r2, #2
 80065aa:	9307      	strge	r3, [sp, #28]
 80065ac:	9307      	strlt	r3, [sp, #28]
 80065ae:	bfb8      	it	lt
 80065b0:	9204      	strlt	r2, [sp, #16]
 80065b2:	7823      	ldrb	r3, [r4, #0]
 80065b4:	2b2e      	cmp	r3, #46	; 0x2e
 80065b6:	d10c      	bne.n	80065d2 <_vfiprintf_r+0x176>
 80065b8:	7863      	ldrb	r3, [r4, #1]
 80065ba:	2b2a      	cmp	r3, #42	; 0x2a
 80065bc:	d135      	bne.n	800662a <_vfiprintf_r+0x1ce>
 80065be:	9b03      	ldr	r3, [sp, #12]
 80065c0:	1d1a      	adds	r2, r3, #4
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	9203      	str	r2, [sp, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bfb8      	it	lt
 80065ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80065ce:	3402      	adds	r4, #2
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80066b8 <_vfiprintf_r+0x25c>
 80065d6:	7821      	ldrb	r1, [r4, #0]
 80065d8:	2203      	movs	r2, #3
 80065da:	4650      	mov	r0, sl
 80065dc:	f7f9 fe10 	bl	8000200 <memchr>
 80065e0:	b140      	cbz	r0, 80065f4 <_vfiprintf_r+0x198>
 80065e2:	2340      	movs	r3, #64	; 0x40
 80065e4:	eba0 000a 	sub.w	r0, r0, sl
 80065e8:	fa03 f000 	lsl.w	r0, r3, r0
 80065ec:	9b04      	ldr	r3, [sp, #16]
 80065ee:	4303      	orrs	r3, r0
 80065f0:	3401      	adds	r4, #1
 80065f2:	9304      	str	r3, [sp, #16]
 80065f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f8:	482c      	ldr	r0, [pc, #176]	; (80066ac <_vfiprintf_r+0x250>)
 80065fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065fe:	2206      	movs	r2, #6
 8006600:	f7f9 fdfe 	bl	8000200 <memchr>
 8006604:	2800      	cmp	r0, #0
 8006606:	d03f      	beq.n	8006688 <_vfiprintf_r+0x22c>
 8006608:	4b29      	ldr	r3, [pc, #164]	; (80066b0 <_vfiprintf_r+0x254>)
 800660a:	bb1b      	cbnz	r3, 8006654 <_vfiprintf_r+0x1f8>
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	3307      	adds	r3, #7
 8006610:	f023 0307 	bic.w	r3, r3, #7
 8006614:	3308      	adds	r3, #8
 8006616:	9303      	str	r3, [sp, #12]
 8006618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661a:	443b      	add	r3, r7
 800661c:	9309      	str	r3, [sp, #36]	; 0x24
 800661e:	e767      	b.n	80064f0 <_vfiprintf_r+0x94>
 8006620:	fb0c 3202 	mla	r2, ip, r2, r3
 8006624:	460c      	mov	r4, r1
 8006626:	2001      	movs	r0, #1
 8006628:	e7a5      	b.n	8006576 <_vfiprintf_r+0x11a>
 800662a:	2300      	movs	r3, #0
 800662c:	3401      	adds	r4, #1
 800662e:	9305      	str	r3, [sp, #20]
 8006630:	4619      	mov	r1, r3
 8006632:	f04f 0c0a 	mov.w	ip, #10
 8006636:	4620      	mov	r0, r4
 8006638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800663c:	3a30      	subs	r2, #48	; 0x30
 800663e:	2a09      	cmp	r2, #9
 8006640:	d903      	bls.n	800664a <_vfiprintf_r+0x1ee>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0c5      	beq.n	80065d2 <_vfiprintf_r+0x176>
 8006646:	9105      	str	r1, [sp, #20]
 8006648:	e7c3      	b.n	80065d2 <_vfiprintf_r+0x176>
 800664a:	fb0c 2101 	mla	r1, ip, r1, r2
 800664e:	4604      	mov	r4, r0
 8006650:	2301      	movs	r3, #1
 8006652:	e7f0      	b.n	8006636 <_vfiprintf_r+0x1da>
 8006654:	ab03      	add	r3, sp, #12
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	462a      	mov	r2, r5
 800665a:	4b16      	ldr	r3, [pc, #88]	; (80066b4 <_vfiprintf_r+0x258>)
 800665c:	a904      	add	r1, sp, #16
 800665e:	4630      	mov	r0, r6
 8006660:	f7fd ff9a 	bl	8004598 <_printf_float>
 8006664:	4607      	mov	r7, r0
 8006666:	1c78      	adds	r0, r7, #1
 8006668:	d1d6      	bne.n	8006618 <_vfiprintf_r+0x1bc>
 800666a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800666c:	07d9      	lsls	r1, r3, #31
 800666e:	d405      	bmi.n	800667c <_vfiprintf_r+0x220>
 8006670:	89ab      	ldrh	r3, [r5, #12]
 8006672:	059a      	lsls	r2, r3, #22
 8006674:	d402      	bmi.n	800667c <_vfiprintf_r+0x220>
 8006676:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006678:	f000 faaf 	bl	8006bda <__retarget_lock_release_recursive>
 800667c:	89ab      	ldrh	r3, [r5, #12]
 800667e:	065b      	lsls	r3, r3, #25
 8006680:	f53f af12 	bmi.w	80064a8 <_vfiprintf_r+0x4c>
 8006684:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006686:	e711      	b.n	80064ac <_vfiprintf_r+0x50>
 8006688:	ab03      	add	r3, sp, #12
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	462a      	mov	r2, r5
 800668e:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <_vfiprintf_r+0x258>)
 8006690:	a904      	add	r1, sp, #16
 8006692:	4630      	mov	r0, r6
 8006694:	f7fe fa24 	bl	8004ae0 <_printf_i>
 8006698:	e7e4      	b.n	8006664 <_vfiprintf_r+0x208>
 800669a:	bf00      	nop
 800669c:	08007a54 	.word	0x08007a54
 80066a0:	08007a74 	.word	0x08007a74
 80066a4:	08007a34 	.word	0x08007a34
 80066a8:	08007922 	.word	0x08007922
 80066ac:	0800792c 	.word	0x0800792c
 80066b0:	08004599 	.word	0x08004599
 80066b4:	08006437 	.word	0x08006437
 80066b8:	08007928 	.word	0x08007928

080066bc <__swbuf_r>:
 80066bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066be:	460e      	mov	r6, r1
 80066c0:	4614      	mov	r4, r2
 80066c2:	4605      	mov	r5, r0
 80066c4:	b118      	cbz	r0, 80066ce <__swbuf_r+0x12>
 80066c6:	6983      	ldr	r3, [r0, #24]
 80066c8:	b90b      	cbnz	r3, 80066ce <__swbuf_r+0x12>
 80066ca:	f000 f9e7 	bl	8006a9c <__sinit>
 80066ce:	4b21      	ldr	r3, [pc, #132]	; (8006754 <__swbuf_r+0x98>)
 80066d0:	429c      	cmp	r4, r3
 80066d2:	d12b      	bne.n	800672c <__swbuf_r+0x70>
 80066d4:	686c      	ldr	r4, [r5, #4]
 80066d6:	69a3      	ldr	r3, [r4, #24]
 80066d8:	60a3      	str	r3, [r4, #8]
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	071a      	lsls	r2, r3, #28
 80066de:	d52f      	bpl.n	8006740 <__swbuf_r+0x84>
 80066e0:	6923      	ldr	r3, [r4, #16]
 80066e2:	b36b      	cbz	r3, 8006740 <__swbuf_r+0x84>
 80066e4:	6923      	ldr	r3, [r4, #16]
 80066e6:	6820      	ldr	r0, [r4, #0]
 80066e8:	1ac0      	subs	r0, r0, r3
 80066ea:	6963      	ldr	r3, [r4, #20]
 80066ec:	b2f6      	uxtb	r6, r6
 80066ee:	4283      	cmp	r3, r0
 80066f0:	4637      	mov	r7, r6
 80066f2:	dc04      	bgt.n	80066fe <__swbuf_r+0x42>
 80066f4:	4621      	mov	r1, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 f93c 	bl	8006974 <_fflush_r>
 80066fc:	bb30      	cbnz	r0, 800674c <__swbuf_r+0x90>
 80066fe:	68a3      	ldr	r3, [r4, #8]
 8006700:	3b01      	subs	r3, #1
 8006702:	60a3      	str	r3, [r4, #8]
 8006704:	6823      	ldr	r3, [r4, #0]
 8006706:	1c5a      	adds	r2, r3, #1
 8006708:	6022      	str	r2, [r4, #0]
 800670a:	701e      	strb	r6, [r3, #0]
 800670c:	6963      	ldr	r3, [r4, #20]
 800670e:	3001      	adds	r0, #1
 8006710:	4283      	cmp	r3, r0
 8006712:	d004      	beq.n	800671e <__swbuf_r+0x62>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	07db      	lsls	r3, r3, #31
 8006718:	d506      	bpl.n	8006728 <__swbuf_r+0x6c>
 800671a:	2e0a      	cmp	r6, #10
 800671c:	d104      	bne.n	8006728 <__swbuf_r+0x6c>
 800671e:	4621      	mov	r1, r4
 8006720:	4628      	mov	r0, r5
 8006722:	f000 f927 	bl	8006974 <_fflush_r>
 8006726:	b988      	cbnz	r0, 800674c <__swbuf_r+0x90>
 8006728:	4638      	mov	r0, r7
 800672a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <__swbuf_r+0x9c>)
 800672e:	429c      	cmp	r4, r3
 8006730:	d101      	bne.n	8006736 <__swbuf_r+0x7a>
 8006732:	68ac      	ldr	r4, [r5, #8]
 8006734:	e7cf      	b.n	80066d6 <__swbuf_r+0x1a>
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <__swbuf_r+0xa0>)
 8006738:	429c      	cmp	r4, r3
 800673a:	bf08      	it	eq
 800673c:	68ec      	ldreq	r4, [r5, #12]
 800673e:	e7ca      	b.n	80066d6 <__swbuf_r+0x1a>
 8006740:	4621      	mov	r1, r4
 8006742:	4628      	mov	r0, r5
 8006744:	f000 f81a 	bl	800677c <__swsetup_r>
 8006748:	2800      	cmp	r0, #0
 800674a:	d0cb      	beq.n	80066e4 <__swbuf_r+0x28>
 800674c:	f04f 37ff 	mov.w	r7, #4294967295
 8006750:	e7ea      	b.n	8006728 <__swbuf_r+0x6c>
 8006752:	bf00      	nop
 8006754:	08007a54 	.word	0x08007a54
 8006758:	08007a74 	.word	0x08007a74
 800675c:	08007a34 	.word	0x08007a34

08006760 <__ascii_wctomb>:
 8006760:	b149      	cbz	r1, 8006776 <__ascii_wctomb+0x16>
 8006762:	2aff      	cmp	r2, #255	; 0xff
 8006764:	bf85      	ittet	hi
 8006766:	238a      	movhi	r3, #138	; 0x8a
 8006768:	6003      	strhi	r3, [r0, #0]
 800676a:	700a      	strbls	r2, [r1, #0]
 800676c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006770:	bf98      	it	ls
 8006772:	2001      	movls	r0, #1
 8006774:	4770      	bx	lr
 8006776:	4608      	mov	r0, r1
 8006778:	4770      	bx	lr
	...

0800677c <__swsetup_r>:
 800677c:	4b32      	ldr	r3, [pc, #200]	; (8006848 <__swsetup_r+0xcc>)
 800677e:	b570      	push	{r4, r5, r6, lr}
 8006780:	681d      	ldr	r5, [r3, #0]
 8006782:	4606      	mov	r6, r0
 8006784:	460c      	mov	r4, r1
 8006786:	b125      	cbz	r5, 8006792 <__swsetup_r+0x16>
 8006788:	69ab      	ldr	r3, [r5, #24]
 800678a:	b913      	cbnz	r3, 8006792 <__swsetup_r+0x16>
 800678c:	4628      	mov	r0, r5
 800678e:	f000 f985 	bl	8006a9c <__sinit>
 8006792:	4b2e      	ldr	r3, [pc, #184]	; (800684c <__swsetup_r+0xd0>)
 8006794:	429c      	cmp	r4, r3
 8006796:	d10f      	bne.n	80067b8 <__swsetup_r+0x3c>
 8006798:	686c      	ldr	r4, [r5, #4]
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067a0:	0719      	lsls	r1, r3, #28
 80067a2:	d42c      	bmi.n	80067fe <__swsetup_r+0x82>
 80067a4:	06dd      	lsls	r5, r3, #27
 80067a6:	d411      	bmi.n	80067cc <__swsetup_r+0x50>
 80067a8:	2309      	movs	r3, #9
 80067aa:	6033      	str	r3, [r6, #0]
 80067ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067b0:	81a3      	strh	r3, [r4, #12]
 80067b2:	f04f 30ff 	mov.w	r0, #4294967295
 80067b6:	e03e      	b.n	8006836 <__swsetup_r+0xba>
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <__swsetup_r+0xd4>)
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d101      	bne.n	80067c2 <__swsetup_r+0x46>
 80067be:	68ac      	ldr	r4, [r5, #8]
 80067c0:	e7eb      	b.n	800679a <__swsetup_r+0x1e>
 80067c2:	4b24      	ldr	r3, [pc, #144]	; (8006854 <__swsetup_r+0xd8>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	bf08      	it	eq
 80067c8:	68ec      	ldreq	r4, [r5, #12]
 80067ca:	e7e6      	b.n	800679a <__swsetup_r+0x1e>
 80067cc:	0758      	lsls	r0, r3, #29
 80067ce:	d512      	bpl.n	80067f6 <__swsetup_r+0x7a>
 80067d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067d2:	b141      	cbz	r1, 80067e6 <__swsetup_r+0x6a>
 80067d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d8:	4299      	cmp	r1, r3
 80067da:	d002      	beq.n	80067e2 <__swsetup_r+0x66>
 80067dc:	4630      	mov	r0, r6
 80067de:	f7ff fcd5 	bl	800618c <_free_r>
 80067e2:	2300      	movs	r3, #0
 80067e4:	6363      	str	r3, [r4, #52]	; 0x34
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	2300      	movs	r3, #0
 80067f0:	6063      	str	r3, [r4, #4]
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	f043 0308 	orr.w	r3, r3, #8
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	6923      	ldr	r3, [r4, #16]
 8006800:	b94b      	cbnz	r3, 8006816 <__swsetup_r+0x9a>
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800680c:	d003      	beq.n	8006816 <__swsetup_r+0x9a>
 800680e:	4621      	mov	r1, r4
 8006810:	4630      	mov	r0, r6
 8006812:	f000 fa09 	bl	8006c28 <__smakebuf_r>
 8006816:	89a0      	ldrh	r0, [r4, #12]
 8006818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800681c:	f010 0301 	ands.w	r3, r0, #1
 8006820:	d00a      	beq.n	8006838 <__swsetup_r+0xbc>
 8006822:	2300      	movs	r3, #0
 8006824:	60a3      	str	r3, [r4, #8]
 8006826:	6963      	ldr	r3, [r4, #20]
 8006828:	425b      	negs	r3, r3
 800682a:	61a3      	str	r3, [r4, #24]
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	b943      	cbnz	r3, 8006842 <__swsetup_r+0xc6>
 8006830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006834:	d1ba      	bne.n	80067ac <__swsetup_r+0x30>
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	0781      	lsls	r1, r0, #30
 800683a:	bf58      	it	pl
 800683c:	6963      	ldrpl	r3, [r4, #20]
 800683e:	60a3      	str	r3, [r4, #8]
 8006840:	e7f4      	b.n	800682c <__swsetup_r+0xb0>
 8006842:	2000      	movs	r0, #0
 8006844:	e7f7      	b.n	8006836 <__swsetup_r+0xba>
 8006846:	bf00      	nop
 8006848:	20000034 	.word	0x20000034
 800684c:	08007a54 	.word	0x08007a54
 8006850:	08007a74 	.word	0x08007a74
 8006854:	08007a34 	.word	0x08007a34

08006858 <abort>:
 8006858:	b508      	push	{r3, lr}
 800685a:	2006      	movs	r0, #6
 800685c:	f000 fa4c 	bl	8006cf8 <raise>
 8006860:	2001      	movs	r0, #1
 8006862:	f7fa ff4b 	bl	80016fc <_exit>
	...

08006868 <__sflush_r>:
 8006868:	898a      	ldrh	r2, [r1, #12]
 800686a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800686e:	4605      	mov	r5, r0
 8006870:	0710      	lsls	r0, r2, #28
 8006872:	460c      	mov	r4, r1
 8006874:	d458      	bmi.n	8006928 <__sflush_r+0xc0>
 8006876:	684b      	ldr	r3, [r1, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	dc05      	bgt.n	8006888 <__sflush_r+0x20>
 800687c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	dc02      	bgt.n	8006888 <__sflush_r+0x20>
 8006882:	2000      	movs	r0, #0
 8006884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800688a:	2e00      	cmp	r6, #0
 800688c:	d0f9      	beq.n	8006882 <__sflush_r+0x1a>
 800688e:	2300      	movs	r3, #0
 8006890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006894:	682f      	ldr	r7, [r5, #0]
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	d032      	beq.n	8006900 <__sflush_r+0x98>
 800689a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800689c:	89a3      	ldrh	r3, [r4, #12]
 800689e:	075a      	lsls	r2, r3, #29
 80068a0:	d505      	bpl.n	80068ae <__sflush_r+0x46>
 80068a2:	6863      	ldr	r3, [r4, #4]
 80068a4:	1ac0      	subs	r0, r0, r3
 80068a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068a8:	b10b      	cbz	r3, 80068ae <__sflush_r+0x46>
 80068aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068ac:	1ac0      	subs	r0, r0, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	4602      	mov	r2, r0
 80068b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068b4:	6a21      	ldr	r1, [r4, #32]
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b0      	blx	r6
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	d106      	bne.n	80068ce <__sflush_r+0x66>
 80068c0:	6829      	ldr	r1, [r5, #0]
 80068c2:	291d      	cmp	r1, #29
 80068c4:	d82c      	bhi.n	8006920 <__sflush_r+0xb8>
 80068c6:	4a2a      	ldr	r2, [pc, #168]	; (8006970 <__sflush_r+0x108>)
 80068c8:	40ca      	lsrs	r2, r1
 80068ca:	07d6      	lsls	r6, r2, #31
 80068cc:	d528      	bpl.n	8006920 <__sflush_r+0xb8>
 80068ce:	2200      	movs	r2, #0
 80068d0:	6062      	str	r2, [r4, #4]
 80068d2:	04d9      	lsls	r1, r3, #19
 80068d4:	6922      	ldr	r2, [r4, #16]
 80068d6:	6022      	str	r2, [r4, #0]
 80068d8:	d504      	bpl.n	80068e4 <__sflush_r+0x7c>
 80068da:	1c42      	adds	r2, r0, #1
 80068dc:	d101      	bne.n	80068e2 <__sflush_r+0x7a>
 80068de:	682b      	ldr	r3, [r5, #0]
 80068e0:	b903      	cbnz	r3, 80068e4 <__sflush_r+0x7c>
 80068e2:	6560      	str	r0, [r4, #84]	; 0x54
 80068e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068e6:	602f      	str	r7, [r5, #0]
 80068e8:	2900      	cmp	r1, #0
 80068ea:	d0ca      	beq.n	8006882 <__sflush_r+0x1a>
 80068ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068f0:	4299      	cmp	r1, r3
 80068f2:	d002      	beq.n	80068fa <__sflush_r+0x92>
 80068f4:	4628      	mov	r0, r5
 80068f6:	f7ff fc49 	bl	800618c <_free_r>
 80068fa:	2000      	movs	r0, #0
 80068fc:	6360      	str	r0, [r4, #52]	; 0x34
 80068fe:	e7c1      	b.n	8006884 <__sflush_r+0x1c>
 8006900:	6a21      	ldr	r1, [r4, #32]
 8006902:	2301      	movs	r3, #1
 8006904:	4628      	mov	r0, r5
 8006906:	47b0      	blx	r6
 8006908:	1c41      	adds	r1, r0, #1
 800690a:	d1c7      	bne.n	800689c <__sflush_r+0x34>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0c4      	beq.n	800689c <__sflush_r+0x34>
 8006912:	2b1d      	cmp	r3, #29
 8006914:	d001      	beq.n	800691a <__sflush_r+0xb2>
 8006916:	2b16      	cmp	r3, #22
 8006918:	d101      	bne.n	800691e <__sflush_r+0xb6>
 800691a:	602f      	str	r7, [r5, #0]
 800691c:	e7b1      	b.n	8006882 <__sflush_r+0x1a>
 800691e:	89a3      	ldrh	r3, [r4, #12]
 8006920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	e7ad      	b.n	8006884 <__sflush_r+0x1c>
 8006928:	690f      	ldr	r7, [r1, #16]
 800692a:	2f00      	cmp	r7, #0
 800692c:	d0a9      	beq.n	8006882 <__sflush_r+0x1a>
 800692e:	0793      	lsls	r3, r2, #30
 8006930:	680e      	ldr	r6, [r1, #0]
 8006932:	bf08      	it	eq
 8006934:	694b      	ldreq	r3, [r1, #20]
 8006936:	600f      	str	r7, [r1, #0]
 8006938:	bf18      	it	ne
 800693a:	2300      	movne	r3, #0
 800693c:	eba6 0807 	sub.w	r8, r6, r7
 8006940:	608b      	str	r3, [r1, #8]
 8006942:	f1b8 0f00 	cmp.w	r8, #0
 8006946:	dd9c      	ble.n	8006882 <__sflush_r+0x1a>
 8006948:	6a21      	ldr	r1, [r4, #32]
 800694a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800694c:	4643      	mov	r3, r8
 800694e:	463a      	mov	r2, r7
 8006950:	4628      	mov	r0, r5
 8006952:	47b0      	blx	r6
 8006954:	2800      	cmp	r0, #0
 8006956:	dc06      	bgt.n	8006966 <__sflush_r+0xfe>
 8006958:	89a3      	ldrh	r3, [r4, #12]
 800695a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800695e:	81a3      	strh	r3, [r4, #12]
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	e78e      	b.n	8006884 <__sflush_r+0x1c>
 8006966:	4407      	add	r7, r0
 8006968:	eba8 0800 	sub.w	r8, r8, r0
 800696c:	e7e9      	b.n	8006942 <__sflush_r+0xda>
 800696e:	bf00      	nop
 8006970:	20400001 	.word	0x20400001

08006974 <_fflush_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	690b      	ldr	r3, [r1, #16]
 8006978:	4605      	mov	r5, r0
 800697a:	460c      	mov	r4, r1
 800697c:	b913      	cbnz	r3, 8006984 <_fflush_r+0x10>
 800697e:	2500      	movs	r5, #0
 8006980:	4628      	mov	r0, r5
 8006982:	bd38      	pop	{r3, r4, r5, pc}
 8006984:	b118      	cbz	r0, 800698e <_fflush_r+0x1a>
 8006986:	6983      	ldr	r3, [r0, #24]
 8006988:	b90b      	cbnz	r3, 800698e <_fflush_r+0x1a>
 800698a:	f000 f887 	bl	8006a9c <__sinit>
 800698e:	4b14      	ldr	r3, [pc, #80]	; (80069e0 <_fflush_r+0x6c>)
 8006990:	429c      	cmp	r4, r3
 8006992:	d11b      	bne.n	80069cc <_fflush_r+0x58>
 8006994:	686c      	ldr	r4, [r5, #4]
 8006996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0ef      	beq.n	800697e <_fflush_r+0xa>
 800699e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069a0:	07d0      	lsls	r0, r2, #31
 80069a2:	d404      	bmi.n	80069ae <_fflush_r+0x3a>
 80069a4:	0599      	lsls	r1, r3, #22
 80069a6:	d402      	bmi.n	80069ae <_fflush_r+0x3a>
 80069a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069aa:	f000 f915 	bl	8006bd8 <__retarget_lock_acquire_recursive>
 80069ae:	4628      	mov	r0, r5
 80069b0:	4621      	mov	r1, r4
 80069b2:	f7ff ff59 	bl	8006868 <__sflush_r>
 80069b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069b8:	07da      	lsls	r2, r3, #31
 80069ba:	4605      	mov	r5, r0
 80069bc:	d4e0      	bmi.n	8006980 <_fflush_r+0xc>
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	059b      	lsls	r3, r3, #22
 80069c2:	d4dd      	bmi.n	8006980 <_fflush_r+0xc>
 80069c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069c6:	f000 f908 	bl	8006bda <__retarget_lock_release_recursive>
 80069ca:	e7d9      	b.n	8006980 <_fflush_r+0xc>
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <_fflush_r+0x70>)
 80069ce:	429c      	cmp	r4, r3
 80069d0:	d101      	bne.n	80069d6 <_fflush_r+0x62>
 80069d2:	68ac      	ldr	r4, [r5, #8]
 80069d4:	e7df      	b.n	8006996 <_fflush_r+0x22>
 80069d6:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <_fflush_r+0x74>)
 80069d8:	429c      	cmp	r4, r3
 80069da:	bf08      	it	eq
 80069dc:	68ec      	ldreq	r4, [r5, #12]
 80069de:	e7da      	b.n	8006996 <_fflush_r+0x22>
 80069e0:	08007a54 	.word	0x08007a54
 80069e4:	08007a74 	.word	0x08007a74
 80069e8:	08007a34 	.word	0x08007a34

080069ec <std>:
 80069ec:	2300      	movs	r3, #0
 80069ee:	b510      	push	{r4, lr}
 80069f0:	4604      	mov	r4, r0
 80069f2:	e9c0 3300 	strd	r3, r3, [r0]
 80069f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069fa:	6083      	str	r3, [r0, #8]
 80069fc:	8181      	strh	r1, [r0, #12]
 80069fe:	6643      	str	r3, [r0, #100]	; 0x64
 8006a00:	81c2      	strh	r2, [r0, #14]
 8006a02:	6183      	str	r3, [r0, #24]
 8006a04:	4619      	mov	r1, r3
 8006a06:	2208      	movs	r2, #8
 8006a08:	305c      	adds	r0, #92	; 0x5c
 8006a0a:	f7fd fd1d 	bl	8004448 <memset>
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <std+0x38>)
 8006a10:	6263      	str	r3, [r4, #36]	; 0x24
 8006a12:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <std+0x3c>)
 8006a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a16:	4b05      	ldr	r3, [pc, #20]	; (8006a2c <std+0x40>)
 8006a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <std+0x44>)
 8006a1c:	6224      	str	r4, [r4, #32]
 8006a1e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a20:	bd10      	pop	{r4, pc}
 8006a22:	bf00      	nop
 8006a24:	08006d31 	.word	0x08006d31
 8006a28:	08006d53 	.word	0x08006d53
 8006a2c:	08006d8b 	.word	0x08006d8b
 8006a30:	08006daf 	.word	0x08006daf

08006a34 <_cleanup_r>:
 8006a34:	4901      	ldr	r1, [pc, #4]	; (8006a3c <_cleanup_r+0x8>)
 8006a36:	f000 b8af 	b.w	8006b98 <_fwalk_reent>
 8006a3a:	bf00      	nop
 8006a3c:	08006975 	.word	0x08006975

08006a40 <__sfmoreglue>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	2268      	movs	r2, #104	; 0x68
 8006a44:	1e4d      	subs	r5, r1, #1
 8006a46:	4355      	muls	r5, r2
 8006a48:	460e      	mov	r6, r1
 8006a4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a4e:	f7ff fc09 	bl	8006264 <_malloc_r>
 8006a52:	4604      	mov	r4, r0
 8006a54:	b140      	cbz	r0, 8006a68 <__sfmoreglue+0x28>
 8006a56:	2100      	movs	r1, #0
 8006a58:	e9c0 1600 	strd	r1, r6, [r0]
 8006a5c:	300c      	adds	r0, #12
 8006a5e:	60a0      	str	r0, [r4, #8]
 8006a60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a64:	f7fd fcf0 	bl	8004448 <memset>
 8006a68:	4620      	mov	r0, r4
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}

08006a6c <__sfp_lock_acquire>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	; (8006a74 <__sfp_lock_acquire+0x8>)
 8006a6e:	f000 b8b3 	b.w	8006bd8 <__retarget_lock_acquire_recursive>
 8006a72:	bf00      	nop
 8006a74:	20000829 	.word	0x20000829

08006a78 <__sfp_lock_release>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__sfp_lock_release+0x8>)
 8006a7a:	f000 b8ae 	b.w	8006bda <__retarget_lock_release_recursive>
 8006a7e:	bf00      	nop
 8006a80:	20000829 	.word	0x20000829

08006a84 <__sinit_lock_acquire>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__sinit_lock_acquire+0x8>)
 8006a86:	f000 b8a7 	b.w	8006bd8 <__retarget_lock_acquire_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	2000082a 	.word	0x2000082a

08006a90 <__sinit_lock_release>:
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <__sinit_lock_release+0x8>)
 8006a92:	f000 b8a2 	b.w	8006bda <__retarget_lock_release_recursive>
 8006a96:	bf00      	nop
 8006a98:	2000082a 	.word	0x2000082a

08006a9c <__sinit>:
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	f7ff fff0 	bl	8006a84 <__sinit_lock_acquire>
 8006aa4:	69a3      	ldr	r3, [r4, #24]
 8006aa6:	b11b      	cbz	r3, 8006ab0 <__sinit+0x14>
 8006aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aac:	f7ff bff0 	b.w	8006a90 <__sinit_lock_release>
 8006ab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ab4:	6523      	str	r3, [r4, #80]	; 0x50
 8006ab6:	4b13      	ldr	r3, [pc, #76]	; (8006b04 <__sinit+0x68>)
 8006ab8:	4a13      	ldr	r2, [pc, #76]	; (8006b08 <__sinit+0x6c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006abe:	42a3      	cmp	r3, r4
 8006ac0:	bf04      	itt	eq
 8006ac2:	2301      	moveq	r3, #1
 8006ac4:	61a3      	streq	r3, [r4, #24]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 f820 	bl	8006b0c <__sfp>
 8006acc:	6060      	str	r0, [r4, #4]
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 f81c 	bl	8006b0c <__sfp>
 8006ad4:	60a0      	str	r0, [r4, #8]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f000 f818 	bl	8006b0c <__sfp>
 8006adc:	2200      	movs	r2, #0
 8006ade:	60e0      	str	r0, [r4, #12]
 8006ae0:	2104      	movs	r1, #4
 8006ae2:	6860      	ldr	r0, [r4, #4]
 8006ae4:	f7ff ff82 	bl	80069ec <std>
 8006ae8:	68a0      	ldr	r0, [r4, #8]
 8006aea:	2201      	movs	r2, #1
 8006aec:	2109      	movs	r1, #9
 8006aee:	f7ff ff7d 	bl	80069ec <std>
 8006af2:	68e0      	ldr	r0, [r4, #12]
 8006af4:	2202      	movs	r2, #2
 8006af6:	2112      	movs	r1, #18
 8006af8:	f7ff ff78 	bl	80069ec <std>
 8006afc:	2301      	movs	r3, #1
 8006afe:	61a3      	str	r3, [r4, #24]
 8006b00:	e7d2      	b.n	8006aa8 <__sinit+0xc>
 8006b02:	bf00      	nop
 8006b04:	080076bc 	.word	0x080076bc
 8006b08:	08006a35 	.word	0x08006a35

08006b0c <__sfp>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	4607      	mov	r7, r0
 8006b10:	f7ff ffac 	bl	8006a6c <__sfp_lock_acquire>
 8006b14:	4b1e      	ldr	r3, [pc, #120]	; (8006b90 <__sfp+0x84>)
 8006b16:	681e      	ldr	r6, [r3, #0]
 8006b18:	69b3      	ldr	r3, [r6, #24]
 8006b1a:	b913      	cbnz	r3, 8006b22 <__sfp+0x16>
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff ffbd 	bl	8006a9c <__sinit>
 8006b22:	3648      	adds	r6, #72	; 0x48
 8006b24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	d503      	bpl.n	8006b34 <__sfp+0x28>
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	b30b      	cbz	r3, 8006b74 <__sfp+0x68>
 8006b30:	6836      	ldr	r6, [r6, #0]
 8006b32:	e7f7      	b.n	8006b24 <__sfp+0x18>
 8006b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b38:	b9d5      	cbnz	r5, 8006b70 <__sfp+0x64>
 8006b3a:	4b16      	ldr	r3, [pc, #88]	; (8006b94 <__sfp+0x88>)
 8006b3c:	60e3      	str	r3, [r4, #12]
 8006b3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b42:	6665      	str	r5, [r4, #100]	; 0x64
 8006b44:	f000 f847 	bl	8006bd6 <__retarget_lock_init_recursive>
 8006b48:	f7ff ff96 	bl	8006a78 <__sfp_lock_release>
 8006b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b54:	6025      	str	r5, [r4, #0]
 8006b56:	61a5      	str	r5, [r4, #24]
 8006b58:	2208      	movs	r2, #8
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b60:	f7fd fc72 	bl	8004448 <memset>
 8006b64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b70:	3468      	adds	r4, #104	; 0x68
 8006b72:	e7d9      	b.n	8006b28 <__sfp+0x1c>
 8006b74:	2104      	movs	r1, #4
 8006b76:	4638      	mov	r0, r7
 8006b78:	f7ff ff62 	bl	8006a40 <__sfmoreglue>
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	6030      	str	r0, [r6, #0]
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d1d5      	bne.n	8006b30 <__sfp+0x24>
 8006b84:	f7ff ff78 	bl	8006a78 <__sfp_lock_release>
 8006b88:	230c      	movs	r3, #12
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	e7ee      	b.n	8006b6c <__sfp+0x60>
 8006b8e:	bf00      	nop
 8006b90:	080076bc 	.word	0x080076bc
 8006b94:	ffff0001 	.word	0xffff0001

08006b98 <_fwalk_reent>:
 8006b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	4688      	mov	r8, r1
 8006ba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ba4:	2700      	movs	r7, #0
 8006ba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006baa:	f1b9 0901 	subs.w	r9, r9, #1
 8006bae:	d505      	bpl.n	8006bbc <_fwalk_reent+0x24>
 8006bb0:	6824      	ldr	r4, [r4, #0]
 8006bb2:	2c00      	cmp	r4, #0
 8006bb4:	d1f7      	bne.n	8006ba6 <_fwalk_reent+0xe>
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bbc:	89ab      	ldrh	r3, [r5, #12]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d907      	bls.n	8006bd2 <_fwalk_reent+0x3a>
 8006bc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	d003      	beq.n	8006bd2 <_fwalk_reent+0x3a>
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4630      	mov	r0, r6
 8006bce:	47c0      	blx	r8
 8006bd0:	4307      	orrs	r7, r0
 8006bd2:	3568      	adds	r5, #104	; 0x68
 8006bd4:	e7e9      	b.n	8006baa <_fwalk_reent+0x12>

08006bd6 <__retarget_lock_init_recursive>:
 8006bd6:	4770      	bx	lr

08006bd8 <__retarget_lock_acquire_recursive>:
 8006bd8:	4770      	bx	lr

08006bda <__retarget_lock_release_recursive>:
 8006bda:	4770      	bx	lr

08006bdc <__swhatbuf_r>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	460e      	mov	r6, r1
 8006be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be4:	2900      	cmp	r1, #0
 8006be6:	b096      	sub	sp, #88	; 0x58
 8006be8:	4614      	mov	r4, r2
 8006bea:	461d      	mov	r5, r3
 8006bec:	da08      	bge.n	8006c00 <__swhatbuf_r+0x24>
 8006bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	602a      	str	r2, [r5, #0]
 8006bf6:	061a      	lsls	r2, r3, #24
 8006bf8:	d410      	bmi.n	8006c1c <__swhatbuf_r+0x40>
 8006bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bfe:	e00e      	b.n	8006c1e <__swhatbuf_r+0x42>
 8006c00:	466a      	mov	r2, sp
 8006c02:	f000 f8fb 	bl	8006dfc <_fstat_r>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	dbf1      	blt.n	8006bee <__swhatbuf_r+0x12>
 8006c0a:	9a01      	ldr	r2, [sp, #4]
 8006c0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c14:	425a      	negs	r2, r3
 8006c16:	415a      	adcs	r2, r3
 8006c18:	602a      	str	r2, [r5, #0]
 8006c1a:	e7ee      	b.n	8006bfa <__swhatbuf_r+0x1e>
 8006c1c:	2340      	movs	r3, #64	; 0x40
 8006c1e:	2000      	movs	r0, #0
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	b016      	add	sp, #88	; 0x58
 8006c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c28 <__smakebuf_r>:
 8006c28:	898b      	ldrh	r3, [r1, #12]
 8006c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c2c:	079d      	lsls	r5, r3, #30
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460c      	mov	r4, r1
 8006c32:	d507      	bpl.n	8006c44 <__smakebuf_r+0x1c>
 8006c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	6123      	str	r3, [r4, #16]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	6163      	str	r3, [r4, #20]
 8006c40:	b002      	add	sp, #8
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	ab01      	add	r3, sp, #4
 8006c46:	466a      	mov	r2, sp
 8006c48:	f7ff ffc8 	bl	8006bdc <__swhatbuf_r>
 8006c4c:	9900      	ldr	r1, [sp, #0]
 8006c4e:	4605      	mov	r5, r0
 8006c50:	4630      	mov	r0, r6
 8006c52:	f7ff fb07 	bl	8006264 <_malloc_r>
 8006c56:	b948      	cbnz	r0, 8006c6c <__smakebuf_r+0x44>
 8006c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c5c:	059a      	lsls	r2, r3, #22
 8006c5e:	d4ef      	bmi.n	8006c40 <__smakebuf_r+0x18>
 8006c60:	f023 0303 	bic.w	r3, r3, #3
 8006c64:	f043 0302 	orr.w	r3, r3, #2
 8006c68:	81a3      	strh	r3, [r4, #12]
 8006c6a:	e7e3      	b.n	8006c34 <__smakebuf_r+0xc>
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <__smakebuf_r+0x7c>)
 8006c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	6020      	str	r0, [r4, #0]
 8006c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	9b00      	ldr	r3, [sp, #0]
 8006c7c:	6163      	str	r3, [r4, #20]
 8006c7e:	9b01      	ldr	r3, [sp, #4]
 8006c80:	6120      	str	r0, [r4, #16]
 8006c82:	b15b      	cbz	r3, 8006c9c <__smakebuf_r+0x74>
 8006c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f000 f8c9 	bl	8006e20 <_isatty_r>
 8006c8e:	b128      	cbz	r0, 8006c9c <__smakebuf_r+0x74>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	f023 0303 	bic.w	r3, r3, #3
 8006c96:	f043 0301 	orr.w	r3, r3, #1
 8006c9a:	81a3      	strh	r3, [r4, #12]
 8006c9c:	89a0      	ldrh	r0, [r4, #12]
 8006c9e:	4305      	orrs	r5, r0
 8006ca0:	81a5      	strh	r5, [r4, #12]
 8006ca2:	e7cd      	b.n	8006c40 <__smakebuf_r+0x18>
 8006ca4:	08006a35 	.word	0x08006a35

08006ca8 <_raise_r>:
 8006ca8:	291f      	cmp	r1, #31
 8006caa:	b538      	push	{r3, r4, r5, lr}
 8006cac:	4604      	mov	r4, r0
 8006cae:	460d      	mov	r5, r1
 8006cb0:	d904      	bls.n	8006cbc <_raise_r+0x14>
 8006cb2:	2316      	movs	r3, #22
 8006cb4:	6003      	str	r3, [r0, #0]
 8006cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cbe:	b112      	cbz	r2, 8006cc6 <_raise_r+0x1e>
 8006cc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cc4:	b94b      	cbnz	r3, 8006cda <_raise_r+0x32>
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f000 f830 	bl	8006d2c <_getpid_r>
 8006ccc:	462a      	mov	r2, r5
 8006cce:	4601      	mov	r1, r0
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cd6:	f000 b817 	b.w	8006d08 <_kill_r>
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d00a      	beq.n	8006cf4 <_raise_r+0x4c>
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	d103      	bne.n	8006cea <_raise_r+0x42>
 8006ce2:	2316      	movs	r3, #22
 8006ce4:	6003      	str	r3, [r0, #0]
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	e7e7      	b.n	8006cba <_raise_r+0x12>
 8006cea:	2400      	movs	r4, #0
 8006cec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	4798      	blx	r3
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e7e0      	b.n	8006cba <_raise_r+0x12>

08006cf8 <raise>:
 8006cf8:	4b02      	ldr	r3, [pc, #8]	; (8006d04 <raise+0xc>)
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	f7ff bfd3 	b.w	8006ca8 <_raise_r>
 8006d02:	bf00      	nop
 8006d04:	20000034 	.word	0x20000034

08006d08 <_kill_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	4d07      	ldr	r5, [pc, #28]	; (8006d28 <_kill_r+0x20>)
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	4604      	mov	r4, r0
 8006d10:	4608      	mov	r0, r1
 8006d12:	4611      	mov	r1, r2
 8006d14:	602b      	str	r3, [r5, #0]
 8006d16:	f7fa fce1 	bl	80016dc <_kill>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	d102      	bne.n	8006d24 <_kill_r+0x1c>
 8006d1e:	682b      	ldr	r3, [r5, #0]
 8006d20:	b103      	cbz	r3, 8006d24 <_kill_r+0x1c>
 8006d22:	6023      	str	r3, [r4, #0]
 8006d24:	bd38      	pop	{r3, r4, r5, pc}
 8006d26:	bf00      	nop
 8006d28:	20000824 	.word	0x20000824

08006d2c <_getpid_r>:
 8006d2c:	f7fa bcce 	b.w	80016cc <_getpid>

08006d30 <__sread>:
 8006d30:	b510      	push	{r4, lr}
 8006d32:	460c      	mov	r4, r1
 8006d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d38:	f000 f894 	bl	8006e64 <_read_r>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	bfab      	itete	ge
 8006d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d42:	89a3      	ldrhlt	r3, [r4, #12]
 8006d44:	181b      	addge	r3, r3, r0
 8006d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d4a:	bfac      	ite	ge
 8006d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d4e:	81a3      	strhlt	r3, [r4, #12]
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <__swrite>:
 8006d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d56:	461f      	mov	r7, r3
 8006d58:	898b      	ldrh	r3, [r1, #12]
 8006d5a:	05db      	lsls	r3, r3, #23
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	4616      	mov	r6, r2
 8006d62:	d505      	bpl.n	8006d70 <__swrite+0x1e>
 8006d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d68:	2302      	movs	r3, #2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f000 f868 	bl	8006e40 <_lseek_r>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	463b      	mov	r3, r7
 8006d80:	4628      	mov	r0, r5
 8006d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d86:	f000 b817 	b.w	8006db8 <_write_r>

08006d8a <__sseek>:
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d92:	f000 f855 	bl	8006e40 <_lseek_r>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	bf15      	itete	ne
 8006d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006da6:	81a3      	strheq	r3, [r4, #12]
 8006da8:	bf18      	it	ne
 8006daa:	81a3      	strhne	r3, [r4, #12]
 8006dac:	bd10      	pop	{r4, pc}

08006dae <__sclose>:
 8006dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db2:	f000 b813 	b.w	8006ddc <_close_r>
	...

08006db8 <_write_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d07      	ldr	r5, [pc, #28]	; (8006dd8 <_write_r+0x20>)
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	602a      	str	r2, [r5, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f7fa fcbf 	bl	800174a <_write>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_write_r+0x1e>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_write_r+0x1e>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	20000824 	.word	0x20000824

08006ddc <_close_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d06      	ldr	r5, [pc, #24]	; (8006df8 <_close_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	f7fa fccb 	bl	8001782 <_close>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_close_r+0x1a>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_close_r+0x1a>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	20000824 	.word	0x20000824

08006dfc <_fstat_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	; (8006e1c <_fstat_r+0x20>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	f7fa fcc6 	bl	800179a <_fstat>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d102      	bne.n	8006e18 <_fstat_r+0x1c>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	b103      	cbz	r3, 8006e18 <_fstat_r+0x1c>
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	bf00      	nop
 8006e1c:	20000824 	.word	0x20000824

08006e20 <_isatty_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d06      	ldr	r5, [pc, #24]	; (8006e3c <_isatty_r+0x1c>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	f7fa fcc5 	bl	80017ba <_isatty>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_isatty_r+0x1a>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_isatty_r+0x1a>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	20000824 	.word	0x20000824

08006e40 <_lseek_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d07      	ldr	r5, [pc, #28]	; (8006e60 <_lseek_r+0x20>)
 8006e44:	4604      	mov	r4, r0
 8006e46:	4608      	mov	r0, r1
 8006e48:	4611      	mov	r1, r2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	602a      	str	r2, [r5, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f7fa fcbe 	bl	80017d0 <_lseek>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_lseek_r+0x1e>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_lseek_r+0x1e>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	20000824 	.word	0x20000824

08006e64 <_read_r>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4d07      	ldr	r5, [pc, #28]	; (8006e84 <_read_r+0x20>)
 8006e68:	4604      	mov	r4, r0
 8006e6a:	4608      	mov	r0, r1
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	2200      	movs	r2, #0
 8006e70:	602a      	str	r2, [r5, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f7fa fc4c 	bl	8001710 <_read>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_read_r+0x1e>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_read_r+0x1e>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	20000824 	.word	0x20000824

08006e88 <_init>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	bf00      	nop
 8006e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e8e:	bc08      	pop	{r3}
 8006e90:	469e      	mov	lr, r3
 8006e92:	4770      	bx	lr

08006e94 <_fini>:
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e96:	bf00      	nop
 8006e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e9a:	bc08      	pop	{r3}
 8006e9c:	469e      	mov	lr, r3
 8006e9e:	4770      	bx	lr
