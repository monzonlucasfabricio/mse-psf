
pds23_MSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000464c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004890  08004890  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08004890  08004890  00014890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004898  08004898  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004898  08004898  00014898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080048a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000624  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006b8  200006b8  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd17  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002760  00000000  00000000  0002fddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00032540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b08  00000000  00000000  00033160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026541  00000000  00000000  00033c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107de  00000000  00000000  0005a1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3480  00000000  00000000  0006a987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014de07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003614  00000000  00000000  0014de58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080047e4 	.word	0x080047e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	080047e4 	.word	0x080047e4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <MX_ADC1_Init+0x80>)
 8000de6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de8:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000dea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000df0:	4b16      	ldr	r3, [pc, #88]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000df2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000df6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000e14:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <MX_ADC1_Init+0x84>)
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <MX_ADC1_Init+0x7c>)
 8000e34:	f000 fed0 	bl	8001bd8 <HAL_ADC_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000e3e:	f000 fac1 	bl	80013c4 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000b0 	.word	0x200000b0
 8000e50:	40012000 	.word	0x40012000
 8000e54:	0f000001 	.word	0x0f000001

08000e58 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_ADC_MspInit+0x7c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d127      	bne.n	8000eca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_1_Pin;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_1_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_ADC_MspInit+0x84>)
 8000ec6:	f001 f995 	bl	80021f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40012000 	.word	0x40012000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000eee:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <MX_DAC_Init+0x60>)
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <MX_DAC_Init+0x64>)
 8000ef2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ef4:	4812      	ldr	r0, [pc, #72]	; (8000f40 <MX_DAC_Init+0x60>)
 8000ef6:	f001 f894 	bl	8002022 <HAL_DAC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f00:	f000 fa60 	bl	80013c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	4619      	mov	r1, r3
 8000f12:	480b      	ldr	r0, [pc, #44]	; (8000f40 <MX_DAC_Init+0x60>)
 8000f14:	f001 f91e 	bl	8002154 <HAL_DAC_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f1e:	f000 fa51 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8000f22:	2100      	movs	r1, #0
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_DAC_Init+0x60>)
 8000f26:	f001 f89e 	bl	8002066 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_DAC_Init+0x60>)
 8000f32:	f001 f8ea 	bl	800210a <HAL_DAC_SetValue>

  /* USER CODE END DAC_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000f8 	.word	0x200000f8
 8000f44:	40007400 	.word	0x40007400

08000f48 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <HAL_DAC_MspInit+0x7c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d127      	bne.n	8000fba <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <HAL_DAC_MspInit+0x80>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a15      	ldr	r2, [pc, #84]	; (8000fc8 <HAL_DAC_MspInit+0x80>)
 8000f74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_DAC_MspInit+0x80>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <HAL_DAC_MspInit+0x80>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <HAL_DAC_MspInit+0x80>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_DAC_MspInit+0x80>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	; (8000fcc <HAL_DAC_MspInit+0x84>)
 8000fb6:	f001 f91d 	bl	80021f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	; 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40007400 	.word	0x40007400
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020000 	.word	0x40020000

08000fd0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a6c      	ldr	r2, [pc, #432]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b6a      	ldr	r3, [pc, #424]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	4b66      	ldr	r3, [pc, #408]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a65      	ldr	r2, [pc, #404]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b63      	ldr	r3, [pc, #396]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a5e      	ldr	r2, [pc, #376]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b58      	ldr	r3, [pc, #352]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a57      	ldr	r2, [pc, #348]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b55      	ldr	r3, [pc, #340]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a50      	ldr	r2, [pc, #320]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b4e      	ldr	r3, [pc, #312]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	4b4a      	ldr	r3, [pc, #296]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a49      	ldr	r2, [pc, #292]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 800107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b47      	ldr	r3, [pc, #284]	; (80011a0 <MX_GPIO_Init+0x1d0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f244 0181 	movw	r1, #16513	; 0x4081
 8001094:	4843      	ldr	r0, [pc, #268]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 8001096:	f001 fa59 	bl	800254c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2140      	movs	r1, #64	; 0x40
 800109e:	4842      	ldr	r0, [pc, #264]	; (80011a8 <MX_GPIO_Init+0x1d8>)
 80010a0:	f001 fa54 	bl	800254c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	483c      	ldr	r0, [pc, #240]	; (80011ac <MX_GPIO_Init+0x1dc>)
 80010bc:	f001 f89a 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010c0:	2332      	movs	r3, #50	; 0x32
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d0:	230b      	movs	r3, #11
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	4834      	ldr	r0, [pc, #208]	; (80011ac <MX_GPIO_Init+0x1dc>)
 80010dc:	f001 f88a 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010e0:	2386      	movs	r3, #134	; 0x86
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f0:	230b      	movs	r3, #11
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	482d      	ldr	r0, [pc, #180]	; (80011b0 <MX_GPIO_Init+0x1e0>)
 80010fc:	f001 f87a 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001100:	f244 0381 	movw	r3, #16513	; 0x4081
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4822      	ldr	r0, [pc, #136]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 800111a:	f001 f86b 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800111e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112c:	2303      	movs	r3, #3
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001130:	230b      	movs	r3, #11
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	481a      	ldr	r0, [pc, #104]	; (80011a4 <MX_GPIO_Init+0x1d4>)
 800113c:	f001 f85a 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001140:	2340      	movs	r3, #64	; 0x40
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4814      	ldr	r0, [pc, #80]	; (80011a8 <MX_GPIO_Init+0x1d8>)
 8001158:	f001 f84c 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	480e      	ldr	r0, [pc, #56]	; (80011a8 <MX_GPIO_Init+0x1d8>)
 8001170:	f001 f840 	bl	80021f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001174:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001186:	230b      	movs	r3, #11
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_GPIO_Init+0x1d8>)
 8001192:	f001 f82f 	bl	80021f4 <HAL_GPIO_Init>

}
 8001196:	bf00      	nop
 8001198:	3730      	adds	r7, #48	; 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020000 	.word	0x40020000

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	f5ad 7d38 	sub.w	sp, sp, #736	; 0x2e0
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f000 fc76 	bl	8001aac <HAL_Init>
  int16_t len;
  char buf [ 200 ];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c0:	f000 f896 	bl	80012f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c4:	f7ff ff04 	bl	8000fd0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80011c8:	f000 faf8 	bl	80017bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011cc:	f000 fbbc 	bl	8001948 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80011d0:	f7ff fdfe 	bl	8000dd0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80011d4:	f000 fac8 	bl	8001768 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80011d8:	f7ff fe82 	bl	8000ee0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  uint16_t sample = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
  DBG_CyclesCounterInit(CLOCK_SPEED); // Enable the cycle counter
 80011e2:	483e      	ldr	r0, [pc, #248]	; (80012dc <main+0x128>)
 80011e4:	f000 f8f4 	bl	80013d0 <DBG_CyclesCounterInit>
  int16_t adc [N_MUESTRAS];
  float t = 0;
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
//  float32_t result = 0;
  q15_t n1=0x4000;
 80011f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011f4:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

  q15_t a=0x4000;
 80011f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011fc:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
  q15_t b=0x2300;
 8001200:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001204:	f8a7 32d2 	strh.w	r3, [r7, #722]	; 0x2d2

  q15_t m=0x0000;
 8001208:	2300      	movs	r3, #0
 800120a:	f8a7 32d0 	strh.w	r3, [r7, #720]	; 0x2d0
  q31_t n2=0x40000000;
 800120e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001212:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Reset cycle counter to 0 */
	  DBG_CyclesCounterReset();
 8001216:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <main+0x12c>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
      //q15 * q15 termina en q30
      //n2=n1*n1;
      //n2<<=1;
      //len=printQ31(n2,buf);
      //uartWriteByteArray ( UART_USB ,buf ,len);
      len=printQ15(a,buf);
 800121c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001220:	f9b7 32d4 	ldrsh.w	r3, [r7, #724]	; 0x2d4
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f98a 	bl	8001540 <printQ15>
 800122c:	4603      	mov	r3, r0
 800122e:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
      //uartWriteByteArray(&huart2, (uint8_t* )&adc[sample], sizeof(adc[0]));
      uartWriteByteArray ( &huart2 ,buf ,len);
 8001232:	f9b7 22ca 	ldrsh.w	r2, [r7, #714]	; 0x2ca
 8001236:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123a:	4619      	mov	r1, r3
 800123c:	4829      	ldr	r0, [pc, #164]	; (80012e4 <main+0x130>)
 800123e:	f000 f8f3 	bl	8001428 <uartWriteByteArray>
      len=printQ15(b,buf);
 8001242:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001246:	f9b7 32d2 	ldrsh.w	r3, [r7, #722]	; 0x2d2
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f977 	bl	8001540 <printQ15>
 8001252:	4603      	mov	r3, r0
 8001254:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
      uartWriteByteArray ( &huart2 ,buf ,len);
 8001258:	f9b7 22ca 	ldrsh.w	r2, [r7, #714]	; 0x2ca
 800125c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001260:	4619      	mov	r1, r3
 8001262:	4820      	ldr	r0, [pc, #128]	; (80012e4 <main+0x130>)
 8001264:	f000 f8e0 	bl	8001428 <uartWriteByteArray>

      m=multiQ15(a,b);
 8001268:	f9b7 22d2 	ldrsh.w	r2, [r7, #722]	; 0x2d2
 800126c:	f9b7 32d4 	ldrsh.w	r3, [r7, #724]	; 0x2d4
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f9c2 	bl	80015fc <multiQ15>
 8001278:	4603      	mov	r3, r0
 800127a:	f8a7 32d0 	strh.w	r3, [r7, #720]	; 0x2d0
      m>>=8;
 800127e:	f9b7 32d0 	ldrsh.w	r3, [r7, #720]	; 0x2d0
 8001282:	121b      	asrs	r3, r3, #8
 8001284:	f8a7 32d0 	strh.w	r3, [r7, #720]	; 0x2d0
      len=printQ7(m,buf);
 8001288:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800128c:	f9b7 32d0 	ldrsh.w	r3, [r7, #720]	; 0x2d0
 8001290:	4611      	mov	r1, r2
 8001292:	4618      	mov	r0, r3
 8001294:	f000 f8f6 	bl	8001484 <printQ7>
 8001298:	4603      	mov	r3, r0
 800129a:	f8a7 32ca 	strh.w	r3, [r7, #714]	; 0x2ca
      uartWriteByteArray ( &huart2 ,buf ,len);
 800129e:	f9b7 22ca 	ldrsh.w	r2, [r7, #714]	; 0x2ca
 80012a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a6:	4619      	mov	r1, r3
 80012a8:	480e      	ldr	r0, [pc, #56]	; (80012e4 <main+0x130>)
 80012aa:	f000 f8bd 	bl	8001428 <uartWriteByteArray>
      //len=printQ15(n1,buf);
      //uartWriteByteArray ( UART_USB ,buf ,len);
      //len=printSqrtQ15(0x4000,buf); //square root of 2
      //uartWriteByteArray ( UART_USB ,buf ,len);
      //n1++;
      sample++;
 80012ae:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80012b2:	3301      	adds	r3, #1
 80012b4:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de

	  /* Blinks at fs/2 frequency */
	  gpioToggle (GPIOB,LD3_Pin);
 80012b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012bc:	480a      	ldr	r0, [pc, #40]	; (80012e8 <main+0x134>)
 80012be:	f000 f8d2 	bl	8001466 <gpioToggle>

	  /* Wait until it completes the Cycles. 168.000.000/10.000 = 16.800 cycles */
	  while(DBG_CyclesCounterRead() < CLOCK_SPEED/header.fs);
 80012c2:	bf00      	nop
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <main+0x12c>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a08      	ldr	r2, [pc, #32]	; (80012ec <main+0x138>)
 80012ca:	8952      	ldrh	r2, [r2, #10]
 80012cc:	4611      	mov	r1, r2
 80012ce:	4a03      	ldr	r2, [pc, #12]	; (80012dc <main+0x128>)
 80012d0:	fb92 f2f1 	sdiv	r2, r2, r1
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d3f5      	bcc.n	80012c4 <main+0x110>
	  DBG_CyclesCounterReset();
 80012d8:	e79d      	b.n	8001216 <main+0x62>
 80012da:	bf00      	nop
 80012dc:	0a037a00 	.word	0x0a037a00
 80012e0:	e0001000 	.word	0xe0001000
 80012e4:	20000110 	.word	0x20000110
 80012e8:	40020400 	.word	0x40020400
 80012ec:	20000000 	.word	0x20000000

080012f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b094      	sub	sp, #80	; 0x50
 80012f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	2230      	movs	r2, #48	; 0x30
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fdfa 	bl	8003ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <SystemClock_Config+0xcc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a27      	ldr	r2, [pc, #156]	; (80013bc <SystemClock_Config+0xcc>)
 800131e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <SystemClock_Config+0xcc>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <SystemClock_Config+0xd0>)
 800133a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133e:	6013      	str	r3, [r2, #0]
 8001340:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <SystemClock_Config+0xd0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800134c:	2301      	movs	r3, #1
 800134e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001350:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001356:	2302      	movs	r3, #2
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800135a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001360:	2304      	movs	r3, #4
 8001362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001364:	23a8      	movs	r3, #168	; 0xa8
 8001366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001368:	2302      	movs	r3, #2
 800136a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800136c:	2307      	movs	r3, #7
 800136e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fa39 	bl	80027ec <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001380:	f000 f820 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2302      	movs	r3, #2
 800138a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001390:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2105      	movs	r1, #5
 80013a2:	4618      	mov	r0, r3
 80013a4:	f001 fc9a 	bl	8002cdc <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ae:	f000 f809 	bl	80013c4 <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3750      	adds	r7, #80	; 0x50
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <DBG_CyclesCounterInit>:
	return adc_value;
}


bool DBG_CyclesCounterInit( uint32_t clockSpeed )
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <DBG_CyclesCounterInit+0x28>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
   //Iniciar el contador de ciclos de clock.
   DWT->CTRL  |= 1; // *DWT_CTRL  |= 1;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <DBG_CyclesCounterInit+0x2c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a06      	ldr	r2, [pc, #24]	; (80013fc <DBG_CyclesCounterInit+0x2c>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6013      	str	r3, [r2, #0]
   return 1;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	20000020 	.word	0x20000020
 80013fc:	e0001000 	.word	0xe0001000

08001400 <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( UART_HandleTypeDef *huart, const uint8_t value)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	70fb      	strb	r3, [r7, #3]
	uint8_t val = value;
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart, &val, 1, HAL_MAX_DELAY);
 8001410:	f107 010f 	add.w	r1, r7, #15
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	2201      	movs	r2, #1
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f001 fecb 	bl	80031b6 <HAL_UART_Transmit>
}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <uartWriteByteArray>:


// Blocking, Send a Byte Array
void uartWriteByteArray( UART_HandleTypeDef *huart, uint8_t* byteArray, uint32_t byteArrayLen )
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
   uint32_t i = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
   for( i=0; i<byteArrayLen; i++ ) {
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e00a      	b.n	8001454 <uartWriteByteArray+0x2c>
	   uartWriteByte(huart, byteArray[i]);
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4413      	add	r3, r2
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	68f8      	ldr	r0, [r7, #12]
 800144a:	f7ff ffd9 	bl	8001400 <uartWriteByte>
   for( i=0; i<byteArrayLen; i++ ) {
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3301      	adds	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3f0      	bcc.n	800143e <uartWriteByteArray+0x16>
   }
}
 800145c:	bf00      	nop
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <gpioToggle>:

void gpioToggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	460b      	mov	r3, r1
 8001470:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	4619      	mov	r1, r3
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f001 f881 	bl	800257e <HAL_GPIO_TogglePin>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <printQ7>:
      }
   }
   return sprintf(buf,"q31: %i float:%.20f\r\n",n,ans);
}
uint16_t printQ7(q15_t n,char *buf)
{
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af02      	add	r7, sp, #8
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	80fb      	strh	r3, [r7, #6]
   int i;
   float ans=(n&0x80)?-1:0;
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <printQ7+0x1a>
 800149a:	4b26      	ldr	r3, [pc, #152]	; (8001534 <printQ7+0xb0>)
 800149c:	e001      	b.n	80014a2 <printQ7+0x1e>
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
   for(i=1;i<8;i++)
 80014a4:	2301      	movs	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	e02c      	b.n	8001504 <printQ7+0x80>
   {
      if(n&(0x80>>i)){
 80014aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014ae:	2180      	movs	r1, #128	; 0x80
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	fa41 f303 	asr.w	r3, r1, r3
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d020      	beq.n	80014fe <printQ7+0x7a>
         ans+=1.0/(1U<<i);
 80014bc:	68b8      	ldr	r0, [r7, #8]
 80014be:	f7ff f84b 	bl	8000558 <__aeabi_f2d>
 80014c2:	4604      	mov	r4, r0
 80014c4:	460d      	mov	r5, r1
 80014c6:	2201      	movs	r2, #1
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff f820 	bl	8000514 <__aeabi_ui2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	f04f 0000 	mov.w	r0, #0
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <printQ7+0xb4>)
 80014de:	f7ff f9bd 	bl	800085c <__aeabi_ddiv>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4620      	mov	r0, r4
 80014e8:	4629      	mov	r1, r5
 80014ea:	f7fe fed7 	bl	800029c <__adddf3>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fa99 	bl	8000a2c <__aeabi_d2f>
 80014fa:	4603      	mov	r3, r0
 80014fc:	60bb      	str	r3, [r7, #8]
   for(i=1;i<8;i++)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3301      	adds	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b07      	cmp	r3, #7
 8001508:	ddcf      	ble.n	80014aa <printQ7+0x26>
      }
   }
   return sprintf(buf,"q7: %i float:%.20f\r\n",n,ans);
 800150a:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800150e:	68b8      	ldr	r0, [r7, #8]
 8001510:	f7ff f822 	bl	8000558 <__aeabi_f2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	e9cd 2300 	strd	r2, r3, [sp]
 800151c:	4622      	mov	r2, r4
 800151e:	4907      	ldr	r1, [pc, #28]	; (800153c <printQ7+0xb8>)
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	f002 fcf1 	bl	8003f08 <siprintf>
 8001526:	4603      	mov	r3, r0
 8001528:	b29b      	uxth	r3, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bdb0      	pop	{r4, r5, r7, pc}
 8001532:	bf00      	nop
 8001534:	bf800000 	.word	0xbf800000
 8001538:	3ff00000 	.word	0x3ff00000
 800153c:	08004814 	.word	0x08004814

08001540 <printQ15>:
uint16_t printQ15(q15_t n,char *buf)
{
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af02      	add	r7, sp, #8
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	80fb      	strh	r3, [r7, #6]
   int i;
   float ans=(n&0x8000)?-1:0;
 800154c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da01      	bge.n	8001558 <printQ15+0x18>
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <printQ15+0xb0>)
 8001556:	e001      	b.n	800155c <printQ15+0x1c>
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
   for(i=1;i<16;i++)
 800155e:	2301      	movs	r3, #1
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	e02d      	b.n	80015c0 <printQ15+0x80>
   {
      if(n&(0x8000>>i)){
 8001564:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	fa41 f303 	asr.w	r3, r1, r3
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <printQ15+0x7a>
         ans+=1.0/(1U<<i);
 8001578:	68b8      	ldr	r0, [r7, #8]
 800157a:	f7fe ffed 	bl	8000558 <__aeabi_f2d>
 800157e:	4604      	mov	r4, r0
 8001580:	460d      	mov	r5, r1
 8001582:	2201      	movs	r2, #1
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffc2 	bl	8000514 <__aeabi_ui2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	f04f 0000 	mov.w	r0, #0
 8001598:	4916      	ldr	r1, [pc, #88]	; (80015f4 <printQ15+0xb4>)
 800159a:	f7ff f95f 	bl	800085c <__aeabi_ddiv>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4620      	mov	r0, r4
 80015a4:	4629      	mov	r1, r5
 80015a6:	f7fe fe79 	bl	800029c <__adddf3>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fa3b 	bl	8000a2c <__aeabi_d2f>
 80015b6:	4603      	mov	r3, r0
 80015b8:	60bb      	str	r3, [r7, #8]
   for(i=1;i<16;i++)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3301      	adds	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	ddce      	ble.n	8001564 <printQ15+0x24>
      }
   }
   return sprintf(buf,"q15: %i float:%.20f\r\n",n,ans);
 80015c6:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80015ca:	68b8      	ldr	r0, [r7, #8]
 80015cc:	f7fe ffc4 	bl	8000558 <__aeabi_f2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	e9cd 2300 	strd	r2, r3, [sp]
 80015d8:	4622      	mov	r2, r4
 80015da:	4907      	ldr	r1, [pc, #28]	; (80015f8 <printQ15+0xb8>)
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f002 fc93 	bl	8003f08 <siprintf>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29b      	uxth	r3, r3
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	bf800000 	.word	0xbf800000
 80015f4:	3ff00000 	.word	0x3ff00000
 80015f8:	0800482c 	.word	0x0800482c

080015fc <multiQ15>:
q15_t multiQ15(q15_t a,q15_t b)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	460a      	mov	r2, r1
 8001606:	80fb      	strh	r3, [r7, #6]
 8001608:	4613      	mov	r3, r2
 800160a:	80bb      	strh	r3, [r7, #4]
   q31_t ans;
   ans=a*b;
 800160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001610:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	60fb      	str	r3, [r7, #12]
   ans<<=1;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
   return ans>>16;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	141b      	asrs	r3, r3, #16
 8001624:	b21b      	sxth	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
	...

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <HAL_MspInit+0x4c>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6453      	str	r3, [r2, #68]	; 0x44
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_MspInit+0x4c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d0:	f000 fa3e 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f002 fbcc 	bl	8003ea4 <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20030000 	.word	0x20030000
 8001738:	00000400 	.word	0x00000400
 800173c:	2000010c 	.word	0x2000010c
 8001740:	200006b8 	.word	0x200006b8

08001744 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <SystemInit+0x20>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <SystemInit+0x20>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800176e:	4a12      	ldr	r2, [pc, #72]	; (80017b8 <MX_USART2_UART_Init+0x50>)
 8001770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001774:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_USART2_UART_Init+0x4c>)
 80017a0:	f001 fcbc 	bl	800311c <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017aa:	f7ff fe0b 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000110 	.word	0x20000110
 80017b8:	40004400 	.word	0x40004400

080017bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <MX_USART3_UART_Init+0x50>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART3_UART_Init+0x4c>)
 80017f4:	f001 fc92 	bl	800311c <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017fe:	f7ff fde1 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000154 	.word	0x20000154
 800180c:	40004800 	.word	0x40004800

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a41      	ldr	r2, [pc, #260]	; (8001934 <HAL_UART_MspInit+0x124>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d14a      	bne.n	80018c8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	4b40      	ldr	r3, [pc, #256]	; (8001938 <HAL_UART_MspInit+0x128>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a3f      	ldr	r2, [pc, #252]	; (8001938 <HAL_UART_MspInit+0x128>)
 800183c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <HAL_UART_MspInit+0x128>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_UART_MspInit+0x128>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a38      	ldr	r2, [pc, #224]	; (8001938 <HAL_UART_MspInit+0x128>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <HAL_UART_MspInit+0x128>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_UART_MspInit+0x128>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a31      	ldr	r2, [pc, #196]	; (8001938 <HAL_UART_MspInit+0x128>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_UART_MspInit+0x128>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 8001886:	2308      	movs	r3, #8
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001896:	2307      	movs	r3, #7
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	4826      	ldr	r0, [pc, #152]	; (800193c <HAL_UART_MspInit+0x12c>)
 80018a2:	f000 fca7 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART2_TX_Pin;
 80018a6:	2320      	movs	r3, #32
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b6:	2307      	movs	r3, #7
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	4619      	mov	r1, r3
 80018c0:	481f      	ldr	r0, [pc, #124]	; (8001940 <HAL_UART_MspInit+0x130>)
 80018c2:	f000 fc97 	bl	80021f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80018c6:	e031      	b.n	800192c <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_UART_MspInit+0x134>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d12c      	bne.n	800192c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_UART_MspInit+0x128>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a17      	ldr	r2, [pc, #92]	; (8001938 <HAL_UART_MspInit+0x128>)
 80018dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b15      	ldr	r3, [pc, #84]	; (8001938 <HAL_UART_MspInit+0x128>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_UART_MspInit+0x128>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <HAL_UART_MspInit+0x128>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_UART_MspInit+0x128>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800190a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800191c:	2307      	movs	r3, #7
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4806      	ldr	r0, [pc, #24]	; (8001940 <HAL_UART_MspInit+0x130>)
 8001928:	f000 fc64 	bl	80021f4 <HAL_GPIO_Init>
}
 800192c:	bf00      	nop
 800192e:	3730      	adds	r7, #48	; 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40004400 	.word	0x40004400
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40004800 	.word	0x40004800

08001948 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800194e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001952:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001956:	2204      	movs	r2, #4
 8001958:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195c:	2202      	movs	r2, #2
 800195e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001968:	2202      	movs	r2, #2
 800196a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800196e:	2201      	movs	r2, #1
 8001970:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001980:	2201      	movs	r2, #1
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198c:	f000 fe11 	bl	80025b2 <HAL_PCD_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001996:	f7ff fd15 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000198 	.word	0x20000198

080019a4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c4:	d13f      	bne.n	8001a46 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019e2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019f4:	230a      	movs	r3, #10
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4815      	ldr	r0, [pc, #84]	; (8001a54 <HAL_PCD_MspInit+0xb0>)
 8001a00:	f000 fbf8 	bl	80021f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	480e      	ldr	r0, [pc, #56]	; (8001a54 <HAL_PCD_MspInit+0xb0>)
 8001a1a:	f000 fbeb 	bl	80021f4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a28:	6353      	str	r3, [r2, #52]	; 0x34
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a5c:	480d      	ldr	r0, [pc, #52]	; (8001a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a5e:	490e      	ldr	r1, [pc, #56]	; (8001a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a74:	4c0b      	ldr	r4, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a82:	f7ff fe5f 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a86:	f002 fa13 	bl	8003eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff fb93 	bl	80011b4 <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001a9c:	080048a0 	.word	0x080048a0
  ldr r2, =_sbss
 8001aa0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001aa4:	200006b8 	.word	0x200006b8

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_Init+0x40>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_Init+0x40>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x40>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 fa71 	bl	8001fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fda8 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fa7b 	bl	800200a <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 fa51 	bl	8001fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000024 	.word	0x20000024
 8001b48:	2000002c 	.word	0x2000002c
 8001b4c:	20000028 	.word	0x20000028

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	2000002c 	.word	0x2000002c
 8001b74:	200006a4 	.word	0x200006a4

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	200006a4 	.word	0x200006a4

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff ffee 	bl	8001b78 <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000002c 	.word	0x2000002c

08001bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e033      	b.n	8001c56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff f92e 	bl	8000e58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d118      	bne.n	8001c48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c1e:	f023 0302 	bic.w	r3, r3, #2
 8001c22:	f043 0202 	orr.w	r2, r3, #2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f818 	bl	8001c60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
 8001c46:	e001      	b.n	8001c4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c68:	4b79      	ldr	r3, [pc, #484]	; (8001e50 <ADC_Init+0x1f0>)
 8001c6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	021a      	lsls	r2, r3, #8
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <ADC_Init+0x1f4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d022      	beq.n	8001d3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6899      	ldr	r1, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6899      	ldr	r1, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	e00f      	b.n	8001d5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0202 	bic.w	r2, r2, #2
 8001d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6899      	ldr	r1, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7e1b      	ldrb	r3, [r3, #24]
 8001d78:	005a      	lsls	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d01b      	beq.n	8001dc4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001daa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6859      	ldr	r1, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	3b01      	subs	r3, #1
 8001db8:	035a      	lsls	r2, r3, #13
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	e007      	b.n	8001dd4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	051a      	lsls	r2, r3, #20
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6899      	ldr	r1, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e16:	025a      	lsls	r2, r3, #9
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6899      	ldr	r1, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	029a      	lsls	r2, r3, #10
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	609a      	str	r2, [r3, #8]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	40012300 	.word	0x40012300
 8001e54:	0f000001 	.word	0x0f000001

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f88:	d301      	bcc.n	8001f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00f      	b.n	8001fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <SysTick_Config+0x40>)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f96:	210f      	movs	r1, #15
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f7ff ff8e 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <SysTick_Config+0x40>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	e000e010 	.word	0xe000e010

08001fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff47 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b086      	sub	sp, #24
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe4:	f7ff ff5c 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8001fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	6978      	ldr	r0, [r7, #20]
 8001ff0:	f7ff ff8e 	bl	8001f10 <NVIC_EncodePriority>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff5d 	bl	8001ebc <__NVIC_SetPriority>
}
 8002002:	bf00      	nop
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffb0 	bl	8001f78 <SysTick_Config>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e014      	b.n	800205e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe ff7f 	bl	8000f48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	795b      	ldrb	r3, [r3, #5]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_DAC_Start+0x16>
 8002078:	2302      	movs	r3, #2
 800207a:	e040      	b.n	80020fe <HAL_DAC_Start+0x98>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2202      	movs	r2, #2
 8002086:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2201      	movs	r2, #1
 8002096:	409a      	lsls	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10f      	bne.n	80020c6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80020b0:	2b3c      	cmp	r3, #60	; 0x3c
 80020b2:	d11d      	bne.n	80020f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	e014      	b.n	80020f0 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f003 0310 	and.w	r3, r3, #16
 80020d6:	213c      	movs	r1, #60	; 0x3c
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	429a      	cmp	r2, r3
 80020de:	d107      	bne.n	80020f0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0202 	orr.w	r2, r2, #2
 80020ee:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800210a:	b480      	push	{r7}
 800210c:	b087      	sub	sp, #28
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d105      	bne.n	8002134 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	3308      	adds	r3, #8
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e004      	b.n	800213e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	3314      	adds	r3, #20
 800213c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	461a      	mov	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	795b      	ldrb	r3, [r3, #5]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_DAC_ConfigChannel+0x18>
 8002168:	2302      	movs	r3, #2
 800216a:	e03c      	b.n	80021e6 <HAL_DAC_ConfigChannel+0x92>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2202      	movs	r2, #2
 8002176:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	f640 72fe 	movw	r2, #4094	; 0xffe
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4013      	ands	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	22c0      	movs	r2, #192	; 0xc0
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2201      	movs	r2, #1
 80021dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	e177      	b.n	8002500 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	f040 8166 	bne.w	80024fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d005      	beq.n	8002246 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	2b02      	cmp	r3, #2
 8002244:	d130      	bne.n	80022a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	2203      	movs	r2, #3
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227c:	2201      	movs	r2, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 0201 	and.w	r2, r3, #1
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d017      	beq.n	80022e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d123      	bne.n	8002338 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	08da      	lsrs	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3208      	adds	r2, #8
 80022f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	220f      	movs	r2, #15
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691a      	ldr	r2, [r3, #16]
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	08da      	lsrs	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3208      	adds	r2, #8
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0203 	and.w	r2, r3, #3
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80c0 	beq.w	80024fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	4b66      	ldr	r3, [pc, #408]	; (8002518 <HAL_GPIO_Init+0x324>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	4a65      	ldr	r2, [pc, #404]	; (8002518 <HAL_GPIO_Init+0x324>)
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	6453      	str	r3, [r2, #68]	; 0x44
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_GPIO_Init+0x324>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002396:	4a61      	ldr	r2, [pc, #388]	; (800251c <HAL_GPIO_Init+0x328>)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_GPIO_Init+0x32c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d037      	beq.n	8002432 <HAL_GPIO_Init+0x23e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HAL_GPIO_Init+0x330>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d031      	beq.n	800242e <HAL_GPIO_Init+0x23a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a56      	ldr	r2, [pc, #344]	; (8002528 <HAL_GPIO_Init+0x334>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d02b      	beq.n	800242a <HAL_GPIO_Init+0x236>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a55      	ldr	r2, [pc, #340]	; (800252c <HAL_GPIO_Init+0x338>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d025      	beq.n	8002426 <HAL_GPIO_Init+0x232>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a54      	ldr	r2, [pc, #336]	; (8002530 <HAL_GPIO_Init+0x33c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d01f      	beq.n	8002422 <HAL_GPIO_Init+0x22e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a53      	ldr	r2, [pc, #332]	; (8002534 <HAL_GPIO_Init+0x340>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d019      	beq.n	800241e <HAL_GPIO_Init+0x22a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x344>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x226>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a51      	ldr	r2, [pc, #324]	; (800253c <HAL_GPIO_Init+0x348>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x222>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a50      	ldr	r2, [pc, #320]	; (8002540 <HAL_GPIO_Init+0x34c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x21e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_GPIO_Init+0x350>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x21a>
 800240a:	2309      	movs	r3, #9
 800240c:	e012      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800240e:	230a      	movs	r3, #10
 8002410:	e010      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002412:	2308      	movs	r3, #8
 8002414:	e00e      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002416:	2307      	movs	r3, #7
 8002418:	e00c      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800241a:	2306      	movs	r3, #6
 800241c:	e00a      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800241e:	2305      	movs	r3, #5
 8002420:	e008      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002422:	2304      	movs	r3, #4
 8002424:	e006      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002426:	2303      	movs	r3, #3
 8002428:	e004      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800242a:	2302      	movs	r3, #2
 800242c:	e002      	b.n	8002434 <HAL_GPIO_Init+0x240>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_GPIO_Init+0x240>
 8002432:	2300      	movs	r3, #0
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	f002 0203 	and.w	r2, r2, #3
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	4093      	lsls	r3, r2
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002444:	4935      	ldr	r1, [pc, #212]	; (800251c <HAL_GPIO_Init+0x328>)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	3302      	adds	r3, #2
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002452:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_GPIO_Init+0x354>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002476:	4a34      	ldr	r2, [pc, #208]	; (8002548 <HAL_GPIO_Init+0x354>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247c:	4b32      	ldr	r3, [pc, #200]	; (8002548 <HAL_GPIO_Init+0x354>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a0:	4a29      	ldr	r2, [pc, #164]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a6:	4b28      	ldr	r3, [pc, #160]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ca:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <HAL_GPIO_Init+0x354>)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	2b0f      	cmp	r3, #15
 8002504:	f67f ae84 	bls.w	8002210 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3724      	adds	r7, #36	; 0x24
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40013800 	.word	0x40013800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40020800 	.word	0x40020800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40021000 	.word	0x40021000
 8002534:	40021400 	.word	0x40021400
 8002538:	40021800 	.word	0x40021800
 800253c:	40021c00 	.word	0x40021c00
 8002540:	40022000 	.word	0x40022000
 8002544:	40022400 	.word	0x40022400
 8002548:	40013c00 	.word	0x40013c00

0800254c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	807b      	strh	r3, [r7, #2]
 8002558:	4613      	mov	r3, r2
 800255a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800255c:	787b      	ldrb	r3, [r7, #1]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002562:	887a      	ldrh	r2, [r7, #2]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002568:	e003      	b.n	8002572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256a:	887b      	ldrh	r3, [r7, #2]
 800256c:	041a      	lsls	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	619a      	str	r2, [r3, #24]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	460b      	mov	r3, r1
 8002588:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002590:	887a      	ldrh	r2, [r7, #2]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4013      	ands	r3, r2
 8002596:	041a      	lsls	r2, r3, #16
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43d9      	mvns	r1, r3
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	400b      	ands	r3, r1
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b4:	b08f      	sub	sp, #60	; 0x3c
 80025b6:	af0a      	add	r7, sp, #40	; 0x28
 80025b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e10f      	b.n	80027e4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff f9e0 	bl	80019a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2203      	movs	r2, #3
 80025e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d102      	bne.n	80025fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f001 f9ad 	bl	8003962 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	687e      	ldr	r6, [r7, #4]
 8002610:	466d      	mov	r5, sp
 8002612:	f106 0410 	add.w	r4, r6, #16
 8002616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002622:	e885 0003 	stmia.w	r5, {r0, r1}
 8002626:	1d33      	adds	r3, r6, #4
 8002628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	f001 f938 	bl	80038a0 <USB_CoreInit>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0d0      	b.n	80027e4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f001 f99b 	bl	8003984 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	e04a      	b.n	80026ea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	333d      	adds	r3, #61	; 0x3d
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	333c      	adds	r3, #60	; 0x3c
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	b298      	uxth	r0, r3
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3344      	adds	r3, #68	; 0x44
 8002690:	4602      	mov	r2, r0
 8002692:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	3340      	adds	r3, #64	; 0x40
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	3348      	adds	r3, #72	; 0x48
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026bc:	7bfa      	ldrb	r2, [r7, #15]
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	440b      	add	r3, r1
 80026ca:	334c      	adds	r3, #76	; 0x4c
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3354      	adds	r3, #84	; 0x54
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	3301      	adds	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d3af      	bcc.n	8002654 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
 80026f8:	e044      	b.n	8002784 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4413      	add	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002768:	7bfa      	ldrb	r2, [r7, #15]
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	4613      	mov	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	3301      	adds	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d3b5      	bcc.n	80026fa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	687e      	ldr	r6, [r7, #4]
 8002796:	466d      	mov	r5, sp
 8002798:	f106 0410 	add.w	r4, r6, #16
 800279c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800279e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80027ac:	1d33      	adds	r3, r6, #4
 80027ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b0:	6838      	ldr	r0, [r7, #0]
 80027b2:	f001 f933 	bl	8003a1c <USB_DevInit>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e00d      	b.n	80027e4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 fafe 	bl	8003dde <USB_DevDisconnect>

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e267      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d075      	beq.n	80028f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280a:	4b88      	ldr	r3, [pc, #544]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d00c      	beq.n	8002830 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4b85      	ldr	r3, [pc, #532]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800281e:	2b08      	cmp	r3, #8
 8002820:	d112      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800282e:	d10b      	bne.n	8002848 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002830:	4b7e      	ldr	r3, [pc, #504]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x108>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d157      	bne.n	80028f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e242      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d106      	bne.n	8002860 <HAL_RCC_OscConfig+0x74>
 8002852:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a75      	ldr	r2, [pc, #468]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	e01d      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x98>
 800286a:	4b70      	ldr	r3, [pc, #448]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a6f      	ldr	r2, [pc, #444]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b6d      	ldr	r3, [pc, #436]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a6c      	ldr	r2, [pc, #432]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e00b      	b.n	800289c <HAL_RCC_OscConfig+0xb0>
 8002884:	4b69      	ldr	r3, [pc, #420]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a68      	ldr	r2, [pc, #416]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a65      	ldr	r2, [pc, #404]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d013      	beq.n	80028cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff f968 	bl	8001b78 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff f964 	bl	8001b78 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e207      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	4b5b      	ldr	r3, [pc, #364]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0xc0>
 80028ca:	e014      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7ff f954 	bl	8001b78 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff f950 	bl	8001b78 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1f3      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e6:	4b51      	ldr	r3, [pc, #324]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0xe8>
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002902:	4b4a      	ldr	r3, [pc, #296]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002916:	2b08      	cmp	r3, #8
 8002918:	d11c      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b44      	ldr	r3, [pc, #272]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002926:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d001      	beq.n	800293e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1c7      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4937      	ldr	r1, [pc, #220]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002952:	e03a      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d020      	beq.n	800299e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002962:	f7ff f909 	bl	8001b78 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296a:	f7ff f905 	bl	8001b78 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e1a8      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297c:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4925      	ldr	r1, [pc, #148]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
 800299c:	e015      	b.n	80029ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800299e:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCC_OscConfig+0x244>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7ff f8e8 	bl	8001b78 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7ff f8e4 	bl	8001b78 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e187      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1f0      	bne.n	80029ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d036      	beq.n	8002a44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029de:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <HAL_RCC_OscConfig+0x248>)
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e4:	f7ff f8c8 	bl	8001b78 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ec:	f7ff f8c4 	bl	8001b78 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e167      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_RCC_OscConfig+0x240>)
 8002a00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x200>
 8002a0a:	e01b      	b.n	8002a44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <HAL_RCC_OscConfig+0x248>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a12:	f7ff f8b1 	bl	8001b78 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	e00e      	b.n	8002a38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a1a:	f7ff f8ad 	bl	8001b78 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d907      	bls.n	8002a38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e150      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	42470000 	.word	0x42470000
 8002a34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ea      	bne.n	8002a1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8097 	beq.w	8002b80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a56:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b7d      	ldr	r3, [pc, #500]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a7c      	ldr	r2, [pc, #496]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b7a      	ldr	r3, [pc, #488]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a82:	4b77      	ldr	r3, [pc, #476]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a8e:	4b74      	ldr	r3, [pc, #464]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a73      	ldr	r2, [pc, #460]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9a:	f7ff f86d 	bl	8001b78 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7ff f869 	bl	8001b78 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e10c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_RCC_OscConfig+0x474>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d106      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2ea>
 8002ac8:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002acc:	4a63      	ldr	r2, [pc, #396]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	e01c      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x30c>
 8002ade:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	4a5e      	ldr	r2, [pc, #376]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aea:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0x324>
 8002af8:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afc:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
 8002b04:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a54      	ldr	r2, [pc, #336]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7ff f82e 	bl	8001b78 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	e00a      	b.n	8002b36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b20:	f7ff f82a 	bl	8001b78 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e0cb      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b36:	4b49      	ldr	r3, [pc, #292]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ee      	beq.n	8002b20 <HAL_RCC_OscConfig+0x334>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b44:	f7ff f818 	bl	8001b78 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	e00a      	b.n	8002b62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4c:	f7ff f814 	bl	8001b78 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e0b5      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b62:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1ee      	bne.n	8002b4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a1 	beq.w	8002ccc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b8a:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d05c      	beq.n	8002c50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d141      	bne.n	8002c22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba4:	f7fe ffe8 	bl	8001b78 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fe ffe4 	bl	8001b78 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e087      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	3b01      	subs	r3, #1
 8002be4:	041b      	lsls	r3, r3, #16
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	491b      	ldr	r1, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe ffbd 	bl	8001b78 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe ffb9 	bl	8001b78 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e05c      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x416>
 8002c20:	e054      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x478>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7fe ffa6 	bl	8001b78 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c30:	f7fe ffa2 	bl	8001b78 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e045      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCC_OscConfig+0x470>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x444>
 8002c4e:	e03d      	b.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d107      	bne.n	8002c68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e038      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_RCC_OscConfig+0x4ec>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d028      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d121      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d11a      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	085b      	lsrs	r3, r3, #1
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0cc      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d90c      	bls.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b65      	ldr	r3, [pc, #404]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b63      	ldr	r3, [pc, #396]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b8      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d020      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d30:	4b59      	ldr	r3, [pc, #356]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a58      	ldr	r2, [pc, #352]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d48:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4a52      	ldr	r2, [pc, #328]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d54:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	494d      	ldr	r1, [pc, #308]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d044      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d107      	bne.n	8002d8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d119      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d003      	beq.n	8002d9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e06f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e067      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dba:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f023 0203 	bic.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	4934      	ldr	r1, [pc, #208]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fed4 	bl	8001b78 <HAL_GetTick>
 8002dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd4:	f7fe fed0 	bl	8001b78 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e04f      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 020c 	and.w	r2, r3, #12
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d1eb      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b25      	ldr	r3, [pc, #148]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d20c      	bcs.n	8002e24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e032      	b.n	8002e8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e30:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	4916      	ldr	r1, [pc, #88]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d009      	beq.n	8002e62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	490e      	ldr	r1, [pc, #56]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e62:	f000 f821 	bl	8002ea8 <HAL_RCC_GetSysClockFreq>
 8002e66:	4602      	mov	r2, r0
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	490a      	ldr	r1, [pc, #40]	; (8002e9c <HAL_RCC_ClockConfig+0x1c0>)
 8002e74:	5ccb      	ldrb	r3, [r1, r3]
 8002e76:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e7e:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fe34 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40023c00 	.word	0x40023c00
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	08004844 	.word	0x08004844
 8002ea0:	20000024 	.word	0x20000024
 8002ea4:	20000028 	.word	0x20000028

08002ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b094      	sub	sp, #80	; 0x50
 8002eae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb8:	2300      	movs	r3, #0
 8002eba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec0:	4b79      	ldr	r3, [pc, #484]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d00d      	beq.n	8002ee8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	f200 80e1 	bhi.w	8003094 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x34>
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002eda:	e0db      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002edc:	4b73      	ldr	r3, [pc, #460]	; (80030ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002ede:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ee0:	e0db      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee2:	4b73      	ldr	r3, [pc, #460]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ee4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ee6:	e0d8      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4b6f      	ldr	r3, [pc, #444]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef2:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d063      	beq.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efe:	4b6a      	ldr	r3, [pc, #424]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	2200      	movs	r2, #0
 8002f06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
 8002f12:	2300      	movs	r3, #0
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
 8002f16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	f04f 0000 	mov.w	r0, #0
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	0159      	lsls	r1, r3, #5
 8002f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f2c:	0150      	lsls	r0, r2, #5
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4621      	mov	r1, r4
 8002f34:	1a51      	subs	r1, r2, r1
 8002f36:	6139      	str	r1, [r7, #16]
 8002f38:	4629      	mov	r1, r5
 8002f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	018b      	lsls	r3, r1, #6
 8002f50:	4651      	mov	r1, sl
 8002f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f56:	4651      	mov	r1, sl
 8002f58:	018a      	lsls	r2, r1, #6
 8002f5a:	4651      	mov	r1, sl
 8002f5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f60:	4659      	mov	r1, fp
 8002f62:	eb63 0901 	sbc.w	r9, r3, r1
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f7a:	4690      	mov	r8, r2
 8002f7c:	4699      	mov	r9, r3
 8002f7e:	4623      	mov	r3, r4
 8002f80:	eb18 0303 	adds.w	r3, r8, r3
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	462b      	mov	r3, r5
 8002f88:	eb49 0303 	adc.w	r3, r9, r3
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f9a:	4629      	mov	r1, r5
 8002f9c:	024b      	lsls	r3, r1, #9
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	024a      	lsls	r2, r1, #9
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fae:	2200      	movs	r2, #0
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb8:	f7fd fd88 	bl	8000acc <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fc4:	e058      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	099b      	lsrs	r3, r3, #6
 8002fcc:	2200      	movs	r2, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fd6:	623b      	str	r3, [r7, #32]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
 8002fdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	f04f 0000 	mov.w	r0, #0
 8002fe8:	f04f 0100 	mov.w	r1, #0
 8002fec:	0159      	lsls	r1, r3, #5
 8002fee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ff2:	0150      	lsls	r0, r2, #5
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ffe:	4649      	mov	r1, r9
 8003000:	eb63 0b01 	sbc.w	fp, r3, r1
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003018:	ebb2 040a 	subs.w	r4, r2, sl
 800301c:	eb63 050b 	sbc.w	r5, r3, fp
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	00eb      	lsls	r3, r5, #3
 800302a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800302e:	00e2      	lsls	r2, r4, #3
 8003030:	4614      	mov	r4, r2
 8003032:	461d      	mov	r5, r3
 8003034:	4643      	mov	r3, r8
 8003036:	18e3      	adds	r3, r4, r3
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	464b      	mov	r3, r9
 800303c:	eb45 0303 	adc.w	r3, r5, r3
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800304e:	4629      	mov	r1, r5
 8003050:	028b      	lsls	r3, r1, #10
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003058:	4621      	mov	r1, r4
 800305a:	028a      	lsls	r2, r1, #10
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003062:	2200      	movs	r2, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	61fa      	str	r2, [r7, #28]
 8003068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800306c:	f7fd fd2e 	bl	8000acc <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4613      	mov	r3, r2
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	3301      	adds	r3, #1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800308a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003092:	e002      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003096:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800309c:	4618      	mov	r0, r3
 800309e:	3750      	adds	r7, #80	; 0x50
 80030a0:	46bd      	mov	sp, r7
 80030a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	007a1200 	.word	0x007a1200

080030b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000024 	.word	0x20000024

080030cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030d0:	f7ff fff0 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0a9b      	lsrs	r3, r3, #10
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4903      	ldr	r1, [pc, #12]	; (80030f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40023800 	.word	0x40023800
 80030f0:	08004854 	.word	0x08004854

080030f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030f8:	f7ff ffdc 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	0b5b      	lsrs	r3, r3, #13
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	; (8003118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40023800 	.word	0x40023800
 8003118:	08004854 	.word	0x08004854

0800311c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e03f      	b.n	80031ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fe fb64 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800315e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f929 	bl	80033b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003174:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003184:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003194:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b08a      	sub	sp, #40	; 0x28
 80031ba:	af02      	add	r7, sp, #8
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d17c      	bne.n	80032d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_UART_Transmit+0x2c>
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e075      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Transmit+0x3e>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e06e      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2221      	movs	r2, #33	; 0x21
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800320a:	f7fe fcb5 	bl	8001b78 <HAL_GetTick>
 800320e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d108      	bne.n	8003238 <HAL_UART_Transmit+0x82>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d104      	bne.n	8003238 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	e003      	b.n	8003240 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003248:	e02a      	b.n	80032a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f840 	bl	80032da <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e036      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10b      	bne.n	8003282 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	3302      	adds	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e007      	b.n	8003292 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	781a      	ldrb	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	3301      	adds	r3, #1
 8003290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1cf      	bne.n	800324a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2140      	movs	r1, #64	; 0x40
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f810 	bl	80032da <UART_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e006      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032cc:	2300      	movs	r3, #0
 80032ce:	e000      	b.n	80032d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
  }
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b090      	sub	sp, #64	; 0x40
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4613      	mov	r3, r2
 80032e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ea:	e050      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f2:	d04c      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <UART_WaitOnFlagUntilTimeout+0x30>
 80032fa:	f7fe fc3d 	bl	8001b78 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003306:	429a      	cmp	r2, r3
 8003308:	d241      	bcs.n	800338e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800332a:	637a      	str	r2, [r7, #52]	; 0x34
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003332:	e841 2300 	strex	r3, r2, [r1]
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1e5      	bne.n	800330a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3314      	adds	r3, #20
 8003344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	e853 3f00 	ldrex	r3, [r3]
 800334c:	613b      	str	r3, [r7, #16]
   return(result);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3314      	adds	r3, #20
 800335c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800335e:	623a      	str	r2, [r7, #32]
 8003360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003362:	69f9      	ldr	r1, [r7, #28]
 8003364:	6a3a      	ldr	r2, [r7, #32]
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	61bb      	str	r3, [r7, #24]
   return(result);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1e5      	bne.n	800333e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e00f      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d09f      	beq.n	80032ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3740      	adds	r7, #64	; 0x40
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033bc:	b0c0      	sub	sp, #256	; 0x100
 80033be:	af00      	add	r7, sp, #0
 80033c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	68d9      	ldr	r1, [r3, #12]
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	ea40 0301 	orr.w	r3, r0, r1
 80033e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4313      	orrs	r3, r2
 8003400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003410:	f021 010c 	bic.w	r1, r1, #12
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800341e:	430b      	orrs	r3, r1
 8003420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003432:	6999      	ldr	r1, [r3, #24]
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	ea40 0301 	orr.w	r3, r0, r1
 800343e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b8f      	ldr	r3, [pc, #572]	; (8003684 <UART_SetConfig+0x2cc>)
 8003448:	429a      	cmp	r2, r3
 800344a:	d005      	beq.n	8003458 <UART_SetConfig+0xa0>
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b8d      	ldr	r3, [pc, #564]	; (8003688 <UART_SetConfig+0x2d0>)
 8003454:	429a      	cmp	r2, r3
 8003456:	d104      	bne.n	8003462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003458:	f7ff fe4c 	bl	80030f4 <HAL_RCC_GetPCLK2Freq>
 800345c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003460:	e003      	b.n	800346a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003462:	f7ff fe33 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8003466:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346e:	69db      	ldr	r3, [r3, #28]
 8003470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003474:	f040 810c 	bne.w	8003690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347c:	2200      	movs	r2, #0
 800347e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003482:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	1891      	adds	r1, r2, r2
 8003490:	65b9      	str	r1, [r7, #88]	; 0x58
 8003492:	415b      	adcs	r3, r3
 8003494:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800349a:	4621      	mov	r1, r4
 800349c:	eb12 0801 	adds.w	r8, r2, r1
 80034a0:	4629      	mov	r1, r5
 80034a2:	eb43 0901 	adc.w	r9, r3, r1
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ba:	4690      	mov	r8, r2
 80034bc:	4699      	mov	r9, r3
 80034be:	4623      	mov	r3, r4
 80034c0:	eb18 0303 	adds.w	r3, r8, r3
 80034c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034c8:	462b      	mov	r3, r5
 80034ca:	eb49 0303 	adc.w	r3, r9, r3
 80034ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034e6:	460b      	mov	r3, r1
 80034e8:	18db      	adds	r3, r3, r3
 80034ea:	653b      	str	r3, [r7, #80]	; 0x50
 80034ec:	4613      	mov	r3, r2
 80034ee:	eb42 0303 	adc.w	r3, r2, r3
 80034f2:	657b      	str	r3, [r7, #84]	; 0x54
 80034f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034fc:	f7fd fae6 	bl	8000acc <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4b61      	ldr	r3, [pc, #388]	; (800368c <UART_SetConfig+0x2d4>)
 8003506:	fba3 2302 	umull	r2, r3, r3, r2
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	011c      	lsls	r4, r3, #4
 800350e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003512:	2200      	movs	r2, #0
 8003514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003518:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800351c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	1891      	adds	r1, r2, r2
 8003526:	64b9      	str	r1, [r7, #72]	; 0x48
 8003528:	415b      	adcs	r3, r3
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800352c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003530:	4641      	mov	r1, r8
 8003532:	eb12 0a01 	adds.w	sl, r2, r1
 8003536:	4649      	mov	r1, r9
 8003538:	eb43 0b01 	adc.w	fp, r3, r1
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800354c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003550:	4692      	mov	sl, r2
 8003552:	469b      	mov	fp, r3
 8003554:	4643      	mov	r3, r8
 8003556:	eb1a 0303 	adds.w	r3, sl, r3
 800355a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800355e:	464b      	mov	r3, r9
 8003560:	eb4b 0303 	adc.w	r3, fp, r3
 8003564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003574:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800357c:	460b      	mov	r3, r1
 800357e:	18db      	adds	r3, r3, r3
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
 8003582:	4613      	mov	r3, r2
 8003584:	eb42 0303 	adc.w	r3, r2, r3
 8003588:	647b      	str	r3, [r7, #68]	; 0x44
 800358a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800358e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003592:	f7fd fa9b 	bl	8000acc <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4611      	mov	r1, r2
 800359c:	4b3b      	ldr	r3, [pc, #236]	; (800368c <UART_SetConfig+0x2d4>)
 800359e:	fba3 2301 	umull	r2, r3, r3, r1
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	2264      	movs	r2, #100	; 0x64
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	1acb      	subs	r3, r1, r3
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035b2:	4b36      	ldr	r3, [pc, #216]	; (800368c <UART_SetConfig+0x2d4>)
 80035b4:	fba3 2302 	umull	r2, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035c0:	441c      	add	r4, r3
 80035c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035c6:	2200      	movs	r2, #0
 80035c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035d4:	4642      	mov	r2, r8
 80035d6:	464b      	mov	r3, r9
 80035d8:	1891      	adds	r1, r2, r2
 80035da:	63b9      	str	r1, [r7, #56]	; 0x38
 80035dc:	415b      	adcs	r3, r3
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035e4:	4641      	mov	r1, r8
 80035e6:	1851      	adds	r1, r2, r1
 80035e8:	6339      	str	r1, [r7, #48]	; 0x30
 80035ea:	4649      	mov	r1, r9
 80035ec:	414b      	adcs	r3, r1
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035fc:	4659      	mov	r1, fp
 80035fe:	00cb      	lsls	r3, r1, #3
 8003600:	4651      	mov	r1, sl
 8003602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003606:	4651      	mov	r1, sl
 8003608:	00ca      	lsls	r2, r1, #3
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	4603      	mov	r3, r0
 8003610:	4642      	mov	r2, r8
 8003612:	189b      	adds	r3, r3, r2
 8003614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003618:	464b      	mov	r3, r9
 800361a:	460a      	mov	r2, r1
 800361c:	eb42 0303 	adc.w	r3, r2, r3
 8003620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003630:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003638:	460b      	mov	r3, r1
 800363a:	18db      	adds	r3, r3, r3
 800363c:	62bb      	str	r3, [r7, #40]	; 0x28
 800363e:	4613      	mov	r3, r2
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800364a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800364e:	f7fd fa3d 	bl	8000acc <__aeabi_uldivmod>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <UART_SetConfig+0x2d4>)
 8003658:	fba3 1302 	umull	r1, r3, r3, r2
 800365c:	095b      	lsrs	r3, r3, #5
 800365e:	2164      	movs	r1, #100	; 0x64
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	3332      	adds	r3, #50	; 0x32
 800366a:	4a08      	ldr	r2, [pc, #32]	; (800368c <UART_SetConfig+0x2d4>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	f003 0207 	and.w	r2, r3, #7
 8003676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4422      	add	r2, r4
 800367e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003680:	e105      	b.n	800388e <UART_SetConfig+0x4d6>
 8003682:	bf00      	nop
 8003684:	40011000 	.word	0x40011000
 8003688:	40011400 	.word	0x40011400
 800368c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003694:	2200      	movs	r2, #0
 8003696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800369a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800369e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036a2:	4642      	mov	r2, r8
 80036a4:	464b      	mov	r3, r9
 80036a6:	1891      	adds	r1, r2, r2
 80036a8:	6239      	str	r1, [r7, #32]
 80036aa:	415b      	adcs	r3, r3
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
 80036ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036b2:	4641      	mov	r1, r8
 80036b4:	1854      	adds	r4, r2, r1
 80036b6:	4649      	mov	r1, r9
 80036b8:	eb43 0501 	adc.w	r5, r3, r1
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	00eb      	lsls	r3, r5, #3
 80036c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ca:	00e2      	lsls	r2, r4, #3
 80036cc:	4614      	mov	r4, r2
 80036ce:	461d      	mov	r5, r3
 80036d0:	4643      	mov	r3, r8
 80036d2:	18e3      	adds	r3, r4, r3
 80036d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036d8:	464b      	mov	r3, r9
 80036da:	eb45 0303 	adc.w	r3, r5, r3
 80036de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036fe:	4629      	mov	r1, r5
 8003700:	008b      	lsls	r3, r1, #2
 8003702:	4621      	mov	r1, r4
 8003704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003708:	4621      	mov	r1, r4
 800370a:	008a      	lsls	r2, r1, #2
 800370c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003710:	f7fd f9dc 	bl	8000acc <__aeabi_uldivmod>
 8003714:	4602      	mov	r2, r0
 8003716:	460b      	mov	r3, r1
 8003718:	4b60      	ldr	r3, [pc, #384]	; (800389c <UART_SetConfig+0x4e4>)
 800371a:	fba3 2302 	umull	r2, r3, r3, r2
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	011c      	lsls	r4, r3, #4
 8003722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003726:	2200      	movs	r2, #0
 8003728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800372c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003734:	4642      	mov	r2, r8
 8003736:	464b      	mov	r3, r9
 8003738:	1891      	adds	r1, r2, r2
 800373a:	61b9      	str	r1, [r7, #24]
 800373c:	415b      	adcs	r3, r3
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003744:	4641      	mov	r1, r8
 8003746:	1851      	adds	r1, r2, r1
 8003748:	6139      	str	r1, [r7, #16]
 800374a:	4649      	mov	r1, r9
 800374c:	414b      	adcs	r3, r1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800375c:	4659      	mov	r1, fp
 800375e:	00cb      	lsls	r3, r1, #3
 8003760:	4651      	mov	r1, sl
 8003762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003766:	4651      	mov	r1, sl
 8003768:	00ca      	lsls	r2, r1, #3
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	4603      	mov	r3, r0
 8003770:	4642      	mov	r2, r8
 8003772:	189b      	adds	r3, r3, r2
 8003774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003778:	464b      	mov	r3, r9
 800377a:	460a      	mov	r2, r1
 800377c:	eb42 0303 	adc.w	r3, r2, r3
 8003780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	67bb      	str	r3, [r7, #120]	; 0x78
 800378e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800379c:	4649      	mov	r1, r9
 800379e:	008b      	lsls	r3, r1, #2
 80037a0:	4641      	mov	r1, r8
 80037a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037a6:	4641      	mov	r1, r8
 80037a8:	008a      	lsls	r2, r1, #2
 80037aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037ae:	f7fd f98d 	bl	8000acc <__aeabi_uldivmod>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <UART_SetConfig+0x4e4>)
 80037b8:	fba3 1302 	umull	r1, r3, r3, r2
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	2164      	movs	r1, #100	; 0x64
 80037c0:	fb01 f303 	mul.w	r3, r1, r3
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	3332      	adds	r3, #50	; 0x32
 80037ca:	4a34      	ldr	r2, [pc, #208]	; (800389c <UART_SetConfig+0x4e4>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d6:	441c      	add	r4, r3
 80037d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037dc:	2200      	movs	r2, #0
 80037de:	673b      	str	r3, [r7, #112]	; 0x70
 80037e0:	677a      	str	r2, [r7, #116]	; 0x74
 80037e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037e6:	4642      	mov	r2, r8
 80037e8:	464b      	mov	r3, r9
 80037ea:	1891      	adds	r1, r2, r2
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	415b      	adcs	r3, r3
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f6:	4641      	mov	r1, r8
 80037f8:	1851      	adds	r1, r2, r1
 80037fa:	6039      	str	r1, [r7, #0]
 80037fc:	4649      	mov	r1, r9
 80037fe:	414b      	adcs	r3, r1
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800380e:	4659      	mov	r1, fp
 8003810:	00cb      	lsls	r3, r1, #3
 8003812:	4651      	mov	r1, sl
 8003814:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003818:	4651      	mov	r1, sl
 800381a:	00ca      	lsls	r2, r1, #3
 800381c:	4610      	mov	r0, r2
 800381e:	4619      	mov	r1, r3
 8003820:	4603      	mov	r3, r0
 8003822:	4642      	mov	r2, r8
 8003824:	189b      	adds	r3, r3, r2
 8003826:	66bb      	str	r3, [r7, #104]	; 0x68
 8003828:	464b      	mov	r3, r9
 800382a:	460a      	mov	r2, r1
 800382c:	eb42 0303 	adc.w	r3, r2, r3
 8003830:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	663b      	str	r3, [r7, #96]	; 0x60
 800383c:	667a      	str	r2, [r7, #100]	; 0x64
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800384a:	4649      	mov	r1, r9
 800384c:	008b      	lsls	r3, r1, #2
 800384e:	4641      	mov	r1, r8
 8003850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003854:	4641      	mov	r1, r8
 8003856:	008a      	lsls	r2, r1, #2
 8003858:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800385c:	f7fd f936 	bl	8000acc <__aeabi_uldivmod>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <UART_SetConfig+0x4e4>)
 8003866:	fba3 1302 	umull	r1, r3, r3, r2
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2164      	movs	r1, #100	; 0x64
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	3332      	adds	r3, #50	; 0x32
 8003878:	4a08      	ldr	r2, [pc, #32]	; (800389c <UART_SetConfig+0x4e4>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f003 020f 	and.w	r2, r3, #15
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4422      	add	r2, r4
 800388c:	609a      	str	r2, [r3, #8]
}
 800388e:	bf00      	nop
 8003890:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003894:	46bd      	mov	sp, r7
 8003896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800389a:	bf00      	nop
 800389c:	51eb851f 	.word	0x51eb851f

080038a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038a0:	b084      	sub	sp, #16
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	f107 001c 	add.w	r0, r7, #28
 80038ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d122      	bne.n	80038fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 faa2 	bl	8003e3c <USB_CoreReset>
 80038f8:	4603      	mov	r3, r0
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e01a      	b.n	8003934 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fa96 	bl	8003e3c <USB_CoreReset>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
 8003926:	e005      	b.n	8003934 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10b      	bne.n	8003952 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f043 0206 	orr.w	r2, r3, #6
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f043 0220 	orr.w	r2, r3, #32
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003952:	7bfb      	ldrb	r3, [r7, #15]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800395e:	b004      	add	sp, #16
 8003960:	4770      	bx	lr

08003962 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f023 0201 	bic.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d115      	bne.n	80039d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f7fe f8ec 	bl	8001b90 <HAL_Delay>
      ms++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3301      	adds	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa2e 	bl	8003e20 <USB_GetMode>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d01e      	beq.n	8003a08 <USB_SetCurrentMode+0x84>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b31      	cmp	r3, #49	; 0x31
 80039ce:	d9f0      	bls.n	80039b2 <USB_SetCurrentMode+0x2e>
 80039d0:	e01a      	b.n	8003a08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d115      	bne.n	8003a04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039e4:	2001      	movs	r0, #1
 80039e6:	f7fe f8d3 	bl	8001b90 <HAL_Delay>
      ms++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3301      	adds	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fa15 	bl	8003e20 <USB_GetMode>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <USB_SetCurrentMode+0x84>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b31      	cmp	r3, #49	; 0x31
 8003a00:	d9f0      	bls.n	80039e4 <USB_SetCurrentMode+0x60>
 8003a02:	e001      	b.n	8003a08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e005      	b.n	8003a14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b32      	cmp	r3, #50	; 0x32
 8003a0c:	d101      	bne.n	8003a12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	e009      	b.n	8003a50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3340      	adds	r3, #64	; 0x40
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0e      	cmp	r3, #14
 8003a54:	d9f2      	bls.n	8003a3c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11c      	bne.n	8003a96 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38
 8003a94:	e00b      	b.n	8003aae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac8:	461a      	mov	r2, r3
 8003aca:	680b      	ldr	r3, [r1, #0]
 8003acc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d10c      	bne.n	8003aee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ada:	2100      	movs	r1, #0
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f965 	bl	8003dac <USB_SetDevSpeed>
 8003ae2:	e008      	b.n	8003af6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f960 	bl	8003dac <USB_SetDevSpeed>
 8003aec:	e003      	b.n	8003af6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003aee:	2103      	movs	r1, #3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f95b 	bl	8003dac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003af6:	2110      	movs	r1, #16
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f8f3 	bl	8003ce4 <USB_FlushTxFifo>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f91f 	bl	8003d4c <USB_FlushRxFifo>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	461a      	mov	r2, r3
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	e043      	b.n	8003bca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b58:	d118      	bne.n	8003b8c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	e013      	b.n	8003b9e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b82:	461a      	mov	r2, r3
 8003b84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e008      	b.n	8003b9e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003baa:	461a      	mov	r2, r3
 8003bac:	2300      	movs	r3, #0
 8003bae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003bc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d3b7      	bcc.n	8003b42 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
 8003bd6:	e043      	b.n	8003c60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bee:	d118      	bne.n	8003c22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	461a      	mov	r2, r3
 8003c04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e013      	b.n	8003c34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	e008      	b.n	8003c34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	461a      	mov	r2, r3
 8003c30:	2300      	movs	r3, #0
 8003c32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	461a      	mov	r2, r3
 8003c42:	2300      	movs	r3, #0
 8003c44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	461a      	mov	r2, r3
 8003c54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d3b7      	bcc.n	8003bd8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d105      	bne.n	8003c9c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f043 0210 	orr.w	r2, r3, #16
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	4b0f      	ldr	r3, [pc, #60]	; (8003ce0 <USB_DevInit+0x2c4>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d005      	beq.n	8003cba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f043 0208 	orr.w	r2, r3, #8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d107      	bne.n	8003cd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cdc:	b004      	add	sp, #16
 8003cde:	4770      	bx	lr
 8003ce0:	803c3800 	.word	0x803c3800

08003ce4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <USB_FlushTxFifo+0x64>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e01b      	b.n	8003d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	daf2      	bge.n	8003cf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	019b      	lsls	r3, r3, #6
 8003d14:	f043 0220 	orr.w	r2, r3, #32
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a08      	ldr	r2, [pc, #32]	; (8003d48 <USB_FlushTxFifo+0x64>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d901      	bls.n	8003d2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e006      	b.n	8003d3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d0f0      	beq.n	8003d1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	00030d40 	.word	0x00030d40

08003d4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a11      	ldr	r2, [pc, #68]	; (8003da8 <USB_FlushRxFifo+0x5c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e018      	b.n	8003d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	daf2      	bge.n	8003d58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2210      	movs	r2, #16
 8003d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <USB_FlushRxFifo+0x5c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e006      	b.n	8003d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d0f0      	beq.n	8003d7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	00030d40 	.word	0x00030d40

08003dac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003df8:	f023 0303 	bic.w	r3, r3, #3
 8003dfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0c:	f043 0302 	orr.w	r3, r3, #2
 8003e10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4a13      	ldr	r2, [pc, #76]	; (8003ea0 <USB_CoreReset+0x64>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e01b      	b.n	8003e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	daf2      	bge.n	8003e48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f043 0201 	orr.w	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <USB_CoreReset+0x64>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e006      	b.n	8003e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d0f0      	beq.n	8003e72 <USB_CoreReset+0x36>

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	00030d40 	.word	0x00030d40

08003ea4 <__errno>:
 8003ea4:	4b01      	ldr	r3, [pc, #4]	; (8003eac <__errno+0x8>)
 8003ea6:	6818      	ldr	r0, [r3, #0]
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000030 	.word	0x20000030

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	4d0d      	ldr	r5, [pc, #52]	; (8003ee8 <__libc_init_array+0x38>)
 8003eb4:	4c0d      	ldr	r4, [pc, #52]	; (8003eec <__libc_init_array+0x3c>)
 8003eb6:	1b64      	subs	r4, r4, r5
 8003eb8:	10a4      	asrs	r4, r4, #2
 8003eba:	2600      	movs	r6, #0
 8003ebc:	42a6      	cmp	r6, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	4d0b      	ldr	r5, [pc, #44]	; (8003ef0 <__libc_init_array+0x40>)
 8003ec2:	4c0c      	ldr	r4, [pc, #48]	; (8003ef4 <__libc_init_array+0x44>)
 8003ec4:	f000 fc8e 	bl	80047e4 <_init>
 8003ec8:	1b64      	subs	r4, r4, r5
 8003eca:	10a4      	asrs	r4, r4, #2
 8003ecc:	2600      	movs	r6, #0
 8003ece:	42a6      	cmp	r6, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed8:	4798      	blx	r3
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee2:	4798      	blx	r3
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	08004898 	.word	0x08004898
 8003eec:	08004898 	.word	0x08004898
 8003ef0:	08004898 	.word	0x08004898
 8003ef4:	0800489c 	.word	0x0800489c

08003ef8 <memset>:
 8003ef8:	4402      	add	r2, r0
 8003efa:	4603      	mov	r3, r0
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d100      	bne.n	8003f02 <memset+0xa>
 8003f00:	4770      	bx	lr
 8003f02:	f803 1b01 	strb.w	r1, [r3], #1
 8003f06:	e7f9      	b.n	8003efc <memset+0x4>

08003f08 <siprintf>:
 8003f08:	b40e      	push	{r1, r2, r3}
 8003f0a:	b500      	push	{lr}
 8003f0c:	b09c      	sub	sp, #112	; 0x70
 8003f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f10:	9002      	str	r0, [sp, #8]
 8003f12:	9006      	str	r0, [sp, #24]
 8003f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f18:	4809      	ldr	r0, [pc, #36]	; (8003f40 <siprintf+0x38>)
 8003f1a:	9107      	str	r1, [sp, #28]
 8003f1c:	9104      	str	r1, [sp, #16]
 8003f1e:	4909      	ldr	r1, [pc, #36]	; (8003f44 <siprintf+0x3c>)
 8003f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f24:	9105      	str	r1, [sp, #20]
 8003f26:	6800      	ldr	r0, [r0, #0]
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	a902      	add	r1, sp, #8
 8003f2c:	f000 f868 	bl	8004000 <_svfiprintf_r>
 8003f30:	9b02      	ldr	r3, [sp, #8]
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	b01c      	add	sp, #112	; 0x70
 8003f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f3c:	b003      	add	sp, #12
 8003f3e:	4770      	bx	lr
 8003f40:	20000030 	.word	0x20000030
 8003f44:	ffff0208 	.word	0xffff0208

08003f48 <__ssputs_r>:
 8003f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f4c:	688e      	ldr	r6, [r1, #8]
 8003f4e:	429e      	cmp	r6, r3
 8003f50:	4682      	mov	sl, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4690      	mov	r8, r2
 8003f56:	461f      	mov	r7, r3
 8003f58:	d838      	bhi.n	8003fcc <__ssputs_r+0x84>
 8003f5a:	898a      	ldrh	r2, [r1, #12]
 8003f5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f60:	d032      	beq.n	8003fc8 <__ssputs_r+0x80>
 8003f62:	6825      	ldr	r5, [r4, #0]
 8003f64:	6909      	ldr	r1, [r1, #16]
 8003f66:	eba5 0901 	sub.w	r9, r5, r1
 8003f6a:	6965      	ldr	r5, [r4, #20]
 8003f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f74:	3301      	adds	r3, #1
 8003f76:	444b      	add	r3, r9
 8003f78:	106d      	asrs	r5, r5, #1
 8003f7a:	429d      	cmp	r5, r3
 8003f7c:	bf38      	it	cc
 8003f7e:	461d      	movcc	r5, r3
 8003f80:	0553      	lsls	r3, r2, #21
 8003f82:	d531      	bpl.n	8003fe8 <__ssputs_r+0xa0>
 8003f84:	4629      	mov	r1, r5
 8003f86:	f000 fb63 	bl	8004650 <_malloc_r>
 8003f8a:	4606      	mov	r6, r0
 8003f8c:	b950      	cbnz	r0, 8003fa4 <__ssputs_r+0x5c>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	f8ca 3000 	str.w	r3, [sl]
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f9a:	81a3      	strh	r3, [r4, #12]
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa4:	6921      	ldr	r1, [r4, #16]
 8003fa6:	464a      	mov	r2, r9
 8003fa8:	f000 fabe 	bl	8004528 <memcpy>
 8003fac:	89a3      	ldrh	r3, [r4, #12]
 8003fae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb6:	81a3      	strh	r3, [r4, #12]
 8003fb8:	6126      	str	r6, [r4, #16]
 8003fba:	6165      	str	r5, [r4, #20]
 8003fbc:	444e      	add	r6, r9
 8003fbe:	eba5 0509 	sub.w	r5, r5, r9
 8003fc2:	6026      	str	r6, [r4, #0]
 8003fc4:	60a5      	str	r5, [r4, #8]
 8003fc6:	463e      	mov	r6, r7
 8003fc8:	42be      	cmp	r6, r7
 8003fca:	d900      	bls.n	8003fce <__ssputs_r+0x86>
 8003fcc:	463e      	mov	r6, r7
 8003fce:	6820      	ldr	r0, [r4, #0]
 8003fd0:	4632      	mov	r2, r6
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	f000 fab6 	bl	8004544 <memmove>
 8003fd8:	68a3      	ldr	r3, [r4, #8]
 8003fda:	1b9b      	subs	r3, r3, r6
 8003fdc:	60a3      	str	r3, [r4, #8]
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	4433      	add	r3, r6
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	e7db      	b.n	8003fa0 <__ssputs_r+0x58>
 8003fe8:	462a      	mov	r2, r5
 8003fea:	f000 fba5 	bl	8004738 <_realloc_r>
 8003fee:	4606      	mov	r6, r0
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d1e1      	bne.n	8003fb8 <__ssputs_r+0x70>
 8003ff4:	6921      	ldr	r1, [r4, #16]
 8003ff6:	4650      	mov	r0, sl
 8003ff8:	f000 fabe 	bl	8004578 <_free_r>
 8003ffc:	e7c7      	b.n	8003f8e <__ssputs_r+0x46>
	...

08004000 <_svfiprintf_r>:
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	4698      	mov	r8, r3
 8004006:	898b      	ldrh	r3, [r1, #12]
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	b09d      	sub	sp, #116	; 0x74
 800400c:	4607      	mov	r7, r0
 800400e:	460d      	mov	r5, r1
 8004010:	4614      	mov	r4, r2
 8004012:	d50e      	bpl.n	8004032 <_svfiprintf_r+0x32>
 8004014:	690b      	ldr	r3, [r1, #16]
 8004016:	b963      	cbnz	r3, 8004032 <_svfiprintf_r+0x32>
 8004018:	2140      	movs	r1, #64	; 0x40
 800401a:	f000 fb19 	bl	8004650 <_malloc_r>
 800401e:	6028      	str	r0, [r5, #0]
 8004020:	6128      	str	r0, [r5, #16]
 8004022:	b920      	cbnz	r0, 800402e <_svfiprintf_r+0x2e>
 8004024:	230c      	movs	r3, #12
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	f04f 30ff 	mov.w	r0, #4294967295
 800402c:	e0d1      	b.n	80041d2 <_svfiprintf_r+0x1d2>
 800402e:	2340      	movs	r3, #64	; 0x40
 8004030:	616b      	str	r3, [r5, #20]
 8004032:	2300      	movs	r3, #0
 8004034:	9309      	str	r3, [sp, #36]	; 0x24
 8004036:	2320      	movs	r3, #32
 8004038:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800403c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004040:	2330      	movs	r3, #48	; 0x30
 8004042:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041ec <_svfiprintf_r+0x1ec>
 8004046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800404a:	f04f 0901 	mov.w	r9, #1
 800404e:	4623      	mov	r3, r4
 8004050:	469a      	mov	sl, r3
 8004052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004056:	b10a      	cbz	r2, 800405c <_svfiprintf_r+0x5c>
 8004058:	2a25      	cmp	r2, #37	; 0x25
 800405a:	d1f9      	bne.n	8004050 <_svfiprintf_r+0x50>
 800405c:	ebba 0b04 	subs.w	fp, sl, r4
 8004060:	d00b      	beq.n	800407a <_svfiprintf_r+0x7a>
 8004062:	465b      	mov	r3, fp
 8004064:	4622      	mov	r2, r4
 8004066:	4629      	mov	r1, r5
 8004068:	4638      	mov	r0, r7
 800406a:	f7ff ff6d 	bl	8003f48 <__ssputs_r>
 800406e:	3001      	adds	r0, #1
 8004070:	f000 80aa 	beq.w	80041c8 <_svfiprintf_r+0x1c8>
 8004074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004076:	445a      	add	r2, fp
 8004078:	9209      	str	r2, [sp, #36]	; 0x24
 800407a:	f89a 3000 	ldrb.w	r3, [sl]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80a2 	beq.w	80041c8 <_svfiprintf_r+0x1c8>
 8004084:	2300      	movs	r3, #0
 8004086:	f04f 32ff 	mov.w	r2, #4294967295
 800408a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800408e:	f10a 0a01 	add.w	sl, sl, #1
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	9307      	str	r3, [sp, #28]
 8004096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800409a:	931a      	str	r3, [sp, #104]	; 0x68
 800409c:	4654      	mov	r4, sl
 800409e:	2205      	movs	r2, #5
 80040a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a4:	4851      	ldr	r0, [pc, #324]	; (80041ec <_svfiprintf_r+0x1ec>)
 80040a6:	f7fc f8a3 	bl	80001f0 <memchr>
 80040aa:	9a04      	ldr	r2, [sp, #16]
 80040ac:	b9d8      	cbnz	r0, 80040e6 <_svfiprintf_r+0xe6>
 80040ae:	06d0      	lsls	r0, r2, #27
 80040b0:	bf44      	itt	mi
 80040b2:	2320      	movmi	r3, #32
 80040b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b8:	0711      	lsls	r1, r2, #28
 80040ba:	bf44      	itt	mi
 80040bc:	232b      	movmi	r3, #43	; 0x2b
 80040be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040c2:	f89a 3000 	ldrb.w	r3, [sl]
 80040c6:	2b2a      	cmp	r3, #42	; 0x2a
 80040c8:	d015      	beq.n	80040f6 <_svfiprintf_r+0xf6>
 80040ca:	9a07      	ldr	r2, [sp, #28]
 80040cc:	4654      	mov	r4, sl
 80040ce:	2000      	movs	r0, #0
 80040d0:	f04f 0c0a 	mov.w	ip, #10
 80040d4:	4621      	mov	r1, r4
 80040d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040da:	3b30      	subs	r3, #48	; 0x30
 80040dc:	2b09      	cmp	r3, #9
 80040de:	d94e      	bls.n	800417e <_svfiprintf_r+0x17e>
 80040e0:	b1b0      	cbz	r0, 8004110 <_svfiprintf_r+0x110>
 80040e2:	9207      	str	r2, [sp, #28]
 80040e4:	e014      	b.n	8004110 <_svfiprintf_r+0x110>
 80040e6:	eba0 0308 	sub.w	r3, r0, r8
 80040ea:	fa09 f303 	lsl.w	r3, r9, r3
 80040ee:	4313      	orrs	r3, r2
 80040f0:	9304      	str	r3, [sp, #16]
 80040f2:	46a2      	mov	sl, r4
 80040f4:	e7d2      	b.n	800409c <_svfiprintf_r+0x9c>
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	1d19      	adds	r1, r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	9103      	str	r1, [sp, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bfbb      	ittet	lt
 8004102:	425b      	neglt	r3, r3
 8004104:	f042 0202 	orrlt.w	r2, r2, #2
 8004108:	9307      	strge	r3, [sp, #28]
 800410a:	9307      	strlt	r3, [sp, #28]
 800410c:	bfb8      	it	lt
 800410e:	9204      	strlt	r2, [sp, #16]
 8004110:	7823      	ldrb	r3, [r4, #0]
 8004112:	2b2e      	cmp	r3, #46	; 0x2e
 8004114:	d10c      	bne.n	8004130 <_svfiprintf_r+0x130>
 8004116:	7863      	ldrb	r3, [r4, #1]
 8004118:	2b2a      	cmp	r3, #42	; 0x2a
 800411a:	d135      	bne.n	8004188 <_svfiprintf_r+0x188>
 800411c:	9b03      	ldr	r3, [sp, #12]
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	9203      	str	r2, [sp, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	bfb8      	it	lt
 8004128:	f04f 33ff 	movlt.w	r3, #4294967295
 800412c:	3402      	adds	r4, #2
 800412e:	9305      	str	r3, [sp, #20]
 8004130:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041fc <_svfiprintf_r+0x1fc>
 8004134:	7821      	ldrb	r1, [r4, #0]
 8004136:	2203      	movs	r2, #3
 8004138:	4650      	mov	r0, sl
 800413a:	f7fc f859 	bl	80001f0 <memchr>
 800413e:	b140      	cbz	r0, 8004152 <_svfiprintf_r+0x152>
 8004140:	2340      	movs	r3, #64	; 0x40
 8004142:	eba0 000a 	sub.w	r0, r0, sl
 8004146:	fa03 f000 	lsl.w	r0, r3, r0
 800414a:	9b04      	ldr	r3, [sp, #16]
 800414c:	4303      	orrs	r3, r0
 800414e:	3401      	adds	r4, #1
 8004150:	9304      	str	r3, [sp, #16]
 8004152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004156:	4826      	ldr	r0, [pc, #152]	; (80041f0 <_svfiprintf_r+0x1f0>)
 8004158:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800415c:	2206      	movs	r2, #6
 800415e:	f7fc f847 	bl	80001f0 <memchr>
 8004162:	2800      	cmp	r0, #0
 8004164:	d038      	beq.n	80041d8 <_svfiprintf_r+0x1d8>
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <_svfiprintf_r+0x1f4>)
 8004168:	bb1b      	cbnz	r3, 80041b2 <_svfiprintf_r+0x1b2>
 800416a:	9b03      	ldr	r3, [sp, #12]
 800416c:	3307      	adds	r3, #7
 800416e:	f023 0307 	bic.w	r3, r3, #7
 8004172:	3308      	adds	r3, #8
 8004174:	9303      	str	r3, [sp, #12]
 8004176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004178:	4433      	add	r3, r6
 800417a:	9309      	str	r3, [sp, #36]	; 0x24
 800417c:	e767      	b.n	800404e <_svfiprintf_r+0x4e>
 800417e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004182:	460c      	mov	r4, r1
 8004184:	2001      	movs	r0, #1
 8004186:	e7a5      	b.n	80040d4 <_svfiprintf_r+0xd4>
 8004188:	2300      	movs	r3, #0
 800418a:	3401      	adds	r4, #1
 800418c:	9305      	str	r3, [sp, #20]
 800418e:	4619      	mov	r1, r3
 8004190:	f04f 0c0a 	mov.w	ip, #10
 8004194:	4620      	mov	r0, r4
 8004196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800419a:	3a30      	subs	r2, #48	; 0x30
 800419c:	2a09      	cmp	r2, #9
 800419e:	d903      	bls.n	80041a8 <_svfiprintf_r+0x1a8>
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0c5      	beq.n	8004130 <_svfiprintf_r+0x130>
 80041a4:	9105      	str	r1, [sp, #20]
 80041a6:	e7c3      	b.n	8004130 <_svfiprintf_r+0x130>
 80041a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ac:	4604      	mov	r4, r0
 80041ae:	2301      	movs	r3, #1
 80041b0:	e7f0      	b.n	8004194 <_svfiprintf_r+0x194>
 80041b2:	ab03      	add	r3, sp, #12
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	462a      	mov	r2, r5
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <_svfiprintf_r+0x1f8>)
 80041ba:	a904      	add	r1, sp, #16
 80041bc:	4638      	mov	r0, r7
 80041be:	f3af 8000 	nop.w
 80041c2:	1c42      	adds	r2, r0, #1
 80041c4:	4606      	mov	r6, r0
 80041c6:	d1d6      	bne.n	8004176 <_svfiprintf_r+0x176>
 80041c8:	89ab      	ldrh	r3, [r5, #12]
 80041ca:	065b      	lsls	r3, r3, #25
 80041cc:	f53f af2c 	bmi.w	8004028 <_svfiprintf_r+0x28>
 80041d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041d2:	b01d      	add	sp, #116	; 0x74
 80041d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d8:	ab03      	add	r3, sp, #12
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	462a      	mov	r2, r5
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <_svfiprintf_r+0x1f8>)
 80041e0:	a904      	add	r1, sp, #16
 80041e2:	4638      	mov	r0, r7
 80041e4:	f000 f87a 	bl	80042dc <_printf_i>
 80041e8:	e7eb      	b.n	80041c2 <_svfiprintf_r+0x1c2>
 80041ea:	bf00      	nop
 80041ec:	0800485c 	.word	0x0800485c
 80041f0:	08004866 	.word	0x08004866
 80041f4:	00000000 	.word	0x00000000
 80041f8:	08003f49 	.word	0x08003f49
 80041fc:	08004862 	.word	0x08004862

08004200 <_printf_common>:
 8004200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	4616      	mov	r6, r2
 8004206:	4699      	mov	r9, r3
 8004208:	688a      	ldr	r2, [r1, #8]
 800420a:	690b      	ldr	r3, [r1, #16]
 800420c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004210:	4293      	cmp	r3, r2
 8004212:	bfb8      	it	lt
 8004214:	4613      	movlt	r3, r2
 8004216:	6033      	str	r3, [r6, #0]
 8004218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800421c:	4607      	mov	r7, r0
 800421e:	460c      	mov	r4, r1
 8004220:	b10a      	cbz	r2, 8004226 <_printf_common+0x26>
 8004222:	3301      	adds	r3, #1
 8004224:	6033      	str	r3, [r6, #0]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	0699      	lsls	r1, r3, #26
 800422a:	bf42      	ittt	mi
 800422c:	6833      	ldrmi	r3, [r6, #0]
 800422e:	3302      	addmi	r3, #2
 8004230:	6033      	strmi	r3, [r6, #0]
 8004232:	6825      	ldr	r5, [r4, #0]
 8004234:	f015 0506 	ands.w	r5, r5, #6
 8004238:	d106      	bne.n	8004248 <_printf_common+0x48>
 800423a:	f104 0a19 	add.w	sl, r4, #25
 800423e:	68e3      	ldr	r3, [r4, #12]
 8004240:	6832      	ldr	r2, [r6, #0]
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	42ab      	cmp	r3, r5
 8004246:	dc26      	bgt.n	8004296 <_printf_common+0x96>
 8004248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800424c:	1e13      	subs	r3, r2, #0
 800424e:	6822      	ldr	r2, [r4, #0]
 8004250:	bf18      	it	ne
 8004252:	2301      	movne	r3, #1
 8004254:	0692      	lsls	r2, r2, #26
 8004256:	d42b      	bmi.n	80042b0 <_printf_common+0xb0>
 8004258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800425c:	4649      	mov	r1, r9
 800425e:	4638      	mov	r0, r7
 8004260:	47c0      	blx	r8
 8004262:	3001      	adds	r0, #1
 8004264:	d01e      	beq.n	80042a4 <_printf_common+0xa4>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	68e5      	ldr	r5, [r4, #12]
 800426a:	6832      	ldr	r2, [r6, #0]
 800426c:	f003 0306 	and.w	r3, r3, #6
 8004270:	2b04      	cmp	r3, #4
 8004272:	bf08      	it	eq
 8004274:	1aad      	subeq	r5, r5, r2
 8004276:	68a3      	ldr	r3, [r4, #8]
 8004278:	6922      	ldr	r2, [r4, #16]
 800427a:	bf0c      	ite	eq
 800427c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004280:	2500      	movne	r5, #0
 8004282:	4293      	cmp	r3, r2
 8004284:	bfc4      	itt	gt
 8004286:	1a9b      	subgt	r3, r3, r2
 8004288:	18ed      	addgt	r5, r5, r3
 800428a:	2600      	movs	r6, #0
 800428c:	341a      	adds	r4, #26
 800428e:	42b5      	cmp	r5, r6
 8004290:	d11a      	bne.n	80042c8 <_printf_common+0xc8>
 8004292:	2000      	movs	r0, #0
 8004294:	e008      	b.n	80042a8 <_printf_common+0xa8>
 8004296:	2301      	movs	r3, #1
 8004298:	4652      	mov	r2, sl
 800429a:	4649      	mov	r1, r9
 800429c:	4638      	mov	r0, r7
 800429e:	47c0      	blx	r8
 80042a0:	3001      	adds	r0, #1
 80042a2:	d103      	bne.n	80042ac <_printf_common+0xac>
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ac:	3501      	adds	r5, #1
 80042ae:	e7c6      	b.n	800423e <_printf_common+0x3e>
 80042b0:	18e1      	adds	r1, r4, r3
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	2030      	movs	r0, #48	; 0x30
 80042b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ba:	4422      	add	r2, r4
 80042bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042c4:	3302      	adds	r3, #2
 80042c6:	e7c7      	b.n	8004258 <_printf_common+0x58>
 80042c8:	2301      	movs	r3, #1
 80042ca:	4622      	mov	r2, r4
 80042cc:	4649      	mov	r1, r9
 80042ce:	4638      	mov	r0, r7
 80042d0:	47c0      	blx	r8
 80042d2:	3001      	adds	r0, #1
 80042d4:	d0e6      	beq.n	80042a4 <_printf_common+0xa4>
 80042d6:	3601      	adds	r6, #1
 80042d8:	e7d9      	b.n	800428e <_printf_common+0x8e>
	...

080042dc <_printf_i>:
 80042dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e0:	7e0f      	ldrb	r7, [r1, #24]
 80042e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042e4:	2f78      	cmp	r7, #120	; 0x78
 80042e6:	4691      	mov	r9, r2
 80042e8:	4680      	mov	r8, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	469a      	mov	sl, r3
 80042ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042f2:	d807      	bhi.n	8004304 <_printf_i+0x28>
 80042f4:	2f62      	cmp	r7, #98	; 0x62
 80042f6:	d80a      	bhi.n	800430e <_printf_i+0x32>
 80042f8:	2f00      	cmp	r7, #0
 80042fa:	f000 80d8 	beq.w	80044ae <_printf_i+0x1d2>
 80042fe:	2f58      	cmp	r7, #88	; 0x58
 8004300:	f000 80a3 	beq.w	800444a <_printf_i+0x16e>
 8004304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800430c:	e03a      	b.n	8004384 <_printf_i+0xa8>
 800430e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004312:	2b15      	cmp	r3, #21
 8004314:	d8f6      	bhi.n	8004304 <_printf_i+0x28>
 8004316:	a101      	add	r1, pc, #4	; (adr r1, 800431c <_printf_i+0x40>)
 8004318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800431c:	08004375 	.word	0x08004375
 8004320:	08004389 	.word	0x08004389
 8004324:	08004305 	.word	0x08004305
 8004328:	08004305 	.word	0x08004305
 800432c:	08004305 	.word	0x08004305
 8004330:	08004305 	.word	0x08004305
 8004334:	08004389 	.word	0x08004389
 8004338:	08004305 	.word	0x08004305
 800433c:	08004305 	.word	0x08004305
 8004340:	08004305 	.word	0x08004305
 8004344:	08004305 	.word	0x08004305
 8004348:	08004495 	.word	0x08004495
 800434c:	080043b9 	.word	0x080043b9
 8004350:	08004477 	.word	0x08004477
 8004354:	08004305 	.word	0x08004305
 8004358:	08004305 	.word	0x08004305
 800435c:	080044b7 	.word	0x080044b7
 8004360:	08004305 	.word	0x08004305
 8004364:	080043b9 	.word	0x080043b9
 8004368:	08004305 	.word	0x08004305
 800436c:	08004305 	.word	0x08004305
 8004370:	0800447f 	.word	0x0800447f
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	602a      	str	r2, [r5, #0]
 800437c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004384:	2301      	movs	r3, #1
 8004386:	e0a3      	b.n	80044d0 <_printf_i+0x1f4>
 8004388:	6820      	ldr	r0, [r4, #0]
 800438a:	6829      	ldr	r1, [r5, #0]
 800438c:	0606      	lsls	r6, r0, #24
 800438e:	f101 0304 	add.w	r3, r1, #4
 8004392:	d50a      	bpl.n	80043aa <_printf_i+0xce>
 8004394:	680e      	ldr	r6, [r1, #0]
 8004396:	602b      	str	r3, [r5, #0]
 8004398:	2e00      	cmp	r6, #0
 800439a:	da03      	bge.n	80043a4 <_printf_i+0xc8>
 800439c:	232d      	movs	r3, #45	; 0x2d
 800439e:	4276      	negs	r6, r6
 80043a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043a4:	485e      	ldr	r0, [pc, #376]	; (8004520 <_printf_i+0x244>)
 80043a6:	230a      	movs	r3, #10
 80043a8:	e019      	b.n	80043de <_printf_i+0x102>
 80043aa:	680e      	ldr	r6, [r1, #0]
 80043ac:	602b      	str	r3, [r5, #0]
 80043ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043b2:	bf18      	it	ne
 80043b4:	b236      	sxthne	r6, r6
 80043b6:	e7ef      	b.n	8004398 <_printf_i+0xbc>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	1d19      	adds	r1, r3, #4
 80043be:	6029      	str	r1, [r5, #0]
 80043c0:	0601      	lsls	r1, r0, #24
 80043c2:	d501      	bpl.n	80043c8 <_printf_i+0xec>
 80043c4:	681e      	ldr	r6, [r3, #0]
 80043c6:	e002      	b.n	80043ce <_printf_i+0xf2>
 80043c8:	0646      	lsls	r6, r0, #25
 80043ca:	d5fb      	bpl.n	80043c4 <_printf_i+0xe8>
 80043cc:	881e      	ldrh	r6, [r3, #0]
 80043ce:	4854      	ldr	r0, [pc, #336]	; (8004520 <_printf_i+0x244>)
 80043d0:	2f6f      	cmp	r7, #111	; 0x6f
 80043d2:	bf0c      	ite	eq
 80043d4:	2308      	moveq	r3, #8
 80043d6:	230a      	movne	r3, #10
 80043d8:	2100      	movs	r1, #0
 80043da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043de:	6865      	ldr	r5, [r4, #4]
 80043e0:	60a5      	str	r5, [r4, #8]
 80043e2:	2d00      	cmp	r5, #0
 80043e4:	bfa2      	ittt	ge
 80043e6:	6821      	ldrge	r1, [r4, #0]
 80043e8:	f021 0104 	bicge.w	r1, r1, #4
 80043ec:	6021      	strge	r1, [r4, #0]
 80043ee:	b90e      	cbnz	r6, 80043f4 <_printf_i+0x118>
 80043f0:	2d00      	cmp	r5, #0
 80043f2:	d04d      	beq.n	8004490 <_printf_i+0x1b4>
 80043f4:	4615      	mov	r5, r2
 80043f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80043fa:	fb03 6711 	mls	r7, r3, r1, r6
 80043fe:	5dc7      	ldrb	r7, [r0, r7]
 8004400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004404:	4637      	mov	r7, r6
 8004406:	42bb      	cmp	r3, r7
 8004408:	460e      	mov	r6, r1
 800440a:	d9f4      	bls.n	80043f6 <_printf_i+0x11a>
 800440c:	2b08      	cmp	r3, #8
 800440e:	d10b      	bne.n	8004428 <_printf_i+0x14c>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	07de      	lsls	r6, r3, #31
 8004414:	d508      	bpl.n	8004428 <_printf_i+0x14c>
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	6861      	ldr	r1, [r4, #4]
 800441a:	4299      	cmp	r1, r3
 800441c:	bfde      	ittt	le
 800441e:	2330      	movle	r3, #48	; 0x30
 8004420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004424:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004428:	1b52      	subs	r2, r2, r5
 800442a:	6122      	str	r2, [r4, #16]
 800442c:	f8cd a000 	str.w	sl, [sp]
 8004430:	464b      	mov	r3, r9
 8004432:	aa03      	add	r2, sp, #12
 8004434:	4621      	mov	r1, r4
 8004436:	4640      	mov	r0, r8
 8004438:	f7ff fee2 	bl	8004200 <_printf_common>
 800443c:	3001      	adds	r0, #1
 800443e:	d14c      	bne.n	80044da <_printf_i+0x1fe>
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	b004      	add	sp, #16
 8004446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800444a:	4835      	ldr	r0, [pc, #212]	; (8004520 <_printf_i+0x244>)
 800444c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004450:	6829      	ldr	r1, [r5, #0]
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	f851 6b04 	ldr.w	r6, [r1], #4
 8004458:	6029      	str	r1, [r5, #0]
 800445a:	061d      	lsls	r5, r3, #24
 800445c:	d514      	bpl.n	8004488 <_printf_i+0x1ac>
 800445e:	07df      	lsls	r7, r3, #31
 8004460:	bf44      	itt	mi
 8004462:	f043 0320 	orrmi.w	r3, r3, #32
 8004466:	6023      	strmi	r3, [r4, #0]
 8004468:	b91e      	cbnz	r6, 8004472 <_printf_i+0x196>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	f023 0320 	bic.w	r3, r3, #32
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	2310      	movs	r3, #16
 8004474:	e7b0      	b.n	80043d8 <_printf_i+0xfc>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	f043 0320 	orr.w	r3, r3, #32
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	2378      	movs	r3, #120	; 0x78
 8004480:	4828      	ldr	r0, [pc, #160]	; (8004524 <_printf_i+0x248>)
 8004482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004486:	e7e3      	b.n	8004450 <_printf_i+0x174>
 8004488:	0659      	lsls	r1, r3, #25
 800448a:	bf48      	it	mi
 800448c:	b2b6      	uxthmi	r6, r6
 800448e:	e7e6      	b.n	800445e <_printf_i+0x182>
 8004490:	4615      	mov	r5, r2
 8004492:	e7bb      	b.n	800440c <_printf_i+0x130>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	6826      	ldr	r6, [r4, #0]
 8004498:	6961      	ldr	r1, [r4, #20]
 800449a:	1d18      	adds	r0, r3, #4
 800449c:	6028      	str	r0, [r5, #0]
 800449e:	0635      	lsls	r5, r6, #24
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	d501      	bpl.n	80044a8 <_printf_i+0x1cc>
 80044a4:	6019      	str	r1, [r3, #0]
 80044a6:	e002      	b.n	80044ae <_printf_i+0x1d2>
 80044a8:	0670      	lsls	r0, r6, #25
 80044aa:	d5fb      	bpl.n	80044a4 <_printf_i+0x1c8>
 80044ac:	8019      	strh	r1, [r3, #0]
 80044ae:	2300      	movs	r3, #0
 80044b0:	6123      	str	r3, [r4, #16]
 80044b2:	4615      	mov	r5, r2
 80044b4:	e7ba      	b.n	800442c <_printf_i+0x150>
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	1d1a      	adds	r2, r3, #4
 80044ba:	602a      	str	r2, [r5, #0]
 80044bc:	681d      	ldr	r5, [r3, #0]
 80044be:	6862      	ldr	r2, [r4, #4]
 80044c0:	2100      	movs	r1, #0
 80044c2:	4628      	mov	r0, r5
 80044c4:	f7fb fe94 	bl	80001f0 <memchr>
 80044c8:	b108      	cbz	r0, 80044ce <_printf_i+0x1f2>
 80044ca:	1b40      	subs	r0, r0, r5
 80044cc:	6060      	str	r0, [r4, #4]
 80044ce:	6863      	ldr	r3, [r4, #4]
 80044d0:	6123      	str	r3, [r4, #16]
 80044d2:	2300      	movs	r3, #0
 80044d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044d8:	e7a8      	b.n	800442c <_printf_i+0x150>
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	462a      	mov	r2, r5
 80044de:	4649      	mov	r1, r9
 80044e0:	4640      	mov	r0, r8
 80044e2:	47d0      	blx	sl
 80044e4:	3001      	adds	r0, #1
 80044e6:	d0ab      	beq.n	8004440 <_printf_i+0x164>
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	079b      	lsls	r3, r3, #30
 80044ec:	d413      	bmi.n	8004516 <_printf_i+0x23a>
 80044ee:	68e0      	ldr	r0, [r4, #12]
 80044f0:	9b03      	ldr	r3, [sp, #12]
 80044f2:	4298      	cmp	r0, r3
 80044f4:	bfb8      	it	lt
 80044f6:	4618      	movlt	r0, r3
 80044f8:	e7a4      	b.n	8004444 <_printf_i+0x168>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4632      	mov	r2, r6
 80044fe:	4649      	mov	r1, r9
 8004500:	4640      	mov	r0, r8
 8004502:	47d0      	blx	sl
 8004504:	3001      	adds	r0, #1
 8004506:	d09b      	beq.n	8004440 <_printf_i+0x164>
 8004508:	3501      	adds	r5, #1
 800450a:	68e3      	ldr	r3, [r4, #12]
 800450c:	9903      	ldr	r1, [sp, #12]
 800450e:	1a5b      	subs	r3, r3, r1
 8004510:	42ab      	cmp	r3, r5
 8004512:	dcf2      	bgt.n	80044fa <_printf_i+0x21e>
 8004514:	e7eb      	b.n	80044ee <_printf_i+0x212>
 8004516:	2500      	movs	r5, #0
 8004518:	f104 0619 	add.w	r6, r4, #25
 800451c:	e7f5      	b.n	800450a <_printf_i+0x22e>
 800451e:	bf00      	nop
 8004520:	0800486d 	.word	0x0800486d
 8004524:	0800487e 	.word	0x0800487e

08004528 <memcpy>:
 8004528:	440a      	add	r2, r1
 800452a:	4291      	cmp	r1, r2
 800452c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004530:	d100      	bne.n	8004534 <memcpy+0xc>
 8004532:	4770      	bx	lr
 8004534:	b510      	push	{r4, lr}
 8004536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800453a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800453e:	4291      	cmp	r1, r2
 8004540:	d1f9      	bne.n	8004536 <memcpy+0xe>
 8004542:	bd10      	pop	{r4, pc}

08004544 <memmove>:
 8004544:	4288      	cmp	r0, r1
 8004546:	b510      	push	{r4, lr}
 8004548:	eb01 0402 	add.w	r4, r1, r2
 800454c:	d902      	bls.n	8004554 <memmove+0x10>
 800454e:	4284      	cmp	r4, r0
 8004550:	4623      	mov	r3, r4
 8004552:	d807      	bhi.n	8004564 <memmove+0x20>
 8004554:	1e43      	subs	r3, r0, #1
 8004556:	42a1      	cmp	r1, r4
 8004558:	d008      	beq.n	800456c <memmove+0x28>
 800455a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800455e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004562:	e7f8      	b.n	8004556 <memmove+0x12>
 8004564:	4402      	add	r2, r0
 8004566:	4601      	mov	r1, r0
 8004568:	428a      	cmp	r2, r1
 800456a:	d100      	bne.n	800456e <memmove+0x2a>
 800456c:	bd10      	pop	{r4, pc}
 800456e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004576:	e7f7      	b.n	8004568 <memmove+0x24>

08004578 <_free_r>:
 8004578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800457a:	2900      	cmp	r1, #0
 800457c:	d044      	beq.n	8004608 <_free_r+0x90>
 800457e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004582:	9001      	str	r0, [sp, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f1a1 0404 	sub.w	r4, r1, #4
 800458a:	bfb8      	it	lt
 800458c:	18e4      	addlt	r4, r4, r3
 800458e:	f000 f913 	bl	80047b8 <__malloc_lock>
 8004592:	4a1e      	ldr	r2, [pc, #120]	; (800460c <_free_r+0x94>)
 8004594:	9801      	ldr	r0, [sp, #4]
 8004596:	6813      	ldr	r3, [r2, #0]
 8004598:	b933      	cbnz	r3, 80045a8 <_free_r+0x30>
 800459a:	6063      	str	r3, [r4, #4]
 800459c:	6014      	str	r4, [r2, #0]
 800459e:	b003      	add	sp, #12
 80045a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045a4:	f000 b90e 	b.w	80047c4 <__malloc_unlock>
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	d908      	bls.n	80045be <_free_r+0x46>
 80045ac:	6825      	ldr	r5, [r4, #0]
 80045ae:	1961      	adds	r1, r4, r5
 80045b0:	428b      	cmp	r3, r1
 80045b2:	bf01      	itttt	eq
 80045b4:	6819      	ldreq	r1, [r3, #0]
 80045b6:	685b      	ldreq	r3, [r3, #4]
 80045b8:	1949      	addeq	r1, r1, r5
 80045ba:	6021      	streq	r1, [r4, #0]
 80045bc:	e7ed      	b.n	800459a <_free_r+0x22>
 80045be:	461a      	mov	r2, r3
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	b10b      	cbz	r3, 80045c8 <_free_r+0x50>
 80045c4:	42a3      	cmp	r3, r4
 80045c6:	d9fa      	bls.n	80045be <_free_r+0x46>
 80045c8:	6811      	ldr	r1, [r2, #0]
 80045ca:	1855      	adds	r5, r2, r1
 80045cc:	42a5      	cmp	r5, r4
 80045ce:	d10b      	bne.n	80045e8 <_free_r+0x70>
 80045d0:	6824      	ldr	r4, [r4, #0]
 80045d2:	4421      	add	r1, r4
 80045d4:	1854      	adds	r4, r2, r1
 80045d6:	42a3      	cmp	r3, r4
 80045d8:	6011      	str	r1, [r2, #0]
 80045da:	d1e0      	bne.n	800459e <_free_r+0x26>
 80045dc:	681c      	ldr	r4, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	6053      	str	r3, [r2, #4]
 80045e2:	4421      	add	r1, r4
 80045e4:	6011      	str	r1, [r2, #0]
 80045e6:	e7da      	b.n	800459e <_free_r+0x26>
 80045e8:	d902      	bls.n	80045f0 <_free_r+0x78>
 80045ea:	230c      	movs	r3, #12
 80045ec:	6003      	str	r3, [r0, #0]
 80045ee:	e7d6      	b.n	800459e <_free_r+0x26>
 80045f0:	6825      	ldr	r5, [r4, #0]
 80045f2:	1961      	adds	r1, r4, r5
 80045f4:	428b      	cmp	r3, r1
 80045f6:	bf04      	itt	eq
 80045f8:	6819      	ldreq	r1, [r3, #0]
 80045fa:	685b      	ldreq	r3, [r3, #4]
 80045fc:	6063      	str	r3, [r4, #4]
 80045fe:	bf04      	itt	eq
 8004600:	1949      	addeq	r1, r1, r5
 8004602:	6021      	streq	r1, [r4, #0]
 8004604:	6054      	str	r4, [r2, #4]
 8004606:	e7ca      	b.n	800459e <_free_r+0x26>
 8004608:	b003      	add	sp, #12
 800460a:	bd30      	pop	{r4, r5, pc}
 800460c:	200006a8 	.word	0x200006a8

08004610 <sbrk_aligned>:
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	4e0e      	ldr	r6, [pc, #56]	; (800464c <sbrk_aligned+0x3c>)
 8004614:	460c      	mov	r4, r1
 8004616:	6831      	ldr	r1, [r6, #0]
 8004618:	4605      	mov	r5, r0
 800461a:	b911      	cbnz	r1, 8004622 <sbrk_aligned+0x12>
 800461c:	f000 f8bc 	bl	8004798 <_sbrk_r>
 8004620:	6030      	str	r0, [r6, #0]
 8004622:	4621      	mov	r1, r4
 8004624:	4628      	mov	r0, r5
 8004626:	f000 f8b7 	bl	8004798 <_sbrk_r>
 800462a:	1c43      	adds	r3, r0, #1
 800462c:	d00a      	beq.n	8004644 <sbrk_aligned+0x34>
 800462e:	1cc4      	adds	r4, r0, #3
 8004630:	f024 0403 	bic.w	r4, r4, #3
 8004634:	42a0      	cmp	r0, r4
 8004636:	d007      	beq.n	8004648 <sbrk_aligned+0x38>
 8004638:	1a21      	subs	r1, r4, r0
 800463a:	4628      	mov	r0, r5
 800463c:	f000 f8ac 	bl	8004798 <_sbrk_r>
 8004640:	3001      	adds	r0, #1
 8004642:	d101      	bne.n	8004648 <sbrk_aligned+0x38>
 8004644:	f04f 34ff 	mov.w	r4, #4294967295
 8004648:	4620      	mov	r0, r4
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	200006ac 	.word	0x200006ac

08004650 <_malloc_r>:
 8004650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004654:	1ccd      	adds	r5, r1, #3
 8004656:	f025 0503 	bic.w	r5, r5, #3
 800465a:	3508      	adds	r5, #8
 800465c:	2d0c      	cmp	r5, #12
 800465e:	bf38      	it	cc
 8004660:	250c      	movcc	r5, #12
 8004662:	2d00      	cmp	r5, #0
 8004664:	4607      	mov	r7, r0
 8004666:	db01      	blt.n	800466c <_malloc_r+0x1c>
 8004668:	42a9      	cmp	r1, r5
 800466a:	d905      	bls.n	8004678 <_malloc_r+0x28>
 800466c:	230c      	movs	r3, #12
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	2600      	movs	r6, #0
 8004672:	4630      	mov	r0, r6
 8004674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004678:	4e2e      	ldr	r6, [pc, #184]	; (8004734 <_malloc_r+0xe4>)
 800467a:	f000 f89d 	bl	80047b8 <__malloc_lock>
 800467e:	6833      	ldr	r3, [r6, #0]
 8004680:	461c      	mov	r4, r3
 8004682:	bb34      	cbnz	r4, 80046d2 <_malloc_r+0x82>
 8004684:	4629      	mov	r1, r5
 8004686:	4638      	mov	r0, r7
 8004688:	f7ff ffc2 	bl	8004610 <sbrk_aligned>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	4604      	mov	r4, r0
 8004690:	d14d      	bne.n	800472e <_malloc_r+0xde>
 8004692:	6834      	ldr	r4, [r6, #0]
 8004694:	4626      	mov	r6, r4
 8004696:	2e00      	cmp	r6, #0
 8004698:	d140      	bne.n	800471c <_malloc_r+0xcc>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	4631      	mov	r1, r6
 800469e:	4638      	mov	r0, r7
 80046a0:	eb04 0803 	add.w	r8, r4, r3
 80046a4:	f000 f878 	bl	8004798 <_sbrk_r>
 80046a8:	4580      	cmp	r8, r0
 80046aa:	d13a      	bne.n	8004722 <_malloc_r+0xd2>
 80046ac:	6821      	ldr	r1, [r4, #0]
 80046ae:	3503      	adds	r5, #3
 80046b0:	1a6d      	subs	r5, r5, r1
 80046b2:	f025 0503 	bic.w	r5, r5, #3
 80046b6:	3508      	adds	r5, #8
 80046b8:	2d0c      	cmp	r5, #12
 80046ba:	bf38      	it	cc
 80046bc:	250c      	movcc	r5, #12
 80046be:	4629      	mov	r1, r5
 80046c0:	4638      	mov	r0, r7
 80046c2:	f7ff ffa5 	bl	8004610 <sbrk_aligned>
 80046c6:	3001      	adds	r0, #1
 80046c8:	d02b      	beq.n	8004722 <_malloc_r+0xd2>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	442b      	add	r3, r5
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	e00e      	b.n	80046f0 <_malloc_r+0xa0>
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	1b52      	subs	r2, r2, r5
 80046d6:	d41e      	bmi.n	8004716 <_malloc_r+0xc6>
 80046d8:	2a0b      	cmp	r2, #11
 80046da:	d916      	bls.n	800470a <_malloc_r+0xba>
 80046dc:	1961      	adds	r1, r4, r5
 80046de:	42a3      	cmp	r3, r4
 80046e0:	6025      	str	r5, [r4, #0]
 80046e2:	bf18      	it	ne
 80046e4:	6059      	strne	r1, [r3, #4]
 80046e6:	6863      	ldr	r3, [r4, #4]
 80046e8:	bf08      	it	eq
 80046ea:	6031      	streq	r1, [r6, #0]
 80046ec:	5162      	str	r2, [r4, r5]
 80046ee:	604b      	str	r3, [r1, #4]
 80046f0:	4638      	mov	r0, r7
 80046f2:	f104 060b 	add.w	r6, r4, #11
 80046f6:	f000 f865 	bl	80047c4 <__malloc_unlock>
 80046fa:	f026 0607 	bic.w	r6, r6, #7
 80046fe:	1d23      	adds	r3, r4, #4
 8004700:	1af2      	subs	r2, r6, r3
 8004702:	d0b6      	beq.n	8004672 <_malloc_r+0x22>
 8004704:	1b9b      	subs	r3, r3, r6
 8004706:	50a3      	str	r3, [r4, r2]
 8004708:	e7b3      	b.n	8004672 <_malloc_r+0x22>
 800470a:	6862      	ldr	r2, [r4, #4]
 800470c:	42a3      	cmp	r3, r4
 800470e:	bf0c      	ite	eq
 8004710:	6032      	streq	r2, [r6, #0]
 8004712:	605a      	strne	r2, [r3, #4]
 8004714:	e7ec      	b.n	80046f0 <_malloc_r+0xa0>
 8004716:	4623      	mov	r3, r4
 8004718:	6864      	ldr	r4, [r4, #4]
 800471a:	e7b2      	b.n	8004682 <_malloc_r+0x32>
 800471c:	4634      	mov	r4, r6
 800471e:	6876      	ldr	r6, [r6, #4]
 8004720:	e7b9      	b.n	8004696 <_malloc_r+0x46>
 8004722:	230c      	movs	r3, #12
 8004724:	603b      	str	r3, [r7, #0]
 8004726:	4638      	mov	r0, r7
 8004728:	f000 f84c 	bl	80047c4 <__malloc_unlock>
 800472c:	e7a1      	b.n	8004672 <_malloc_r+0x22>
 800472e:	6025      	str	r5, [r4, #0]
 8004730:	e7de      	b.n	80046f0 <_malloc_r+0xa0>
 8004732:	bf00      	nop
 8004734:	200006a8 	.word	0x200006a8

08004738 <_realloc_r>:
 8004738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473c:	4680      	mov	r8, r0
 800473e:	4614      	mov	r4, r2
 8004740:	460e      	mov	r6, r1
 8004742:	b921      	cbnz	r1, 800474e <_realloc_r+0x16>
 8004744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004748:	4611      	mov	r1, r2
 800474a:	f7ff bf81 	b.w	8004650 <_malloc_r>
 800474e:	b92a      	cbnz	r2, 800475c <_realloc_r+0x24>
 8004750:	f7ff ff12 	bl	8004578 <_free_r>
 8004754:	4625      	mov	r5, r4
 8004756:	4628      	mov	r0, r5
 8004758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800475c:	f000 f838 	bl	80047d0 <_malloc_usable_size_r>
 8004760:	4284      	cmp	r4, r0
 8004762:	4607      	mov	r7, r0
 8004764:	d802      	bhi.n	800476c <_realloc_r+0x34>
 8004766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800476a:	d812      	bhi.n	8004792 <_realloc_r+0x5a>
 800476c:	4621      	mov	r1, r4
 800476e:	4640      	mov	r0, r8
 8004770:	f7ff ff6e 	bl	8004650 <_malloc_r>
 8004774:	4605      	mov	r5, r0
 8004776:	2800      	cmp	r0, #0
 8004778:	d0ed      	beq.n	8004756 <_realloc_r+0x1e>
 800477a:	42bc      	cmp	r4, r7
 800477c:	4622      	mov	r2, r4
 800477e:	4631      	mov	r1, r6
 8004780:	bf28      	it	cs
 8004782:	463a      	movcs	r2, r7
 8004784:	f7ff fed0 	bl	8004528 <memcpy>
 8004788:	4631      	mov	r1, r6
 800478a:	4640      	mov	r0, r8
 800478c:	f7ff fef4 	bl	8004578 <_free_r>
 8004790:	e7e1      	b.n	8004756 <_realloc_r+0x1e>
 8004792:	4635      	mov	r5, r6
 8004794:	e7df      	b.n	8004756 <_realloc_r+0x1e>
	...

08004798 <_sbrk_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4d06      	ldr	r5, [pc, #24]	; (80047b4 <_sbrk_r+0x1c>)
 800479c:	2300      	movs	r3, #0
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	602b      	str	r3, [r5, #0]
 80047a4:	f7fc ff98 	bl	80016d8 <_sbrk>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_sbrk_r+0x1a>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_sbrk_r+0x1a>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	200006b0 	.word	0x200006b0

080047b8 <__malloc_lock>:
 80047b8:	4801      	ldr	r0, [pc, #4]	; (80047c0 <__malloc_lock+0x8>)
 80047ba:	f000 b811 	b.w	80047e0 <__retarget_lock_acquire_recursive>
 80047be:	bf00      	nop
 80047c0:	200006b4 	.word	0x200006b4

080047c4 <__malloc_unlock>:
 80047c4:	4801      	ldr	r0, [pc, #4]	; (80047cc <__malloc_unlock+0x8>)
 80047c6:	f000 b80c 	b.w	80047e2 <__retarget_lock_release_recursive>
 80047ca:	bf00      	nop
 80047cc:	200006b4 	.word	0x200006b4

080047d0 <_malloc_usable_size_r>:
 80047d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d4:	1f18      	subs	r0, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bfbc      	itt	lt
 80047da:	580b      	ldrlt	r3, [r1, r0]
 80047dc:	18c0      	addlt	r0, r0, r3
 80047de:	4770      	bx	lr

080047e0 <__retarget_lock_acquire_recursive>:
 80047e0:	4770      	bx	lr

080047e2 <__retarget_lock_release_recursive>:
 80047e2:	4770      	bx	lr

080047e4 <_init>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	bf00      	nop
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr

080047f0 <_fini>:
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f2:	bf00      	nop
 80047f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f6:	bc08      	pop	{r3}
 80047f8:	469e      	mov	lr, r3
 80047fa:	4770      	bx	lr
