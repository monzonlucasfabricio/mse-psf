
pds22_MSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004718  08004718  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  08004718  08004718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004720  08004720  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004720  08004720  00014720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004724  08004724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
 10 .bss          00000614  20000030  20000030  00020030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000644  20000644  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010711  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027f1  00000000  00000000  00030771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  00032f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ae0  00000000  00000000  00033b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000265b9  00000000  00000000  00034658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010d85  00000000  00000000  0005ac11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3828  00000000  00000000  0006b996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f1be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003158  00000000  00000000  0014f210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000030 	.word	0x20000030
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ee4 	.word	0x08003ee4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000034 	.word	0x20000034
 80001ec:	08003ee4 	.word	0x08003ee4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000d84:	4a1a      	ldr	r2, [pc, #104]	; (8000df0 <MX_ADC1_Init+0x80>)
 8000d86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000d92:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000db4:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <MX_ADC1_Init+0x84>)
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_ADC1_Init+0x7c>)
 8000dd4:	f000 fef4 	bl	8001bc0 <HAL_ADC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000dde:	f000 faa7 	bl	8001330 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000004c 	.word	0x2000004c
 8000df0:	40012000 	.word	0x40012000
 8000df4:	0f000001 	.word	0x0f000001

08000df8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_ADC_MspInit+0x7c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d127      	bne.n	8000e6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_ADC_MspInit+0x80>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <HAL_ADC_MspInit+0x80>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_ADC_MspInit+0x80>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_ADC_MspInit+0x80>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_ADC_MspInit+0x80>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_ADC_MspInit+0x80>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_1_Pin;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e56:	2303      	movs	r3, #3
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_1_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_ADC_MspInit+0x84>)
 8000e66:	f001 f9b9 	bl	80021dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	; 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e86:	463b      	mov	r3, r7
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_DAC_Init+0x60>)
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <MX_DAC_Init+0x64>)
 8000e92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e94:	4812      	ldr	r0, [pc, #72]	; (8000ee0 <MX_DAC_Init+0x60>)
 8000e96:	f001 f8b8 	bl	800200a <HAL_DAC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ea0:	f000 fa46 	bl	8001330 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_DAC_Init+0x60>)
 8000eb4:	f001 f942 	bl	800213c <HAL_DAC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ebe:	f000 fa37 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_DAC_Init+0x60>)
 8000ec6:	f001 f8c2 	bl	800204e <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <MX_DAC_Init+0x60>)
 8000ed2:	f001 f90e 	bl	80020f2 <HAL_DAC_SetValue>

  /* USER CODE END DAC_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000094 	.word	0x20000094
 8000ee4:	40007400 	.word	0x40007400

08000ee8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <HAL_DAC_MspInit+0x7c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d127      	bne.n	8000f5a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <HAL_DAC_MspInit+0x80>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <HAL_DAC_MspInit+0x80>)
 8000f14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_DAC_MspInit+0x80>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_DAC_MspInit+0x80>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_DAC_MspInit+0x80>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_DAC_MspInit+0x80>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f42:	2310      	movs	r3, #16
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_DAC_MspInit+0x84>)
 8000f56:	f001 f941 	bl	80021dc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40007400 	.word	0x40007400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08c      	sub	sp, #48	; 0x30
 8000f74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	4b6d      	ldr	r3, [pc, #436]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a6c      	ldr	r2, [pc, #432]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b6a      	ldr	r3, [pc, #424]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	4b66      	ldr	r3, [pc, #408]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a65      	ldr	r2, [pc, #404]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b63      	ldr	r3, [pc, #396]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a5e      	ldr	r2, [pc, #376]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b58      	ldr	r3, [pc, #352]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a57      	ldr	r2, [pc, #348]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b55      	ldr	r3, [pc, #340]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b51      	ldr	r3, [pc, #324]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a50      	ldr	r2, [pc, #320]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b4e      	ldr	r3, [pc, #312]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b4a      	ldr	r3, [pc, #296]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a49      	ldr	r2, [pc, #292]	; (8001140 <MX_GPIO_Init+0x1d0>)
 800101c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <MX_GPIO_Init+0x1d0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	f244 0181 	movw	r1, #16513	; 0x4081
 8001034:	4843      	ldr	r0, [pc, #268]	; (8001144 <MX_GPIO_Init+0x1d4>)
 8001036:	f001 fa7d 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4842      	ldr	r0, [pc, #264]	; (8001148 <MX_GPIO_Init+0x1d8>)
 8001040:	f001 fa78 	bl	8002534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800104e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	483c      	ldr	r0, [pc, #240]	; (800114c <MX_GPIO_Init+0x1dc>)
 800105c:	f001 f8be 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001060:	2332      	movs	r3, #50	; 0x32
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001070:	230b      	movs	r3, #11
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4834      	ldr	r0, [pc, #208]	; (800114c <MX_GPIO_Init+0x1dc>)
 800107c:	f001 f8ae 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001080:	2386      	movs	r3, #134	; 0x86
 8001082:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001090:	230b      	movs	r3, #11
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	482d      	ldr	r0, [pc, #180]	; (8001150 <MX_GPIO_Init+0x1e0>)
 800109c:	f001 f89e 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010a0:	f244 0381 	movw	r3, #16513	; 0x4081
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	4822      	ldr	r0, [pc, #136]	; (8001144 <MX_GPIO_Init+0x1d4>)
 80010ba:	f001 f88f 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80010be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d0:	230b      	movs	r3, #11
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	4619      	mov	r1, r3
 80010da:	481a      	ldr	r0, [pc, #104]	; (8001144 <MX_GPIO_Init+0x1d4>)
 80010dc:	f001 f87e 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010e0:	2340      	movs	r3, #64	; 0x40
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4814      	ldr	r0, [pc, #80]	; (8001148 <MX_GPIO_Init+0x1d8>)
 80010f8:	f001 f870 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 031c 	add.w	r3, r7, #28
 800110c:	4619      	mov	r1, r3
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <MX_GPIO_Init+0x1d8>)
 8001110:	f001 f864 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001114:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001126:	230b      	movs	r3, #11
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_GPIO_Init+0x1d8>)
 8001132:	f001 f853 	bl	80021dc <HAL_GPIO_Init>

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	; 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40020400 	.word	0x40020400
 8001148:	40021800 	.word	0x40021800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000

08001154 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f000 fc9a 	bl	8001a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f87c 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f7ff ff04 	bl	8000f70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001168:	f000 fa90 	bl	800168c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800116c:	f000 fb54 	bl	8001818 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8001170:	f7ff fdfe 	bl	8000d70 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001174:	f000 fa60 	bl	8001638 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8001178:	f7ff fe82 	bl	8000e80 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  uint16_t sample = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
  DBG_CyclesCounterInit(CLOCK_SPEED); // Enable the cycle counter
 8001182:	482f      	ldr	r0, [pc, #188]	; (8001240 <main+0xec>)
 8001184:	f000 f8da 	bl	800133c <DBG_CyclesCounterInit>
  int16_t adc [N_MUESTRAS];
  float t = 0;
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Reset cycle counter to 0 */
	  DBG_CyclesCounterReset();
 8001190:	4b2c      	ldr	r3, [pc, #176]	; (8001244 <main+0xf0>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]

	  /* Get the ADC sample */
//	  adc[sample] = (int16_t )ADC_Read(0)-512;

	  /* Send the sample in an Array */
	  uartWriteByteArray(&huart2, (uint8_t* )&adc[sample], sizeof(adc[0]));
 8001196:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 800119a:	463a      	mov	r2, r7
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	2202      	movs	r2, #2
 80011a2:	4619      	mov	r1, r3
 80011a4:	4828      	ldr	r0, [pc, #160]	; (8001248 <main+0xf4>)
 80011a6:	f000 f8f5 	bl	8001394 <uartWriteByteArray>

	  /* Calculate the time using ticks and frequency */
      t=tick/(float)header.fs;
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <main+0xf8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <main+0xfc>)
 80011b8:	895b      	ldrh	r3, [r3, #10]
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	edc7 7a80 	vstr	s15, [r7, #512]	; 0x200
      tick++;
 80011ca:	4b20      	ldr	r3, [pc, #128]	; (800124c <main+0xf8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a1e      	ldr	r2, [pc, #120]	; (800124c <main+0xf8>)
 80011d2:	6013      	str	r3, [r2, #0]

      /* Write DOm to the DAC */
      DAC_Write(&hdac, DOm(t));
 80011d4:	ed97 0a80 	vldr	s0, [r7, #512]	; 0x200
 80011d8:	f000 f90a 	bl	80013f0 <DOm>
 80011dc:	4603      	mov	r3, r0
 80011de:	4619      	mov	r1, r3
 80011e0:	481c      	ldr	r0, [pc, #112]	; (8001254 <main+0x100>)
 80011e2:	f000 f9ad 	bl	8001540 <DAC_Write>

	  /* Increment the sample counter and check if we are in the last sample */
	  if ( ++sample==header.N ) {
 80011e6:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 80011ea:	3301      	adds	r3, #1
 80011ec:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <main+0xfc>)
 80011f2:	891b      	ldrh	r3, [r3, #8]
 80011f4:	f8b7 2206 	ldrh.w	r2, [r7, #518]	; 0x206
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d110      	bne.n	800121e <main+0xca>
		 gpioToggle (GPIOB,LD1_Pin);
 80011fc:	2101      	movs	r1, #1
 80011fe:	4816      	ldr	r0, [pc, #88]	; (8001258 <main+0x104>)
 8001200:	f000 f8e7 	bl	80013d2 <gpioToggle>
		 sample = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206

		 //trigger(2);

		 /* Increment id */
		 header.id++;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <main+0xfc>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	3301      	adds	r3, #1
 8001210:	4a0f      	ldr	r2, [pc, #60]	; (8001250 <main+0xfc>)
 8001212:	6053      	str	r3, [r2, #4]

		 /* Send the header in an Array */
		 uartWriteByteArray (&huart2, (uint8_t*)&header, sizeof(header));
 8001214:	2220      	movs	r2, #32
 8001216:	490e      	ldr	r1, [pc, #56]	; (8001250 <main+0xfc>)
 8001218:	480b      	ldr	r0, [pc, #44]	; (8001248 <main+0xf4>)
 800121a:	f000 f8bb 	bl	8001394 <uartWriteByteArray>

//		 ADC_Read(0);

	  }
	  /* Blinks at fs/2 frequency */
	  gpioToggle (GPIOB,LD3_Pin);
 800121e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <main+0x104>)
 8001224:	f000 f8d5 	bl	80013d2 <gpioToggle>

	  /* Wait until it completes the Cycles. 168.000.000/10.000 = 16.800 cycles */
	  while(DBG_CyclesCounterRead() < CLOCK_SPEED/header.fs);
 8001228:	bf00      	nop
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <main+0xf0>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <main+0xfc>)
 8001230:	8952      	ldrh	r2, [r2, #10]
 8001232:	4611      	mov	r1, r2
 8001234:	4a02      	ldr	r2, [pc, #8]	; (8001240 <main+0xec>)
 8001236:	fb92 f2f1 	sdiv	r2, r2, r1
 800123a:	4293      	cmp	r3, r2
 800123c:	d3f5      	bcc.n	800122a <main+0xd6>
	  DBG_CyclesCounterReset();
 800123e:	e7a7      	b.n	8001190 <main+0x3c>
 8001240:	0a037a00 	.word	0x0a037a00
 8001244:	e0001000 	.word	0xe0001000
 8001248:	200000ac 	.word	0x200000ac
 800124c:	200000a8 	.word	0x200000a8
 8001250:	20000000 	.word	0x20000000
 8001254:	20000094 	.word	0x20000094
 8001258:	40020400 	.word	0x40020400

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	; 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	2230      	movs	r2, #48	; 0x30
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fe32 	bl	8003ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <SystemClock_Config+0xcc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	4a27      	ldr	r2, [pc, #156]	; (8001328 <SystemClock_Config+0xcc>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	; 0x40
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <SystemClock_Config+0xcc>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b22      	ldr	r3, [pc, #136]	; (800132c <SystemClock_Config+0xd0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a21      	ldr	r2, [pc, #132]	; (800132c <SystemClock_Config+0xd0>)
 80012a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <SystemClock_Config+0xd0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012cc:	2304      	movs	r3, #4
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012d0:	23a8      	movs	r3, #168	; 0xa8
 80012d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012d8:	2307      	movs	r3, #7
 80012da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	4618      	mov	r0, r3
 80012e2:	f001 fa77 	bl	80027d4 <HAL_RCC_OscConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012ec:	f000 f820 	bl	8001330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f0:	230f      	movs	r3, #15
 80012f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001306:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2105      	movs	r1, #5
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fcd8 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800131a:	f000 f809 	bl	8001330 <Error_Handler>
  }
}
 800131e:	bf00      	nop
 8001320:	3750      	adds	r7, #80	; 0x50
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	40007000 	.word	0x40007000

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	e7fe      	b.n	8001338 <Error_Handler+0x8>
	...

0800133c <DBG_CyclesCounterInit>:
	return adc_value;
}


bool DBG_CyclesCounterInit( uint32_t clockSpeed )
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <DBG_CyclesCounterInit+0x28>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
   //Iniciar el contador de ciclos de clock.
   DWT->CTRL  |= 1; // *DWT_CTRL  |= 1;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <DBG_CyclesCounterInit+0x2c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a06      	ldr	r2, [pc, #24]	; (8001368 <DBG_CyclesCounterInit+0x2c>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6013      	str	r3, [r2, #0]
   return 1;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	20000020 	.word	0x20000020
 8001368:	e0001000 	.word	0xe0001000

0800136c <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( UART_HandleTypeDef *huart, const uint8_t value)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
	uint8_t val = value;
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart, &val, 1, HAL_MAX_DELAY);
 800137c:	f107 010f 	add.w	r1, r7, #15
 8001380:	f04f 33ff 	mov.w	r3, #4294967295
 8001384:	2201      	movs	r2, #1
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f001 ff09 	bl	800319e <HAL_UART_Transmit>
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <uartWriteByteArray>:


// Blocking, Send a Byte Array
void uartWriteByteArray( UART_HandleTypeDef *huart, const uint8_t* byteArray, uint32_t byteArrayLen )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
   uint32_t i = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
   for( i=0; i<byteArrayLen; i++ ) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e00a      	b.n	80013c0 <uartWriteByteArray+0x2c>
	   uartWriteByte(huart, byteArray[i]);
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4619      	mov	r1, r3
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f7ff ffd9 	bl	800136c <uartWriteByte>
   for( i=0; i<byteArrayLen; i++ ) {
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3f0      	bcc.n	80013aa <uartWriteByteArray+0x16>
   }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <gpioToggle>:

void gpioToggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	4619      	mov	r1, r3
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f001 f8bf 	bl	8002566 <HAL_GPIO_TogglePin>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <DOm>:
      ;
   return;
}

uint16_t DOm(float t)
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	ed87 0a01 	vstr	s0, [r7, #4]
   return 512*0.4*arm_sin_f32 (2*PI*t*DO)+\
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001538 <DOm+0x148>
 8001402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001406:	ee17 0a90 	vmov	r0, s15
 800140a:	f7ff f855 	bl	80004b8 <__aeabi_f2d>
 800140e:	a340      	add	r3, pc, #256	; (adr r3, 8001510 <DOm+0x120>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7ff f8a8 	bl	8000568 <__aeabi_dmul>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fad4 	bl	80009cc <__aeabi_d2f>
 8001424:	4603      	mov	r3, r0
 8001426:	ee00 3a10 	vmov	s0, r3
 800142a:	f000 faa7 	bl	800197c <arm_sin_f32>
 800142e:	ee10 3a10 	vmov	r3, s0
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f840 	bl	80004b8 <__aeabi_f2d>
 8001438:	a337      	add	r3, pc, #220	; (adr r3, 8001518 <DOm+0x128>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7ff f893 	bl	8000568 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4614      	mov	r4, r2
 8001448:	461d      	mov	r5, r3
          512*0.2*arm_sin_f32 (2*PI*t*MI)+\
 800144a:	edd7 7a01 	vldr	s15, [r7, #4]
 800144e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001538 <DOm+0x148>
 8001452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001456:	ee17 0a90 	vmov	r0, s15
 800145a:	f7ff f82d 	bl	80004b8 <__aeabi_f2d>
 800145e:	a330      	add	r3, pc, #192	; (adr r3, 8001520 <DOm+0x130>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff f880 	bl	8000568 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff faac 	bl	80009cc <__aeabi_d2f>
 8001474:	4603      	mov	r3, r0
 8001476:	ee00 3a10 	vmov	s0, r3
 800147a:	f000 fa7f 	bl	800197c <arm_sin_f32>
 800147e:	ee10 3a10 	vmov	r3, s0
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f818 	bl	80004b8 <__aeabi_f2d>
 8001488:	a327      	add	r3, pc, #156	; (adr r3, 8001528 <DOm+0x138>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f86b 	bl	8000568 <__aeabi_dmul>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
   return 512*0.4*arm_sin_f32 (2*PI*t*DO)+\
 8001496:	4620      	mov	r0, r4
 8001498:	4629      	mov	r1, r5
 800149a:	f7fe feaf 	bl	80001fc <__adddf3>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4614      	mov	r4, r2
 80014a4:	461d      	mov	r5, r3
          512*0.3*arm_sin_f32 (2*PI*t*SOL)+512;
 80014a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014aa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001538 <DOm+0x148>
 80014ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800153c <DOm+0x14c>
 80014b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	f000 fa5d 	bl	800197c <arm_sin_f32>
 80014c2:	ee10 3a10 	vmov	r3, s0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe fff6 	bl	80004b8 <__aeabi_f2d>
 80014cc:	a318      	add	r3, pc, #96	; (adr r3, 8001530 <DOm+0x140>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f849 	bl	8000568 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
          512*0.2*arm_sin_f32 (2*PI*t*MI)+\
 80014da:	4620      	mov	r0, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	f7fe fe8d 	bl	80001fc <__adddf3>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
          512*0.3*arm_sin_f32 (2*PI*t*SOL)+512;
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80014f2:	f7fe fe83 	bl	80001fc <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fa45 	bl	800098c <__aeabi_d2uiz>
 8001502:	4603      	mov	r3, r0
 8001504:	b29b      	uxth	r3, r3
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bdb0      	pop	{r4, r5, r7, pc}
 800150e:	bf00      	nop
 8001510:	7ae147ae 	.word	0x7ae147ae
 8001514:	40705a14 	.word	0x40705a14
 8001518:	9999999a 	.word	0x9999999a
 800151c:	40699999 	.word	0x40699999
 8001520:	7ae147ae 	.word	0x7ae147ae
 8001524:	40749a14 	.word	0x40749a14
 8001528:	9999999a 	.word	0x9999999a
 800152c:	40599999 	.word	0x40599999
 8001530:	33333333 	.word	0x33333333
 8001534:	40633333 	.word	0x40633333
 8001538:	40c90fdb 	.word	0x40c90fdb
 800153c:	43c40000 	.word	0x43c40000

08001540 <DAC_Write>:


void DAC_Write(DAC_HandleTypeDef *handle, uint16_t value)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
	// DAC is 12 bit so maximum value should be 4096
	if( value > 4096 )
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001552:	d902      	bls.n	800155a <DAC_Write+0x1a>
	{
		value = 4096; // Saturation
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	807b      	strh	r3, [r7, #2]
	}

	HAL_DAC_SetValue(handle, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, value);
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fdc6 	bl	80020f2 <HAL_DAC_SetValue>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_MspInit+0x4c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x4c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 fa94 	bl	8001b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_USART2_UART_Init+0x50>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001644:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART2_UART_Init+0x4c>)
 8001670:	f001 fd48 	bl	8003104 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800167a:	f7ff fe59 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200000ac 	.word	0x200000ac
 8001688:	40004400 	.word	0x40004400

0800168c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <MX_USART3_UART_Init+0x50>)
 8001694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c2:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_USART3_UART_Init+0x4c>)
 80016c4:	f001 fd1e 	bl	8003104 <HAL_UART_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016ce:	f7ff fe2f 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000f0 	.word	0x200000f0
 80016dc:	40004800 	.word	0x40004800

080016e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	; 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a41      	ldr	r2, [pc, #260]	; (8001804 <HAL_UART_MspInit+0x124>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d14a      	bne.n	8001798 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_UART_MspInit+0x128>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a3f      	ldr	r2, [pc, #252]	; (8001808 <HAL_UART_MspInit+0x128>)
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_UART_MspInit+0x128>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_UART_MspInit+0x128>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a38      	ldr	r2, [pc, #224]	; (8001808 <HAL_UART_MspInit+0x128>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_UART_MspInit+0x128>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <HAL_UART_MspInit+0x128>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a31      	ldr	r2, [pc, #196]	; (8001808 <HAL_UART_MspInit+0x128>)
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <HAL_UART_MspInit+0x128>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 8001756:	2308      	movs	r3, #8
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001766:	2307      	movs	r3, #7
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	4826      	ldr	r0, [pc, #152]	; (800180c <HAL_UART_MspInit+0x12c>)
 8001772:	f000 fd33 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART2_TX_Pin;
 8001776:	2320      	movs	r3, #32
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001786:	2307      	movs	r3, #7
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	481f      	ldr	r0, [pc, #124]	; (8001810 <HAL_UART_MspInit+0x130>)
 8001792:	f000 fd23 	bl	80021dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001796:	e031      	b.n	80017fc <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_UART_MspInit+0x134>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12c      	bne.n	80017fc <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_UART_MspInit+0x128>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_UART_MspInit+0x128>)
 80017ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_UART_MspInit+0x128>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_UART_MspInit+0x128>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_UART_MspInit+0x128>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <HAL_UART_MspInit+0x128>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e8:	2303      	movs	r3, #3
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017ec:	2307      	movs	r3, #7
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <HAL_UART_MspInit+0x130>)
 80017f8:	f000 fcf0 	bl	80021dc <HAL_GPIO_Init>
}
 80017fc:	bf00      	nop
 80017fe:	3730      	adds	r7, #48	; 0x30
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40004400 	.word	0x40004400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020000 	.word	0x40020000
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40004800 	.word	0x40004800

08001818 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800181e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001822:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001826:	2204      	movs	r2, #4
 8001828:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800182c:	2202      	movs	r2, #2
 800182e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001838:	2202      	movs	r2, #2
 800183a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800183e:	2201      	movs	r2, #1
 8001840:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001850:	2201      	movs	r2, #1
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800185c:	f000 fe9d 	bl	800259a <HAL_PCD_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001866:	f7ff fd63 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000134 	.word	0x20000134

08001874 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001894:	d13f      	bne.n	8001916 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_PCD_MspInit+0xac>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a20      	ldr	r2, [pc, #128]	; (8001920 <HAL_PCD_MspInit+0xac>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_PCD_MspInit+0xac>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018b2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018c4:	230a      	movs	r3, #10
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4815      	ldr	r0, [pc, #84]	; (8001924 <HAL_PCD_MspInit+0xb0>)
 80018d0:	f000 fc84 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	480e      	ldr	r0, [pc, #56]	; (8001924 <HAL_PCD_MspInit+0xb0>)
 80018ea:	f000 fc77 	bl	80021dc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_PCD_MspInit+0xac>)
 80018f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_PCD_MspInit+0xac>)
 80018f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f8:	6353      	str	r3, [r2, #52]	; 0x34
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_PCD_MspInit+0xac>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_PCD_MspInit+0xac>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_PCD_MspInit+0xac>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40020000 	.word	0x40020000

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001952:	f7ff fe5f 	bl	8001614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f002 fa99 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff fbfb 	bl	8001154 <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001960:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800196c:	08004728 	.word	0x08004728
  ldr r2, =_sbss
 8001970:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001974:	20000644 	.word	0x20000644

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800197c:	b480      	push	{r7}
 800197e:	b08b      	sub	sp, #44	; 0x2c
 8001980:	af00      	add	r7, sp, #0
 8001982:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 8001986:	edd7 7a01 	vldr	s15, [r7, #4]
 800198a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	d50a      	bpl.n	80019aa <arm_sin_f32+0x2e>
 8001994:	edd7 7a01 	vldr	s15, [r7, #4]
 8001998:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001a84 <arm_sin_f32+0x108>
 800199c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a4:	db01      	blt.n	80019aa <arm_sin_f32+0x2e>
     return x;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	e062      	b.n	8001a70 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 80019aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ae:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001a88 <arm_sin_f32+0x10c>
 80019b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b6:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80019ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80019be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c2:	ee17 3a90 	vmov	r3, s15
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 80019c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d4:	d502      	bpl.n	80019dc <arm_sin_f32+0x60>
  {
    n--;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	3b01      	subs	r3, #1
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ee:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 80019f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80019f6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001a8c <arm_sin_f32+0x110>
 80019fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fe:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 8001a02:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a0a:	ee17 3a90 	vmov	r3, s15
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a14:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8001a16:	8b7b      	ldrh	r3, [r7, #26]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a20:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a28:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 8001a2c:	8b7b      	ldrh	r3, [r7, #26]
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <arm_sin_f32+0x114>)
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8001a38:	8b7b      	ldrh	r3, [r7, #26]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <arm_sin_f32+0x114>)
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 8001a46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6a:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
}
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	372c      	adds	r7, #44	; 0x2c
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	b44c02cd 	.word	0xb44c02cd
 8001a88:	3e22f983 	.word	0x3e22f983
 8001a8c:	44000000 	.word	0x44000000
 8001a90:	08003f14 	.word	0x08003f14

08001a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <HAL_Init+0x40>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_Init+0x40>)
 8001aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_Init+0x40>)
 8001ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001abc:	2003      	movs	r0, #3
 8001abe:	f000 fa71 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f000 f808 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ac8:	f7ff fd52 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00

08001ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae0:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_InitTick+0x54>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x58>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fa7b 	bl	8001ff2 <HAL_SYSTICK_Config>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00e      	b.n	8001b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b0f      	cmp	r3, #15
 8001b0a:	d80a      	bhi.n	8001b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f000 fa51 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <HAL_InitTick+0x5c>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e000      	b.n	8001b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000024 	.word	0x20000024
 8001b30:	2000002c 	.word	0x2000002c
 8001b34:	20000028 	.word	0x20000028

08001b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_IncTick+0x20>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x24>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <HAL_IncTick+0x24>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2000002c 	.word	0x2000002c
 8001b5c:	20000640 	.word	0x20000640

08001b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return uwTick;
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <HAL_GetTick+0x14>)
 8001b66:	681b      	ldr	r3, [r3, #0]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000640 	.word	0x20000640

08001b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff ffee 	bl	8001b60 <HAL_GetTick>
 8001b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b90:	d005      	beq.n	8001b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_Delay+0x44>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b9e:	bf00      	nop
 8001ba0:	f7ff ffde 	bl	8001b60 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d8f7      	bhi.n	8001ba0 <HAL_Delay+0x28>
  {
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000002c 	.word	0x2000002c

08001bc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e033      	b.n	8001c3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff f90a 	bl	8000df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d118      	bne.n	8001c30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c06:	f023 0302 	bic.w	r3, r3, #2
 8001c0a:	f043 0202 	orr.w	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f818 	bl	8001c48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f023 0303 	bic.w	r3, r3, #3
 8001c26:	f043 0201 	orr.w	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c2e:	e001      	b.n	8001c34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c50:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <ADC_Init+0x1f0>)
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	021a      	lsls	r2, r3, #8
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	4a58      	ldr	r2, [pc, #352]	; (8001e3c <ADC_Init+0x1f4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d022      	beq.n	8001d26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6899      	ldr	r1, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6899      	ldr	r1, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	e00f      	b.n	8001d46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0202 	bic.w	r2, r2, #2
 8001d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6899      	ldr	r1, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e1b      	ldrb	r3, [r3, #24]
 8001d60:	005a      	lsls	r2, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d01b      	beq.n	8001dac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	035a      	lsls	r2, r3, #13
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	e007      	b.n	8001dbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	051a      	lsls	r2, r3, #20
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	430a      	orrs	r2, r1
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6899      	ldr	r1, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dfe:	025a      	lsls	r2, r3, #9
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6899      	ldr	r1, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	029a      	lsls	r2, r3, #10
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
}
 8001e2c:	bf00      	nop
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40012300 	.word	0x40012300
 8001e3c:	0f000001 	.word	0x0f000001

08001e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e72:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <__NVIC_SetPriorityGrouping+0x44>)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	60d3      	str	r3, [r2, #12]
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	f003 0307 	and.w	r3, r3, #7
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	; (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	; 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff47 	bl	8001e40 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff5c 	bl	8001e88 <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff8e 	bl	8001ef8 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ffb0 	bl	8001f60 <SysTick_Config>
 8002000:	4603      	mov	r3, r0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e014      	b.n	8002046 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	791b      	ldrb	r3, [r3, #4]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe ff5b 	bl	8000ee8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	795b      	ldrb	r3, [r3, #5]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_DAC_Start+0x16>
 8002060:	2302      	movs	r3, #2
 8002062:	e040      	b.n	80020e6 <HAL_DAC_Start+0x98>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2201      	movs	r2, #1
 800207e:	409a      	lsls	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10f      	bne.n	80020ae <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002098:	2b3c      	cmp	r3, #60	; 0x3c
 800209a:	d11d      	bne.n	80020d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	e014      	b.n	80020d8 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	213c      	movs	r1, #60	; 0x3c
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d107      	bne.n	80020d8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0202 	orr.w	r2, r2, #2
 80020d6:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b087      	sub	sp, #28
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	3308      	adds	r3, #8
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e004      	b.n	8002126 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	3314      	adds	r3, #20
 8002124:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	461a      	mov	r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	795b      	ldrb	r3, [r3, #5]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_DAC_ConfigChannel+0x18>
 8002150:	2302      	movs	r3, #2
 8002152:	e03c      	b.n	80021ce <HAL_DAC_ConfigChannel+0x92>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2202      	movs	r2, #2
 800215e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	4013      	ands	r3, r2
 800217c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f003 0310 	and.w	r3, r3, #16
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	22c0      	movs	r2, #192	; 0xc0
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43da      	mvns	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	400a      	ands	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2201      	movs	r2, #1
 80021c4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e177      	b.n	80024e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8166 	bne.w	80024e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	2b02      	cmp	r3, #2
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b03      	cmp	r3, #3
 800229a:	d017      	beq.n	80022cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80c0 	beq.w	80024e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_GPIO_Init+0x324>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a65      	ldr	r2, [pc, #404]	; (8002500 <HAL_GPIO_Init+0x324>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <HAL_GPIO_Init+0x324>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237e:	4a61      	ldr	r2, [pc, #388]	; (8002504 <HAL_GPIO_Init+0x328>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_GPIO_Init+0x32c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d037      	beq.n	800241a <HAL_GPIO_Init+0x23e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a57      	ldr	r2, [pc, #348]	; (800250c <HAL_GPIO_Init+0x330>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_GPIO_Init+0x23a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a56      	ldr	r2, [pc, #344]	; (8002510 <HAL_GPIO_Init+0x334>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <HAL_GPIO_Init+0x236>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a55      	ldr	r2, [pc, #340]	; (8002514 <HAL_GPIO_Init+0x338>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x232>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a54      	ldr	r2, [pc, #336]	; (8002518 <HAL_GPIO_Init+0x33c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x22e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a53      	ldr	r2, [pc, #332]	; (800251c <HAL_GPIO_Init+0x340>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x22a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_GPIO_Init+0x344>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x226>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a51      	ldr	r2, [pc, #324]	; (8002524 <HAL_GPIO_Init+0x348>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x222>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a50      	ldr	r2, [pc, #320]	; (8002528 <HAL_GPIO_Init+0x34c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x21e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4f      	ldr	r2, [pc, #316]	; (800252c <HAL_GPIO_Init+0x350>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x21a>
 80023f2:	2309      	movs	r3, #9
 80023f4:	e012      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023f6:	230a      	movs	r3, #10
 80023f8:	e010      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023fa:	2308      	movs	r3, #8
 80023fc:	e00e      	b.n	800241c <HAL_GPIO_Init+0x240>
 80023fe:	2307      	movs	r3, #7
 8002400:	e00c      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002402:	2306      	movs	r3, #6
 8002404:	e00a      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002406:	2305      	movs	r3, #5
 8002408:	e008      	b.n	800241c <HAL_GPIO_Init+0x240>
 800240a:	2304      	movs	r3, #4
 800240c:	e006      	b.n	800241c <HAL_GPIO_Init+0x240>
 800240e:	2303      	movs	r3, #3
 8002410:	e004      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002412:	2302      	movs	r3, #2
 8002414:	e002      	b.n	800241c <HAL_GPIO_Init+0x240>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_GPIO_Init+0x240>
 800241a:	2300      	movs	r3, #0
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	f002 0203 	and.w	r2, r2, #3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	4093      	lsls	r3, r2
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800242c:	4935      	ldr	r1, [pc, #212]	; (8002504 <HAL_GPIO_Init+0x328>)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	089b      	lsrs	r3, r3, #2
 8002432:	3302      	adds	r3, #2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243a:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_GPIO_Init+0x354>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245e:	4a34      	ldr	r2, [pc, #208]	; (8002530 <HAL_GPIO_Init+0x354>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002464:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_GPIO_Init+0x354>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002488:	4a29      	ldr	r2, [pc, #164]	; (8002530 <HAL_GPIO_Init+0x354>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800248e:	4b28      	ldr	r3, [pc, #160]	; (8002530 <HAL_GPIO_Init+0x354>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b2:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_GPIO_Init+0x354>)
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b8:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_GPIO_Init+0x354>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d003      	beq.n	80024dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_GPIO_Init+0x354>)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3301      	adds	r3, #1
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	f67f ae84 	bls.w	80021f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	bf00      	nop
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40013800 	.word	0x40013800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021800 	.word	0x40021800
 8002524:	40021c00 	.word	0x40021c00
 8002528:	40022000 	.word	0x40022000
 800252c:	40022400 	.word	0x40022400
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
 8002540:	4613      	mov	r3, r2
 8002542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002544:	787b      	ldrb	r3, [r7, #1]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002550:	e003      	b.n	800255a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	887b      	ldrh	r3, [r7, #2]
 8002554:	041a      	lsls	r2, r3, #16
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002566:	b480      	push	{r7}
 8002568:	b085      	sub	sp, #20
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4013      	ands	r3, r2
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43d9      	mvns	r1, r3
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	400b      	ands	r3, r1
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800259a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259c:	b08f      	sub	sp, #60	; 0x3c
 800259e:	af0a      	add	r7, sp, #40	; 0x28
 80025a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e10f      	b.n	80027cc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d106      	bne.n	80025cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff f954 	bl	8001874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2203      	movs	r2, #3
 80025d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d102      	bne.n	80025e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 f9ad 	bl	800394a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	687e      	ldr	r6, [r7, #4]
 80025f8:	466d      	mov	r5, sp
 80025fa:	f106 0410 	add.w	r4, r6, #16
 80025fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002606:	e894 0003 	ldmia.w	r4, {r0, r1}
 800260a:	e885 0003 	stmia.w	r5, {r0, r1}
 800260e:	1d33      	adds	r3, r6, #4
 8002610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002612:	6838      	ldr	r0, [r7, #0]
 8002614:	f001 f938 	bl	8003888 <USB_CoreInit>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0d0      	b.n	80027cc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f001 f99b 	bl	800396c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
 800263a:	e04a      	b.n	80026d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800263c:	7bfa      	ldrb	r2, [r7, #15]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	333d      	adds	r3, #61	; 0x3d
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	333c      	adds	r3, #60	; 0x3c
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002664:	7bfa      	ldrb	r2, [r7, #15]
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	b298      	uxth	r0, r3
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	3344      	adds	r3, #68	; 0x44
 8002678:	4602      	mov	r2, r0
 800267a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	3340      	adds	r3, #64	; 0x40
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002690:	7bfa      	ldrb	r2, [r7, #15]
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	440b      	add	r3, r1
 800269e:	3348      	adds	r3, #72	; 0x48
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026a4:	7bfa      	ldrb	r2, [r7, #15]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	334c      	adds	r3, #76	; 0x4c
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026b8:	7bfa      	ldrb	r2, [r7, #15]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	3354      	adds	r3, #84	; 0x54
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	3301      	adds	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3af      	bcc.n	800263c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e044      	b.n	800276c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4413      	add	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4413      	add	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	3301      	adds	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	d3b5      	bcc.n	80026e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	687e      	ldr	r6, [r7, #4]
 800277e:	466d      	mov	r5, sp
 8002780:	f106 0410 	add.w	r4, r6, #16
 8002784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800278c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002790:	e885 0003 	stmia.w	r5, {r0, r1}
 8002794:	1d33      	adds	r3, r6, #4
 8002796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002798:	6838      	ldr	r0, [r7, #0]
 800279a:	f001 f933 	bl	8003a04 <USB_DevInit>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e00d      	b.n	80027cc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 fafe 	bl	8003dc6 <USB_DevDisconnect>

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e267      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d075      	beq.n	80028de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f2:	4b88      	ldr	r3, [pc, #544]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d00c      	beq.n	8002818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fe:	4b85      	ldr	r3, [pc, #532]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002806:	2b08      	cmp	r3, #8
 8002808:	d112      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002816:	d10b      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	4b7e      	ldr	r3, [pc, #504]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05b      	beq.n	80028dc <HAL_RCC_OscConfig+0x108>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d157      	bne.n	80028dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e242      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002838:	d106      	bne.n	8002848 <HAL_RCC_OscConfig+0x74>
 800283a:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a75      	ldr	r2, [pc, #468]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x98>
 8002852:	4b70      	ldr	r3, [pc, #448]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a6f      	ldr	r2, [pc, #444]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b6d      	ldr	r3, [pc, #436]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6c      	ldr	r2, [pc, #432]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 800286c:	4b69      	ldr	r3, [pc, #420]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a68      	ldr	r2, [pc, #416]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b66      	ldr	r3, [pc, #408]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a65      	ldr	r2, [pc, #404]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7ff f968 	bl	8001b60 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff f964 	bl	8001b60 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e207      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b5b      	ldr	r3, [pc, #364]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xc0>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7ff f954 	bl	8001b60 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff f950 	bl	8001b60 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1f3      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0xe8>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ea:	4b4a      	ldr	r3, [pc, #296]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002902:	4b44      	ldr	r3, [pc, #272]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b41      	ldr	r3, [pc, #260]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x152>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1c7      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4937      	ldr	r1, [pc, #220]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b34      	ldr	r3, [pc, #208]	; (8002a18 <HAL_RCC_OscConfig+0x244>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7ff f909 	bl	8001b60 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002952:	f7ff f905 	bl	8001b60 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1a8      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4925      	ldr	r1, [pc, #148]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_RCC_OscConfig+0x244>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7ff f8e8 	bl	8001b60 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002994:	f7ff f8e4 	bl	8001b60 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e187      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d036      	beq.n	8002a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d016      	beq.n	80029f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <HAL_RCC_OscConfig+0x248>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7ff f8c8 	bl	8001b60 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d4:	f7ff f8c4 	bl	8001b60 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e167      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <HAL_RCC_OscConfig+0x240>)
 80029e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x200>
 80029f2:	e01b      	b.n	8002a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_OscConfig+0x248>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7ff f8b1 	bl	8001b60 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	e00e      	b.n	8002a20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a02:	f7ff f8ad 	bl	8001b60 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d907      	bls.n	8002a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e150      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
 8002a14:	40023800 	.word	0x40023800
 8002a18:	42470000 	.word	0x42470000
 8002a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a20:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1ea      	bne.n	8002a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8097 	beq.w	8002b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3e:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10f      	bne.n	8002a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	4b7d      	ldr	r3, [pc, #500]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a7c      	ldr	r2, [pc, #496]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b7a      	ldr	r3, [pc, #488]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a66:	2301      	movs	r3, #1
 8002a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4b77      	ldr	r3, [pc, #476]	; (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d118      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a76:	4b74      	ldr	r3, [pc, #464]	; (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a73      	ldr	r2, [pc, #460]	; (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7ff f86d 	bl	8001b60 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7ff f869 	bl	8001b60 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e10c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9c:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_OscConfig+0x474>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d106      	bne.n	8002abe <HAL_RCC_OscConfig+0x2ea>
 8002ab0:	4b64      	ldr	r3, [pc, #400]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab4:	4a63      	ldr	r2, [pc, #396]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6713      	str	r3, [r2, #112]	; 0x70
 8002abc:	e01c      	b.n	8002af8 <HAL_RCC_OscConfig+0x324>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x30c>
 8002ac6:	4b5f      	ldr	r3, [pc, #380]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4a5e      	ldr	r2, [pc, #376]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad2:	4b5c      	ldr	r3, [pc, #368]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad6:	4a5b      	ldr	r2, [pc, #364]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0x324>
 8002ae0:	4b58      	ldr	r3, [pc, #352]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae4:	4a57      	ldr	r2, [pc, #348]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	6713      	str	r3, [r2, #112]	; 0x70
 8002aec:	4b55      	ldr	r3, [pc, #340]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af0:	4a54      	ldr	r2, [pc, #336]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002af2:	f023 0304 	bic.w	r3, r3, #4
 8002af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7ff f82e 	bl	8001b60 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7ff f82a 	bl	8001b60 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0cb      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0ee      	beq.n	8002b08 <HAL_RCC_OscConfig+0x334>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2c:	f7ff f818 	bl	8001b60 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7ff f814 	bl	8001b60 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0b5      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4a:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ee      	bne.n	8002b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	4a38      	ldr	r2, [pc, #224]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a1 	beq.w	8002cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b72:	4b34      	ldr	r3, [pc, #208]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d05c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d141      	bne.n	8002c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <HAL_RCC_OscConfig+0x478>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe ffe8 	bl	8001b60 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b94:	f7fe ffe4 	bl	8001b60 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e087      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	019b      	lsls	r3, r3, #6
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	041b      	lsls	r3, r3, #16
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	491b      	ldr	r1, [pc, #108]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <HAL_RCC_OscConfig+0x478>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe ffbd 	bl	8001b60 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bea:	f7fe ffb9 	bl	8001b60 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e05c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x416>
 8002c08:	e054      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_RCC_OscConfig+0x478>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe ffa6 	bl	8001b60 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe ffa2 	bl	8001b60 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e045      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x444>
 8002c36:	e03d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e038      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c50:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x4ec>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d028      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d121      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d11a      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d111      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800

08002cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0cc      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d90c      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0b8      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d18:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	494d      	ldr	r1, [pc, #308]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d044      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d119      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e07f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e067      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4934      	ldr	r1, [pc, #208]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fed4 	bl	8001b60 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7fe fed0 	bl	8001b60 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e04f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d20c      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e032      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4916      	ldr	r1, [pc, #88]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	490e      	ldr	r1, [pc, #56]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4a:	f000 f821 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	490a      	ldr	r1, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	5ccb      	ldrb	r3, [r1, r3]
 8002e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e62:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fe34 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08003efc 	.word	0x08003efc
 8002e88:	20000024 	.word	0x20000024
 8002e8c:	20000028 	.word	0x20000028

08002e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e94:	b094      	sub	sp, #80	; 0x50
 8002e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea8:	4b79      	ldr	r3, [pc, #484]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	f200 80e1 	bhi.w	800307c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec2:	e0db      	b.n	800307c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b73      	ldr	r3, [pc, #460]	; (8003094 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ec6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ec8:	e0db      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eca:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ecc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ece:	e0d8      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed0:	4b6f      	ldr	r3, [pc, #444]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eda:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d063      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	2200      	movs	r2, #0
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
 8002efe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f02:	4622      	mov	r2, r4
 8002f04:	462b      	mov	r3, r5
 8002f06:	f04f 0000 	mov.w	r0, #0
 8002f0a:	f04f 0100 	mov.w	r1, #0
 8002f0e:	0159      	lsls	r1, r3, #5
 8002f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f14:	0150      	lsls	r0, r2, #5
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	1a51      	subs	r1, r2, r1
 8002f1e:	6139      	str	r1, [r7, #16]
 8002f20:	4629      	mov	r1, r5
 8002f22:	eb63 0301 	sbc.w	r3, r3, r1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f34:	4659      	mov	r1, fp
 8002f36:	018b      	lsls	r3, r1, #6
 8002f38:	4651      	mov	r1, sl
 8002f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f3e:	4651      	mov	r1, sl
 8002f40:	018a      	lsls	r2, r1, #6
 8002f42:	4651      	mov	r1, sl
 8002f44:	ebb2 0801 	subs.w	r8, r2, r1
 8002f48:	4659      	mov	r1, fp
 8002f4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f62:	4690      	mov	r8, r2
 8002f64:	4699      	mov	r9, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	eb18 0303 	adds.w	r3, r8, r3
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	462b      	mov	r3, r5
 8002f70:	eb49 0303 	adc.w	r3, r9, r3
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f82:	4629      	mov	r1, r5
 8002f84:	024b      	lsls	r3, r1, #9
 8002f86:	4621      	mov	r1, r4
 8002f88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	024a      	lsls	r2, r1, #9
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f96:	2200      	movs	r2, #0
 8002f98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fa0:	f7fd fd64 	bl	8000a6c <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4613      	mov	r3, r2
 8002faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fac:	e058      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fae:	4b38      	ldr	r3, [pc, #224]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	099b      	lsrs	r3, r3, #6
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	4611      	mov	r1, r2
 8002fba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fbe:	623b      	str	r3, [r7, #32]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	f04f 0000 	mov.w	r0, #0
 8002fd0:	f04f 0100 	mov.w	r1, #0
 8002fd4:	0159      	lsls	r1, r3, #5
 8002fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fda:	0150      	lsls	r0, r2, #5
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fe6:	4649      	mov	r1, r9
 8002fe8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ff8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ffc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003000:	ebb2 040a 	subs.w	r4, r2, sl
 8003004:	eb63 050b 	sbc.w	r5, r3, fp
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	00eb      	lsls	r3, r5, #3
 8003012:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003016:	00e2      	lsls	r2, r4, #3
 8003018:	4614      	mov	r4, r2
 800301a:	461d      	mov	r5, r3
 800301c:	4643      	mov	r3, r8
 800301e:	18e3      	adds	r3, r4, r3
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	464b      	mov	r3, r9
 8003024:	eb45 0303 	adc.w	r3, r5, r3
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003036:	4629      	mov	r1, r5
 8003038:	028b      	lsls	r3, r1, #10
 800303a:	4621      	mov	r1, r4
 800303c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003040:	4621      	mov	r1, r4
 8003042:	028a      	lsls	r2, r1, #10
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304a:	2200      	movs	r2, #0
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	61fa      	str	r2, [r7, #28]
 8003050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003054:	f7fd fd0a 	bl	8000a6c <__aeabi_uldivmod>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4613      	mov	r3, r2
 800305e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_GetSysClockFreq+0x200>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	0c1b      	lsrs	r3, r3, #16
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	3301      	adds	r3, #1
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003074:	fbb2 f3f3 	udiv	r3, r2, r3
 8003078:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800307a:	e002      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_RCC_GetSysClockFreq+0x204>)
 800307e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003084:	4618      	mov	r0, r3
 8003086:	3750      	adds	r7, #80	; 0x50
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	00f42400 	.word	0x00f42400
 8003098:	007a1200 	.word	0x007a1200

0800309c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000024 	.word	0x20000024

080030b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030b8:	f7ff fff0 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0a9b      	lsrs	r3, r3, #10
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	4903      	ldr	r1, [pc, #12]	; (80030d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08003f0c 	.word	0x08003f0c

080030dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030e0:	f7ff ffdc 	bl	800309c <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0b5b      	lsrs	r3, r3, #13
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	08003f0c 	.word	0x08003f0c

08003104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e03f      	b.n	8003196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe fad8 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	; 0x24
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f929 	bl	80033a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800315c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800316c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800317c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b08a      	sub	sp, #40	; 0x28
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d17c      	bne.n	80032b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_UART_Transmit+0x2c>
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e075      	b.n	80032ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_UART_Transmit+0x3e>
 80031d8:	2302      	movs	r3, #2
 80031da:	e06e      	b.n	80032ba <HAL_UART_Transmit+0x11c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2221      	movs	r2, #33	; 0x21
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f2:	f7fe fcb5 	bl	8001b60 <HAL_GetTick>
 80031f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	88fa      	ldrh	r2, [r7, #6]
 80031fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d108      	bne.n	8003220 <HAL_UART_Transmit+0x82>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e003      	b.n	8003228 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003224:	2300      	movs	r3, #0
 8003226:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003230:	e02a      	b.n	8003288 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2200      	movs	r2, #0
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f840 	bl	80032c2 <UART_WaitOnFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e036      	b.n	80032ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	3302      	adds	r3, #2
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	e007      	b.n	800327a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	3301      	adds	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1cf      	bne.n	8003232 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	2140      	movs	r1, #64	; 0x40
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f810 	bl	80032c2 <UART_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e006      	b.n	80032ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	e000      	b.n	80032ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
  }
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b090      	sub	sp, #64	; 0x40
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	4613      	mov	r3, r2
 80032d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d2:	e050      	b.n	8003376 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d04c      	beq.n	8003376 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d007      	beq.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032e2:	f7fe fc3d 	bl	8001b60 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d241      	bcs.n	8003376 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	330c      	adds	r3, #12
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003312:	637a      	str	r2, [r7, #52]	; 0x34
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e5      	bne.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	613b      	str	r3, [r7, #16]
   return(result);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	63bb      	str	r3, [r7, #56]	; 0x38
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3314      	adds	r3, #20
 8003344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003346:	623a      	str	r2, [r7, #32]
 8003348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	69f9      	ldr	r1, [r7, #28]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	61bb      	str	r3, [r7, #24]
   return(result);
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e5      	bne.n	8003326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e00f      	b.n	8003396 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4013      	ands	r3, r2
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	461a      	mov	r2, r3
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	429a      	cmp	r2, r3
 8003392:	d09f      	beq.n	80032d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3740      	adds	r7, #64	; 0x40
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a4:	b0c0      	sub	sp, #256	; 0x100
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033bc:	68d9      	ldr	r1, [r3, #12]
 80033be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	ea40 0301 	orr.w	r3, r0, r1
 80033c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	431a      	orrs	r2, r3
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033f8:	f021 010c 	bic.w	r1, r1, #12
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003406:	430b      	orrs	r3, r1
 8003408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341a:	6999      	ldr	r1, [r3, #24]
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	ea40 0301 	orr.w	r3, r0, r1
 8003426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b8f      	ldr	r3, [pc, #572]	; (800366c <UART_SetConfig+0x2cc>)
 8003430:	429a      	cmp	r2, r3
 8003432:	d005      	beq.n	8003440 <UART_SetConfig+0xa0>
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b8d      	ldr	r3, [pc, #564]	; (8003670 <UART_SetConfig+0x2d0>)
 800343c:	429a      	cmp	r2, r3
 800343e:	d104      	bne.n	800344a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003440:	f7ff fe4c 	bl	80030dc <HAL_RCC_GetPCLK2Freq>
 8003444:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003448:	e003      	b.n	8003452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800344a:	f7ff fe33 	bl	80030b4 <HAL_RCC_GetPCLK1Freq>
 800344e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345c:	f040 810c 	bne.w	8003678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003464:	2200      	movs	r2, #0
 8003466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800346a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800346e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003472:	4622      	mov	r2, r4
 8003474:	462b      	mov	r3, r5
 8003476:	1891      	adds	r1, r2, r2
 8003478:	65b9      	str	r1, [r7, #88]	; 0x58
 800347a:	415b      	adcs	r3, r3
 800347c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800347e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003482:	4621      	mov	r1, r4
 8003484:	eb12 0801 	adds.w	r8, r2, r1
 8003488:	4629      	mov	r1, r5
 800348a:	eb43 0901 	adc.w	r9, r3, r1
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800349a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800349e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034a2:	4690      	mov	r8, r2
 80034a4:	4699      	mov	r9, r3
 80034a6:	4623      	mov	r3, r4
 80034a8:	eb18 0303 	adds.w	r3, r8, r3
 80034ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034b0:	462b      	mov	r3, r5
 80034b2:	eb49 0303 	adc.w	r3, r9, r3
 80034b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034ce:	460b      	mov	r3, r1
 80034d0:	18db      	adds	r3, r3, r3
 80034d2:	653b      	str	r3, [r7, #80]	; 0x50
 80034d4:	4613      	mov	r3, r2
 80034d6:	eb42 0303 	adc.w	r3, r2, r3
 80034da:	657b      	str	r3, [r7, #84]	; 0x54
 80034dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034e4:	f7fd fac2 	bl	8000a6c <__aeabi_uldivmod>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4b61      	ldr	r3, [pc, #388]	; (8003674 <UART_SetConfig+0x2d4>)
 80034ee:	fba3 2302 	umull	r2, r3, r3, r2
 80034f2:	095b      	lsrs	r3, r3, #5
 80034f4:	011c      	lsls	r4, r3, #4
 80034f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003500:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003508:	4642      	mov	r2, r8
 800350a:	464b      	mov	r3, r9
 800350c:	1891      	adds	r1, r2, r2
 800350e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003510:	415b      	adcs	r3, r3
 8003512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003518:	4641      	mov	r1, r8
 800351a:	eb12 0a01 	adds.w	sl, r2, r1
 800351e:	4649      	mov	r1, r9
 8003520:	eb43 0b01 	adc.w	fp, r3, r1
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003538:	4692      	mov	sl, r2
 800353a:	469b      	mov	fp, r3
 800353c:	4643      	mov	r3, r8
 800353e:	eb1a 0303 	adds.w	r3, sl, r3
 8003542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003546:	464b      	mov	r3, r9
 8003548:	eb4b 0303 	adc.w	r3, fp, r3
 800354c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800355c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003564:	460b      	mov	r3, r1
 8003566:	18db      	adds	r3, r3, r3
 8003568:	643b      	str	r3, [r7, #64]	; 0x40
 800356a:	4613      	mov	r3, r2
 800356c:	eb42 0303 	adc.w	r3, r2, r3
 8003570:	647b      	str	r3, [r7, #68]	; 0x44
 8003572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800357a:	f7fd fa77 	bl	8000a6c <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4611      	mov	r1, r2
 8003584:	4b3b      	ldr	r3, [pc, #236]	; (8003674 <UART_SetConfig+0x2d4>)
 8003586:	fba3 2301 	umull	r2, r3, r3, r1
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2264      	movs	r2, #100	; 0x64
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	1acb      	subs	r3, r1, r3
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <UART_SetConfig+0x2d4>)
 800359c:	fba3 2302 	umull	r2, r3, r3, r2
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035a8:	441c      	add	r4, r3
 80035aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035bc:	4642      	mov	r2, r8
 80035be:	464b      	mov	r3, r9
 80035c0:	1891      	adds	r1, r2, r2
 80035c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80035c4:	415b      	adcs	r3, r3
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035cc:	4641      	mov	r1, r8
 80035ce:	1851      	adds	r1, r2, r1
 80035d0:	6339      	str	r1, [r7, #48]	; 0x30
 80035d2:	4649      	mov	r1, r9
 80035d4:	414b      	adcs	r3, r1
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035e4:	4659      	mov	r1, fp
 80035e6:	00cb      	lsls	r3, r1, #3
 80035e8:	4651      	mov	r1, sl
 80035ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035ee:	4651      	mov	r1, sl
 80035f0:	00ca      	lsls	r2, r1, #3
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	4603      	mov	r3, r0
 80035f8:	4642      	mov	r2, r8
 80035fa:	189b      	adds	r3, r3, r2
 80035fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003600:	464b      	mov	r3, r9
 8003602:	460a      	mov	r2, r1
 8003604:	eb42 0303 	adc.w	r3, r2, r3
 8003608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003618:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800361c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003620:	460b      	mov	r3, r1
 8003622:	18db      	adds	r3, r3, r3
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
 8003626:	4613      	mov	r3, r2
 8003628:	eb42 0303 	adc.w	r3, r2, r3
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003636:	f7fd fa19 	bl	8000a6c <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <UART_SetConfig+0x2d4>)
 8003640:	fba3 1302 	umull	r1, r3, r3, r2
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	2164      	movs	r1, #100	; 0x64
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	3332      	adds	r3, #50	; 0x32
 8003652:	4a08      	ldr	r2, [pc, #32]	; (8003674 <UART_SetConfig+0x2d4>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	f003 0207 	and.w	r2, r3, #7
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4422      	add	r2, r4
 8003666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003668:	e105      	b.n	8003876 <UART_SetConfig+0x4d6>
 800366a:	bf00      	nop
 800366c:	40011000 	.word	0x40011000
 8003670:	40011400 	.word	0x40011400
 8003674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800367c:	2200      	movs	r2, #0
 800367e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003682:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800368a:	4642      	mov	r2, r8
 800368c:	464b      	mov	r3, r9
 800368e:	1891      	adds	r1, r2, r2
 8003690:	6239      	str	r1, [r7, #32]
 8003692:	415b      	adcs	r3, r3
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800369a:	4641      	mov	r1, r8
 800369c:	1854      	adds	r4, r2, r1
 800369e:	4649      	mov	r1, r9
 80036a0:	eb43 0501 	adc.w	r5, r3, r1
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	00eb      	lsls	r3, r5, #3
 80036ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b2:	00e2      	lsls	r2, r4, #3
 80036b4:	4614      	mov	r4, r2
 80036b6:	461d      	mov	r5, r3
 80036b8:	4643      	mov	r3, r8
 80036ba:	18e3      	adds	r3, r4, r3
 80036bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036c0:	464b      	mov	r3, r9
 80036c2:	eb45 0303 	adc.w	r3, r5, r3
 80036c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036e6:	4629      	mov	r1, r5
 80036e8:	008b      	lsls	r3, r1, #2
 80036ea:	4621      	mov	r1, r4
 80036ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036f0:	4621      	mov	r1, r4
 80036f2:	008a      	lsls	r2, r1, #2
 80036f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036f8:	f7fd f9b8 	bl	8000a6c <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4b60      	ldr	r3, [pc, #384]	; (8003884 <UART_SetConfig+0x4e4>)
 8003702:	fba3 2302 	umull	r2, r3, r3, r2
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	011c      	lsls	r4, r3, #4
 800370a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800370e:	2200      	movs	r2, #0
 8003710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003714:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800371c:	4642      	mov	r2, r8
 800371e:	464b      	mov	r3, r9
 8003720:	1891      	adds	r1, r2, r2
 8003722:	61b9      	str	r1, [r7, #24]
 8003724:	415b      	adcs	r3, r3
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800372c:	4641      	mov	r1, r8
 800372e:	1851      	adds	r1, r2, r1
 8003730:	6139      	str	r1, [r7, #16]
 8003732:	4649      	mov	r1, r9
 8003734:	414b      	adcs	r3, r1
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003744:	4659      	mov	r1, fp
 8003746:	00cb      	lsls	r3, r1, #3
 8003748:	4651      	mov	r1, sl
 800374a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374e:	4651      	mov	r1, sl
 8003750:	00ca      	lsls	r2, r1, #3
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	4603      	mov	r3, r0
 8003758:	4642      	mov	r2, r8
 800375a:	189b      	adds	r3, r3, r2
 800375c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003760:	464b      	mov	r3, r9
 8003762:	460a      	mov	r2, r1
 8003764:	eb42 0303 	adc.w	r3, r2, r3
 8003768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	67bb      	str	r3, [r7, #120]	; 0x78
 8003776:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003784:	4649      	mov	r1, r9
 8003786:	008b      	lsls	r3, r1, #2
 8003788:	4641      	mov	r1, r8
 800378a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800378e:	4641      	mov	r1, r8
 8003790:	008a      	lsls	r2, r1, #2
 8003792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003796:	f7fd f969 	bl	8000a6c <__aeabi_uldivmod>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4b39      	ldr	r3, [pc, #228]	; (8003884 <UART_SetConfig+0x4e4>)
 80037a0:	fba3 1302 	umull	r1, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	2164      	movs	r1, #100	; 0x64
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	3332      	adds	r3, #50	; 0x32
 80037b2:	4a34      	ldr	r2, [pc, #208]	; (8003884 <UART_SetConfig+0x4e4>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037be:	441c      	add	r4, r3
 80037c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c4:	2200      	movs	r2, #0
 80037c6:	673b      	str	r3, [r7, #112]	; 0x70
 80037c8:	677a      	str	r2, [r7, #116]	; 0x74
 80037ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037ce:	4642      	mov	r2, r8
 80037d0:	464b      	mov	r3, r9
 80037d2:	1891      	adds	r1, r2, r2
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	415b      	adcs	r3, r3
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037de:	4641      	mov	r1, r8
 80037e0:	1851      	adds	r1, r2, r1
 80037e2:	6039      	str	r1, [r7, #0]
 80037e4:	4649      	mov	r1, r9
 80037e6:	414b      	adcs	r3, r1
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037f6:	4659      	mov	r1, fp
 80037f8:	00cb      	lsls	r3, r1, #3
 80037fa:	4651      	mov	r1, sl
 80037fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003800:	4651      	mov	r1, sl
 8003802:	00ca      	lsls	r2, r1, #3
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	4603      	mov	r3, r0
 800380a:	4642      	mov	r2, r8
 800380c:	189b      	adds	r3, r3, r2
 800380e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003810:	464b      	mov	r3, r9
 8003812:	460a      	mov	r2, r1
 8003814:	eb42 0303 	adc.w	r3, r2, r3
 8003818:	66fb      	str	r3, [r7, #108]	; 0x6c
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	663b      	str	r3, [r7, #96]	; 0x60
 8003824:	667a      	str	r2, [r7, #100]	; 0x64
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003832:	4649      	mov	r1, r9
 8003834:	008b      	lsls	r3, r1, #2
 8003836:	4641      	mov	r1, r8
 8003838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800383c:	4641      	mov	r1, r8
 800383e:	008a      	lsls	r2, r1, #2
 8003840:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003844:	f7fd f912 	bl	8000a6c <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <UART_SetConfig+0x4e4>)
 800384e:	fba3 1302 	umull	r1, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2164      	movs	r1, #100	; 0x64
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	3332      	adds	r3, #50	; 0x32
 8003860:	4a08      	ldr	r2, [pc, #32]	; (8003884 <UART_SetConfig+0x4e4>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	f003 020f 	and.w	r2, r3, #15
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4422      	add	r2, r4
 8003874:	609a      	str	r2, [r3, #8]
}
 8003876:	bf00      	nop
 8003878:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800387c:	46bd      	mov	sp, r7
 800387e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003882:	bf00      	nop
 8003884:	51eb851f 	.word	0x51eb851f

08003888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003888:	b084      	sub	sp, #16
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	f107 001c 	add.w	r0, r7, #28
 8003896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	2b01      	cmp	r3, #1
 800389e:	d122      	bne.n	80038e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80038b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80038c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d105      	bne.n	80038da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 faa2 	bl	8003e24 <USB_CoreReset>
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	e01a      	b.n	800391c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fa96 	bl	8003e24 <USB_CoreReset>
 80038f8:	4603      	mov	r3, r0
 80038fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	639a      	str	r2, [r3, #56]	; 0x38
 800390e:	e005      	b.n	800391c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10b      	bne.n	800393a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f043 0206 	orr.w	r2, r3, #6
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003946:	b004      	add	sp, #16
 8003948:	4770      	bx	lr

0800394a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 0201 	bic.w	r2, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d115      	bne.n	80039ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800399a:	2001      	movs	r0, #1
 800399c:	f7fe f8ec 	bl	8001b78 <HAL_Delay>
      ms++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fa2e 	bl	8003e08 <USB_GetMode>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d01e      	beq.n	80039f0 <USB_SetCurrentMode+0x84>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b31      	cmp	r3, #49	; 0x31
 80039b6:	d9f0      	bls.n	800399a <USB_SetCurrentMode+0x2e>
 80039b8:	e01a      	b.n	80039f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d115      	bne.n	80039ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039cc:	2001      	movs	r0, #1
 80039ce:	f7fe f8d3 	bl	8001b78 <HAL_Delay>
      ms++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3301      	adds	r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fa15 	bl	8003e08 <USB_GetMode>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <USB_SetCurrentMode+0x84>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b31      	cmp	r3, #49	; 0x31
 80039e8:	d9f0      	bls.n	80039cc <USB_SetCurrentMode+0x60>
 80039ea:	e001      	b.n	80039f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e005      	b.n	80039fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2b32      	cmp	r3, #50	; 0x32
 80039f4:	d101      	bne.n	80039fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a04:	b084      	sub	sp, #16
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e009      	b.n	8003a38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3340      	adds	r3, #64	; 0x40
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	2200      	movs	r2, #0
 8003a30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	3301      	adds	r3, #1
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b0e      	cmp	r3, #14
 8003a3c:	d9f2      	bls.n	8003a24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d11c      	bne.n	8003a7e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a52:	f043 0302 	orr.w	r3, r3, #2
 8003a56:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a7c:	e00b      	b.n	8003a96 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	680b      	ldr	r3, [r1, #0]
 8003ab4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d10c      	bne.n	8003ad6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f965 	bl	8003d94 <USB_SetDevSpeed>
 8003aca:	e008      	b.n	8003ade <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003acc:	2101      	movs	r1, #1
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f960 	bl	8003d94 <USB_SetDevSpeed>
 8003ad4:	e003      	b.n	8003ade <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ad6:	2103      	movs	r1, #3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f95b 	bl	8003d94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ade:	2110      	movs	r1, #16
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8f3 	bl	8003ccc <USB_FlushTxFifo>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f91f 	bl	8003d34 <USB_FlushRxFifo>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	461a      	mov	r2, r3
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	e043      	b.n	8003bb2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b40:	d118      	bne.n	8003b74 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	461a      	mov	r2, r3
 8003b56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	e013      	b.n	8003b86 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e008      	b.n	8003b86 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	461a      	mov	r2, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b92:	461a      	mov	r2, r3
 8003b94:	2300      	movs	r3, #0
 8003b96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003baa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3b7      	bcc.n	8003b2a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	e043      	b.n	8003c48 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd6:	d118      	bne.n	8003c0a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bea:	461a      	mov	r2, r3
 8003bec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e013      	b.n	8003c1c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	461a      	mov	r2, r3
 8003c02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	e008      	b.n	8003c1c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	461a      	mov	r2, r3
 8003c18:	2300      	movs	r3, #0
 8003c1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	3301      	adds	r3, #1
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3b7      	bcc.n	8003bc0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f043 0210 	orr.w	r2, r3, #16
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <USB_DevInit+0x2c4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f043 0208 	orr.w	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d107      	bne.n	8003cb8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cb0:	f043 0304 	orr.w	r3, r3, #4
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cc4:	b004      	add	sp, #16
 8003cc6:	4770      	bx	lr
 8003cc8:	803c3800 	.word	0x803c3800

08003ccc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <USB_FlushTxFifo+0x64>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e01b      	b.n	8003d24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	daf2      	bge.n	8003cda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	019b      	lsls	r3, r3, #6
 8003cfc:	f043 0220 	orr.w	r2, r3, #32
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	3301      	adds	r3, #1
 8003d08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <USB_FlushTxFifo+0x64>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e006      	b.n	8003d24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f003 0320 	and.w	r3, r3, #32
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d0f0      	beq.n	8003d04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	00030d40 	.word	0x00030d40

08003d34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3301      	adds	r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a11      	ldr	r2, [pc, #68]	; (8003d90 <USB_FlushRxFifo+0x5c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d901      	bls.n	8003d52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e018      	b.n	8003d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	daf2      	bge.n	8003d40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2210      	movs	r2, #16
 8003d62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <USB_FlushRxFifo+0x5c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e006      	b.n	8003d84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0310 	and.w	r3, r3, #16
 8003d7e:	2b10      	cmp	r3, #16
 8003d80:	d0f0      	beq.n	8003d64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	00030d40 	.word	0x00030d40

08003d94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003db4:	4313      	orrs	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b085      	sub	sp, #20
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003de0:	f023 0303 	bic.w	r3, r3, #3
 8003de4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df4:	f043 0302 	orr.w	r3, r3, #2
 8003df8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f003 0301 	and.w	r3, r3, #1
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3301      	adds	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <USB_CoreReset+0x64>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d901      	bls.n	8003e42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e01b      	b.n	8003e7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	daf2      	bge.n	8003e30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f043 0201 	orr.w	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a09      	ldr	r2, [pc, #36]	; (8003e88 <USB_CoreReset+0x64>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e006      	b.n	8003e7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d0f0      	beq.n	8003e5a <USB_CoreReset+0x36>

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	00030d40 	.word	0x00030d40

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4d0d      	ldr	r5, [pc, #52]	; (8003ec4 <__libc_init_array+0x38>)
 8003e90:	4c0d      	ldr	r4, [pc, #52]	; (8003ec8 <__libc_init_array+0x3c>)
 8003e92:	1b64      	subs	r4, r4, r5
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	2600      	movs	r6, #0
 8003e98:	42a6      	cmp	r6, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	4d0b      	ldr	r5, [pc, #44]	; (8003ecc <__libc_init_array+0x40>)
 8003e9e:	4c0c      	ldr	r4, [pc, #48]	; (8003ed0 <__libc_init_array+0x44>)
 8003ea0:	f000 f820 	bl	8003ee4 <_init>
 8003ea4:	1b64      	subs	r4, r4, r5
 8003ea6:	10a4      	asrs	r4, r4, #2
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb4:	4798      	blx	r3
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebe:	4798      	blx	r3
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	08004720 	.word	0x08004720
 8003ec8:	08004720 	.word	0x08004720
 8003ecc:	08004720 	.word	0x08004720
 8003ed0:	08004724 	.word	0x08004724

08003ed4 <memset>:
 8003ed4:	4402      	add	r2, r0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d100      	bne.n	8003ede <memset+0xa>
 8003edc:	4770      	bx	lr
 8003ede:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee2:	e7f9      	b.n	8003ed8 <memset+0x4>

08003ee4 <_init>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	bf00      	nop
 8003ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eea:	bc08      	pop	{r3}
 8003eec:	469e      	mov	lr, r3
 8003eee:	4770      	bx	lr

08003ef0 <_fini>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr
