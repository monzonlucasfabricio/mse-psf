
pds21_MSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004074  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08004220  08004220  00014220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a3c  08004a3c  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a44  08004a44  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a44  08004a44  00014a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08004a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          00000614  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000648  20000648  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001102d  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ba5  00000000  00000000  00031091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  00033c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b20  00000000  00000000  000348c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bf8  00000000  00000000  000353e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000127d8  00000000  00000000  0005bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3a34  00000000  00000000  0006e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001521ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000313c  00000000  00000000  0015223c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000034 	.word	0x20000034
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004208 	.word	0x08004208

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000038 	.word	0x20000038
 80001e8:	08004208 	.word	0x08004208

080001ec <__aeabi_ldivmod>:
 80001ec:	b97b      	cbnz	r3, 800020e <__aeabi_ldivmod+0x22>
 80001ee:	b972      	cbnz	r2, 800020e <__aeabi_ldivmod+0x22>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bfbe      	ittt	lt
 80001f4:	2000      	movlt	r0, #0
 80001f6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80001fa:	e006      	blt.n	800020a <__aeabi_ldivmod+0x1e>
 80001fc:	bf08      	it	eq
 80001fe:	2800      	cmpeq	r0, #0
 8000200:	bf1c      	itt	ne
 8000202:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000206:	f04f 30ff 	movne.w	r0, #4294967295
 800020a:	f000 b9bf 	b.w	800058c <__aeabi_idiv0>
 800020e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000212:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000216:	2900      	cmp	r1, #0
 8000218:	db09      	blt.n	800022e <__aeabi_ldivmod+0x42>
 800021a:	2b00      	cmp	r3, #0
 800021c:	db1a      	blt.n	8000254 <__aeabi_ldivmod+0x68>
 800021e:	f000 f84d 	bl	80002bc <__udivmoddi4>
 8000222:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022a:	b004      	add	sp, #16
 800022c:	4770      	bx	lr
 800022e:	4240      	negs	r0, r0
 8000230:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000234:	2b00      	cmp	r3, #0
 8000236:	db1b      	blt.n	8000270 <__aeabi_ldivmod+0x84>
 8000238:	f000 f840 	bl	80002bc <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	4252      	negs	r2, r2
 800024e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000252:	4770      	bx	lr
 8000254:	4252      	negs	r2, r2
 8000256:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025a:	f000 f82f 	bl	80002bc <__udivmoddi4>
 800025e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000266:	b004      	add	sp, #16
 8000268:	4240      	negs	r0, r0
 800026a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026e:	4770      	bx	lr
 8000270:	4252      	negs	r2, r2
 8000272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000276:	f000 f821 	bl	80002bc <__udivmoddi4>
 800027a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000282:	b004      	add	sp, #16
 8000284:	4252      	negs	r2, r2
 8000286:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028a:	4770      	bx	lr

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b974 	b.w	800058c <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c0:	9d08      	ldr	r5, [sp, #32]
 80002c2:	4604      	mov	r4, r0
 80002c4:	468e      	mov	lr, r1
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d14d      	bne.n	8000366 <__udivmoddi4+0xaa>
 80002ca:	428a      	cmp	r2, r1
 80002cc:	4694      	mov	ip, r2
 80002ce:	d969      	bls.n	80003a4 <__udivmoddi4+0xe8>
 80002d0:	fab2 f282 	clz	r2, r2
 80002d4:	b152      	cbz	r2, 80002ec <__udivmoddi4+0x30>
 80002d6:	fa01 f302 	lsl.w	r3, r1, r2
 80002da:	f1c2 0120 	rsb	r1, r2, #32
 80002de:	fa20 f101 	lsr.w	r1, r0, r1
 80002e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e6:	ea41 0e03 	orr.w	lr, r1, r3
 80002ea:	4094      	lsls	r4, r2
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	0c21      	lsrs	r1, r4, #16
 80002f2:	fbbe f6f8 	udiv	r6, lr, r8
 80002f6:	fa1f f78c 	uxth.w	r7, ip
 80002fa:	fb08 e316 	mls	r3, r8, r6, lr
 80002fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000302:	fb06 f107 	mul.w	r1, r6, r7
 8000306:	4299      	cmp	r1, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x64>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 811f 	bcs.w	8000554 <__udivmoddi4+0x298>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 811c 	bls.w	8000554 <__udivmoddi4+0x298>
 800031c:	3e02      	subs	r6, #2
 800031e:	4463      	add	r3, ip
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 f707 	mul.w	r7, r0, r7
 8000334:	42a7      	cmp	r7, r4
 8000336:	d90a      	bls.n	800034e <__udivmoddi4+0x92>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000340:	f080 810a 	bcs.w	8000558 <__udivmoddi4+0x29c>
 8000344:	42a7      	cmp	r7, r4
 8000346:	f240 8107 	bls.w	8000558 <__udivmoddi4+0x29c>
 800034a:	4464      	add	r4, ip
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	1be4      	subs	r4, r4, r7
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xc2>
 800036a:	2d00      	cmp	r5, #0
 800036c:	f000 80ef 	beq.w	800054e <__udivmoddi4+0x292>
 8000370:	2600      	movs	r6, #0
 8000372:	e9c5 0100 	strd	r0, r1, [r5]
 8000376:	4630      	mov	r0, r6
 8000378:	4631      	mov	r1, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f683 	clz	r6, r3
 8000382:	2e00      	cmp	r6, #0
 8000384:	d14a      	bne.n	800041c <__udivmoddi4+0x160>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd4>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80f9 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	469e      	mov	lr, r3
 800039a:	2d00      	cmp	r5, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa4>
 800039e:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa4>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xec>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 8092 	bne.w	80004d6 <__udivmoddi4+0x21a>
 80003b2:	eba1 010c 	sub.w	r1, r1, ip
 80003b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	2601      	movs	r6, #1
 80003c0:	0c20      	lsrs	r0, r4, #16
 80003c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80003c6:	fb07 1113 	mls	r1, r7, r3, r1
 80003ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ce:	fb0e f003 	mul.w	r0, lr, r3
 80003d2:	4288      	cmp	r0, r1
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x12c>
 80003d6:	eb1c 0101 	adds.w	r1, ip, r1
 80003da:	f103 38ff 	add.w	r8, r3, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x12a>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f200 80cb 	bhi.w	800057c <__udivmoddi4+0x2c0>
 80003e6:	4643      	mov	r3, r8
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f0:	fb07 1110 	mls	r1, r7, r0, r1
 80003f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f8:	fb0e fe00 	mul.w	lr, lr, r0
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x156>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f100 31ff 	add.w	r1, r0, #4294967295
 8000408:	d202      	bcs.n	8000410 <__udivmoddi4+0x154>
 800040a:	45a6      	cmp	lr, r4
 800040c:	f200 80bb 	bhi.w	8000586 <__udivmoddi4+0x2ca>
 8000410:	4608      	mov	r0, r1
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041a:	e79c      	b.n	8000356 <__udivmoddi4+0x9a>
 800041c:	f1c6 0720 	rsb	r7, r6, #32
 8000420:	40b3      	lsls	r3, r6
 8000422:	fa22 fc07 	lsr.w	ip, r2, r7
 8000426:	ea4c 0c03 	orr.w	ip, ip, r3
 800042a:	fa20 f407 	lsr.w	r4, r0, r7
 800042e:	fa01 f306 	lsl.w	r3, r1, r6
 8000432:	431c      	orrs	r4, r3
 8000434:	40f9      	lsrs	r1, r7
 8000436:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043a:	fa00 f306 	lsl.w	r3, r0, r6
 800043e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000442:	0c20      	lsrs	r0, r4, #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fb09 1118 	mls	r1, r9, r8, r1
 800044c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000450:	fb08 f00e 	mul.w	r0, r8, lr
 8000454:	4288      	cmp	r0, r1
 8000456:	fa02 f206 	lsl.w	r2, r2, r6
 800045a:	d90b      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800045c:	eb1c 0101 	adds.w	r1, ip, r1
 8000460:	f108 3aff 	add.w	sl, r8, #4294967295
 8000464:	f080 8088 	bcs.w	8000578 <__udivmoddi4+0x2bc>
 8000468:	4288      	cmp	r0, r1
 800046a:	f240 8085 	bls.w	8000578 <__udivmoddi4+0x2bc>
 800046e:	f1a8 0802 	sub.w	r8, r8, #2
 8000472:	4461      	add	r1, ip
 8000474:	1a09      	subs	r1, r1, r0
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb1 f0f9 	udiv	r0, r1, r9
 800047c:	fb09 1110 	mls	r1, r9, r0, r1
 8000480:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000484:	fb00 fe0e 	mul.w	lr, r0, lr
 8000488:	458e      	cmp	lr, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1e2>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f100 34ff 	add.w	r4, r0, #4294967295
 8000494:	d26c      	bcs.n	8000570 <__udivmoddi4+0x2b4>
 8000496:	458e      	cmp	lr, r1
 8000498:	d96a      	bls.n	8000570 <__udivmoddi4+0x2b4>
 800049a:	3802      	subs	r0, #2
 800049c:	4461      	add	r1, ip
 800049e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a2:	fba0 9402 	umull	r9, r4, r0, r2
 80004a6:	eba1 010e 	sub.w	r1, r1, lr
 80004aa:	42a1      	cmp	r1, r4
 80004ac:	46c8      	mov	r8, r9
 80004ae:	46a6      	mov	lr, r4
 80004b0:	d356      	bcc.n	8000560 <__udivmoddi4+0x2a4>
 80004b2:	d053      	beq.n	800055c <__udivmoddi4+0x2a0>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x212>
 80004b6:	ebb3 0208 	subs.w	r2, r3, r8
 80004ba:	eb61 010e 	sbc.w	r1, r1, lr
 80004be:	fa01 f707 	lsl.w	r7, r1, r7
 80004c2:	fa22 f306 	lsr.w	r3, r2, r6
 80004c6:	40f1      	lsrs	r1, r6
 80004c8:	431f      	orrs	r7, r3
 80004ca:	e9c5 7100 	strd	r7, r1, [r5]
 80004ce:	2600      	movs	r6, #0
 80004d0:	4631      	mov	r1, r6
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	40d8      	lsrs	r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa21 f303 	lsr.w	r3, r1, r3
 80004e4:	4091      	lsls	r1, r2
 80004e6:	4301      	orrs	r1, r0
 80004e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ec:	fa1f fe8c 	uxth.w	lr, ip
 80004f0:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f4:	fb07 3610 	mls	r6, r7, r0, r3
 80004f8:	0c0b      	lsrs	r3, r1, #16
 80004fa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004fe:	fb00 f60e 	mul.w	r6, r0, lr
 8000502:	429e      	cmp	r6, r3
 8000504:	fa04 f402 	lsl.w	r4, r4, r2
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x260>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000512:	d22f      	bcs.n	8000574 <__udivmoddi4+0x2b8>
 8000514:	429e      	cmp	r6, r3
 8000516:	d92d      	bls.n	8000574 <__udivmoddi4+0x2b8>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1b9b      	subs	r3, r3, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb3 f6f7 	udiv	r6, r3, r7
 8000524:	fb07 3316 	mls	r3, r7, r6, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb06 f30e 	mul.w	r3, r6, lr
 8000530:	428b      	cmp	r3, r1
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x28a>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295
 800053c:	d216      	bcs.n	800056c <__udivmoddi4+0x2b0>
 800053e:	428b      	cmp	r3, r1
 8000540:	d914      	bls.n	800056c <__udivmoddi4+0x2b0>
 8000542:	3e02      	subs	r6, #2
 8000544:	4461      	add	r1, ip
 8000546:	1ac9      	subs	r1, r1, r3
 8000548:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054c:	e738      	b.n	80003c0 <__udivmoddi4+0x104>
 800054e:	462e      	mov	r6, r5
 8000550:	4628      	mov	r0, r5
 8000552:	e705      	b.n	8000360 <__udivmoddi4+0xa4>
 8000554:	4606      	mov	r6, r0
 8000556:	e6e3      	b.n	8000320 <__udivmoddi4+0x64>
 8000558:	4618      	mov	r0, r3
 800055a:	e6f8      	b.n	800034e <__udivmoddi4+0x92>
 800055c:	454b      	cmp	r3, r9
 800055e:	d2a9      	bcs.n	80004b4 <__udivmoddi4+0x1f8>
 8000560:	ebb9 0802 	subs.w	r8, r9, r2
 8000564:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000568:	3801      	subs	r0, #1
 800056a:	e7a3      	b.n	80004b4 <__udivmoddi4+0x1f8>
 800056c:	4646      	mov	r6, r8
 800056e:	e7ea      	b.n	8000546 <__udivmoddi4+0x28a>
 8000570:	4620      	mov	r0, r4
 8000572:	e794      	b.n	800049e <__udivmoddi4+0x1e2>
 8000574:	4640      	mov	r0, r8
 8000576:	e7d1      	b.n	800051c <__udivmoddi4+0x260>
 8000578:	46d0      	mov	r8, sl
 800057a:	e77b      	b.n	8000474 <__udivmoddi4+0x1b8>
 800057c:	3b02      	subs	r3, #2
 800057e:	4461      	add	r1, ip
 8000580:	e732      	b.n	80003e8 <__udivmoddi4+0x12c>
 8000582:	4630      	mov	r0, r6
 8000584:	e709      	b.n	800039a <__udivmoddi4+0xde>
 8000586:	4464      	add	r4, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e742      	b.n	8000412 <__udivmoddi4+0x156>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a2:	4b1a      	ldr	r3, [pc, #104]	; (800060c <MX_ADC1_Init+0x7c>)
 80005a4:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <MX_ADC1_Init+0x80>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_ADC1_Init+0x7c>)
 80005aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_ADC1_Init+0x7c>)
 80005b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_ADC1_Init+0x7c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_ADC1_Init+0x7c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_ADC1_Init+0x7c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_ADC1_Init+0x7c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_ADC1_Init+0x7c>)
 80005d4:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <MX_ADC1_Init+0x84>)
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_ADC1_Init+0x7c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_ADC1_Init+0x7c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_ADC1_Init+0x7c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_ADC1_Init+0x7c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <MX_ADC1_Init+0x7c>)
 80005f4:	f001 f9a6 	bl	8001944 <HAL_ADC_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80005fe:	f000 fb29 	bl	8000c54 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000050 	.word	0x20000050
 8000610:	40012000 	.word	0x40012000
 8000614:	0f000001 	.word	0x0f000001

08000618 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a17      	ldr	r2, [pc, #92]	; (8000694 <HAL_ADC_MspInit+0x7c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d127      	bne.n	800068a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b16      	ldr	r3, [pc, #88]	; (8000698 <HAL_ADC_MspInit+0x80>)
 8000640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000642:	4a15      	ldr	r2, [pc, #84]	; (8000698 <HAL_ADC_MspInit+0x80>)
 8000644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000648:	6453      	str	r3, [r2, #68]	; 0x44
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <HAL_ADC_MspInit+0x80>)
 800064c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <HAL_ADC_MspInit+0x80>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <HAL_ADC_MspInit+0x80>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <HAL_ADC_MspInit+0x80>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_1_Pin;
 8000672:	2301      	movs	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000676:	2303      	movs	r3, #3
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_1_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <HAL_ADC_MspInit+0x84>)
 8000686:	f001 ff3b 	bl	8002500 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800068a:	bf00      	nop
 800068c:	3728      	adds	r7, #40	; 0x28
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40012000 	.word	0x40012000
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000

080006a0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_DAC_Init+0x60>)
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <MX_DAC_Init+0x64>)
 80006b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006b4:	4812      	ldr	r0, [pc, #72]	; (8000700 <MX_DAC_Init+0x60>)
 80006b6:	f001 fe3a 	bl	800232e <HAL_DAC_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006c0:	f000 fac8 	bl	8000c54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	4619      	mov	r1, r3
 80006d2:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_DAC_Init+0x60>)
 80006d4:	f001 fec4 	bl	8002460 <HAL_DAC_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006de:	f000 fab9 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <MX_DAC_Init+0x60>)
 80006e6:	f001 fe44 	bl	8002372 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80006ea:	2300      	movs	r3, #0
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	4803      	ldr	r0, [pc, #12]	; (8000700 <MX_DAC_Init+0x60>)
 80006f2:	f001 fe90 	bl	8002416 <HAL_DAC_SetValue>

  /* USER CODE END DAC_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000098 	.word	0x20000098
 8000704:	40007400 	.word	0x40007400

08000708 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_DAC_MspInit+0x7c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d127      	bne.n	800077a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <HAL_DAC_MspInit+0x80>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <HAL_DAC_MspInit+0x80>)
 8000734:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <HAL_DAC_MspInit+0x80>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_DAC_MspInit+0x80>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <HAL_DAC_MspInit+0x80>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <HAL_DAC_MspInit+0x80>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000762:	2310      	movs	r3, #16
 8000764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000766:	2303      	movs	r3, #3
 8000768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <HAL_DAC_MspInit+0x84>)
 8000776:	f001 fec3 	bl	8002500 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40007400 	.word	0x40007400
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000

08000790 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4b6d      	ldr	r3, [pc, #436]	; (8000960 <MX_GPIO_Init+0x1d0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a6c      	ldr	r2, [pc, #432]	; (8000960 <MX_GPIO_Init+0x1d0>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b6a      	ldr	r3, [pc, #424]	; (8000960 <MX_GPIO_Init+0x1d0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b66      	ldr	r3, [pc, #408]	; (8000960 <MX_GPIO_Init+0x1d0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a65      	ldr	r2, [pc, #404]	; (8000960 <MX_GPIO_Init+0x1d0>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b63      	ldr	r3, [pc, #396]	; (8000960 <MX_GPIO_Init+0x1d0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b5f      	ldr	r3, [pc, #380]	; (8000960 <MX_GPIO_Init+0x1d0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a5e      	ldr	r2, [pc, #376]	; (8000960 <MX_GPIO_Init+0x1d0>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b5c      	ldr	r3, [pc, #368]	; (8000960 <MX_GPIO_Init+0x1d0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b58      	ldr	r3, [pc, #352]	; (8000960 <MX_GPIO_Init+0x1d0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a57      	ldr	r2, [pc, #348]	; (8000960 <MX_GPIO_Init+0x1d0>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b55      	ldr	r3, [pc, #340]	; (8000960 <MX_GPIO_Init+0x1d0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b51      	ldr	r3, [pc, #324]	; (8000960 <MX_GPIO_Init+0x1d0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a50      	ldr	r2, [pc, #320]	; (8000960 <MX_GPIO_Init+0x1d0>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b4e      	ldr	r3, [pc, #312]	; (8000960 <MX_GPIO_Init+0x1d0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b4a      	ldr	r3, [pc, #296]	; (8000960 <MX_GPIO_Init+0x1d0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a49      	ldr	r2, [pc, #292]	; (8000960 <MX_GPIO_Init+0x1d0>)
 800083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b47      	ldr	r3, [pc, #284]	; (8000960 <MX_GPIO_Init+0x1d0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	f244 0181 	movw	r1, #16513	; 0x4081
 8000854:	4843      	ldr	r0, [pc, #268]	; (8000964 <MX_GPIO_Init+0x1d4>)
 8000856:	f001 ffff 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2140      	movs	r1, #64	; 0x40
 800085e:	4842      	ldr	r0, [pc, #264]	; (8000968 <MX_GPIO_Init+0x1d8>)
 8000860:	f001 fffa 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	483c      	ldr	r0, [pc, #240]	; (800096c <MX_GPIO_Init+0x1dc>)
 800087c:	f001 fe40 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000880:	2332      	movs	r3, #50	; 0x32
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000890:	230b      	movs	r3, #11
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	4834      	ldr	r0, [pc, #208]	; (800096c <MX_GPIO_Init+0x1dc>)
 800089c:	f001 fe30 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008a0:	2386      	movs	r3, #134	; 0x86
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b0:	230b      	movs	r3, #11
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	482d      	ldr	r0, [pc, #180]	; (8000970 <MX_GPIO_Init+0x1e0>)
 80008bc:	f001 fe20 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4822      	ldr	r0, [pc, #136]	; (8000964 <MX_GPIO_Init+0x1d4>)
 80008da:	f001 fe11 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f0:	230b      	movs	r3, #11
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481a      	ldr	r0, [pc, #104]	; (8000964 <MX_GPIO_Init+0x1d4>)
 80008fc:	f001 fe00 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000900:	2340      	movs	r3, #64	; 0x40
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4814      	ldr	r0, [pc, #80]	; (8000968 <MX_GPIO_Init+0x1d8>)
 8000918:	f001 fdf2 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <MX_GPIO_Init+0x1d8>)
 8000930:	f001 fde6 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000934:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000946:	230b      	movs	r3, #11
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_GPIO_Init+0x1d8>)
 8000952:	f001 fdd5 	bl	8002500 <HAL_GPIO_Init>

}
 8000956:	bf00      	nop
 8000958:	3730      	adds	r7, #48	; 0x30
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40020400 	.word	0x40020400
 8000968:	40021800 	.word	0x40021800
 800096c:	40020800 	.word	0x40020800
 8000970:	40020000 	.word	0x40020000

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097c:	f000 ff4c 	bl	8001818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000980:	f000 f8fe 	bl	8000b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000984:	f7ff ff04 	bl	8000790 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000988:	f000 fab0 	bl	8000eec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800098c:	f000 fb74 	bl	8001078 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000990:	f7ff fdfe 	bl	8000590 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000994:	f000 fa80 	bl	8000e98 <MX_USART2_UART_Init>
  MX_DAC_Init();
 8000998:	f7ff fe82 	bl	80006a0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */

  uint16_t sample = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
  DBG_CyclesCounterInit(CLOCK_SPEED); // Enable the cycle counter
 80009a2:	4867      	ldr	r0, [pc, #412]	; (8000b40 <main+0x1cc>)
 80009a4:	f000 f9a2 	bl	8000cec <DBG_CyclesCounterInit>
  int16_t adc [N_MUESTRAS];
  float t = 0;
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  float32_t result = 0;
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Reset cycle counter to 0 */
	  DBG_CyclesCounterReset();
 80009b8:	4b62      	ldr	r3, [pc, #392]	; (8000b44 <main+0x1d0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]

	  /* Get the ADC sample */
	  adc[sample] = (((ADC_Read(0)-512))>>(10-BITS))<<(6+(10-BITS));
 80009be:	2000      	movs	r0, #0
 80009c0:	f000 f96e 	bl	8000ca0 <ADC_Read>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80009ca:	11db      	asrs	r3, r3, #7
 80009cc:	035b      	lsls	r3, r3, #13
 80009ce:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80009d2:	b219      	sxth	r1, r3
 80009d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80009d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80009dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	  /* Send the sample in an Array */
	  uartWriteByteArray(&huart2, (uint8_t* )&adc[sample], sizeof(adc[0]));
 80009e0:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80009e4:	1d3a      	adds	r2, r7, #4
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	2202      	movs	r2, #2
 80009ec:	4619      	mov	r1, r3
 80009ee:	4856      	ldr	r0, [pc, #344]	; (8000b48 <main+0x1d4>)
 80009f0:	f000 f9a8 	bl	8000d44 <uartWriteByteArray>

      t=((tick%(sweept*header.fs))/(float)header.fs);
 80009f4:	4b55      	ldr	r3, [pc, #340]	; (8000b4c <main+0x1d8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a55      	ldr	r2, [pc, #340]	; (8000b50 <main+0x1dc>)
 80009fa:	8812      	ldrh	r2, [r2, #0]
 80009fc:	4611      	mov	r1, r2
 80009fe:	4a55      	ldr	r2, [pc, #340]	; (8000b54 <main+0x1e0>)
 8000a00:	8952      	ldrh	r2, [r2, #10]
 8000a02:	fb01 f202 	mul.w	r2, r1, r2
 8000a06:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a0a:	fb01 f202 	mul.w	r2, r1, r2
 8000a0e:	1a9b      	subs	r3, r3, r2
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a18:	4b4e      	ldr	r3, [pc, #312]	; (8000b54 <main+0x1e0>)
 8000a1a:	895b      	ldrh	r3, [r3, #10]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a28:	edc7 7a82 	vstr	s15, [r7, #520]	; 0x208
      tick++;
 8000a2c:	4b47      	ldr	r3, [pc, #284]	; (8000b4c <main+0x1d8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3301      	adds	r3, #1
 8000a32:	4a46      	ldr	r2, [pc, #280]	; (8000b4c <main+0x1d8>)
 8000a34:	6013      	str	r3, [r2, #0]
      result = 512*arm_sin_f32 (t*B/2*(t/sweept)*2*PI)+512;
 8000a36:	4b48      	ldr	r3, [pc, #288]	; (8000b58 <main+0x1e4>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	ee07 3a90 	vmov	s15, r3
 8000a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a42:	edd7 7a82 	vldr	s15, [r7, #520]	; 0x208
 8000a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a4a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a52:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <main+0x1dc>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a5e:	ed97 6a82 	vldr	s12, [r7, #520]	; 0x208
 8000a62:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a6e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000b5c <main+0x1e8>
 8000a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a76:	eeb0 0a67 	vmov.f32	s0, s15
 8000a7a:	f000 fbaf 	bl	80011dc <arm_sin_f32>
 8000a7e:	eef0 7a40 	vmov.f32	s15, s0
 8000a82:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000b60 <main+0x1ec>
 8000a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a8a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000b60 <main+0x1ec>
 8000a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a92:	edc7 7a81 	vstr	s15, [r7, #516]	; 0x204
      DAC_Write(&hdac, result);
 8000a96:	edd7 7a81 	vldr	s15, [r7, #516]	; 0x204
 8000a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a9e:	ee17 3a90 	vmov	r3, s15
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	482f      	ldr	r0, [pc, #188]	; (8000b64 <main+0x1f0>)
 8000aa8:	f000 f97a 	bl	8000da0 <DAC_Write>

	  /* Increment the sample counter and check if we are in the last sample */
	  if ( ++sample==header.N ) {
 8000aac:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000ab6:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <main+0x1e0>)
 8000ab8:	891b      	ldrh	r3, [r3, #8]
 8000aba:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d12d      	bne.n	8000b1e <main+0x1aa>
		 DAC_Write( &hdac, 512);
 8000ac2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac6:	4827      	ldr	r0, [pc, #156]	; (8000b64 <main+0x1f0>)
 8000ac8:	f000 f96a 	bl	8000da0 <DAC_Write>
		 gpioToggle (GPIOB,LD1_Pin);
 8000acc:	2101      	movs	r1, #1
 8000ace:	4826      	ldr	r0, [pc, #152]	; (8000b68 <main+0x1f4>)
 8000ad0:	f000 f957 	bl	8000d82 <gpioToggle>
		 arm_max_q15 ( adc, header.N, &header.maxValue,&header.maxIndex );
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <main+0x1e0>)
 8000ad6:	891b      	ldrh	r3, [r3, #8]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	1d38      	adds	r0, r7, #4
 8000adc:	4b23      	ldr	r3, [pc, #140]	; (8000b6c <main+0x1f8>)
 8000ade:	4a24      	ldr	r2, [pc, #144]	; (8000b70 <main+0x1fc>)
 8000ae0:	f000 fce6 	bl	80014b0 <arm_max_q15>
		 arm_min_q15 ( adc, header.N, &header.minValue,&header.minIndex );
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <main+0x1e0>)
 8000ae6:	891b      	ldrh	r3, [r3, #8]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	1d38      	adds	r0, r7, #4
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <main+0x200>)
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <main+0x204>)
 8000af0:	f000 fd65 	bl	80015be <arm_min_q15>
		 arm_rms_q15 ( adc, header.N, &header.rms                       );
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <main+0x1e0>)
 8000af6:	891b      	ldrh	r3, [r3, #8]
 8000af8:	4619      	mov	r1, r3
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <main+0x208>)
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fde4 	bl	80016cc <arm_rms_q15>
		 //trigger(2);

		 /* Increment id */
		 header.id++;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <main+0x1e0>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <main+0x1e0>)
 8000b0c:	6053      	str	r3, [r2, #4]

		 /* Send the header in an Array */
		 uartWriteByteArray (&huart2, (uint8_t*)&header, sizeof(header));
 8000b0e:	2220      	movs	r2, #32
 8000b10:	4910      	ldr	r1, [pc, #64]	; (8000b54 <main+0x1e0>)
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <main+0x1d4>)
 8000b14:	f000 f916 	bl	8000d44 <uartWriteByteArray>


		 //ADC_Read(CH0);
		 sample = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	  }
	  /* Blinks at fs/2 frequency */
	  gpioToggle (GPIOB,LD3_Pin);
 8000b1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b22:	4811      	ldr	r0, [pc, #68]	; (8000b68 <main+0x1f4>)
 8000b24:	f000 f92d 	bl	8000d82 <gpioToggle>

	  /* Wait until it completes the Cycles. 168.000.000/10.000 = 16.800 cycles */
	  while(DBG_CyclesCounterRead() < CLOCK_SPEED/header.fs);
 8000b28:	bf00      	nop
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <main+0x1d0>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	4a09      	ldr	r2, [pc, #36]	; (8000b54 <main+0x1e0>)
 8000b30:	8952      	ldrh	r2, [r2, #10]
 8000b32:	4611      	mov	r1, r2
 8000b34:	4a02      	ldr	r2, [pc, #8]	; (8000b40 <main+0x1cc>)
 8000b36:	fb92 f2f1 	sdiv	r2, r2, r1
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d3f5      	bcc.n	8000b2a <main+0x1b6>
	  DBG_CyclesCounterReset();
 8000b3e:	e73b      	b.n	80009b8 <main+0x44>
 8000b40:	0a037a00 	.word	0x0a037a00
 8000b44:	e0001000 	.word	0xe0001000
 8000b48:	200000b0 	.word	0x200000b0
 8000b4c:	200000ac 	.word	0x200000ac
 8000b50:	20000022 	.word	0x20000022
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000020 	.word	0x20000020
 8000b5c:	40490fdb 	.word	0x40490fdb
 8000b60:	44000000 	.word	0x44000000
 8000b64:	20000098 	.word	0x20000098
 8000b68:	40020400 	.word	0x40020400
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	20000014 	.word	0x20000014
 8000b74:	20000010 	.word	0x20000010
 8000b78:	20000016 	.word	0x20000016
 8000b7c:	20000018 	.word	0x20000018

08000b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b094      	sub	sp, #80	; 0x50
 8000b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b86:	f107 0320 	add.w	r3, r7, #32
 8000b8a:	2230      	movs	r2, #48	; 0x30
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 fb32 	bl	80041f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <SystemClock_Config+0xcc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	4a27      	ldr	r2, [pc, #156]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <SystemClock_Config+0xcc>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <SystemClock_Config+0xd0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <SystemClock_Config+0xd0>)
 8000bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <SystemClock_Config+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000be0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be6:	2302      	movs	r3, #2
 8000be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bf4:	23a8      	movs	r3, #168	; 0xa8
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f001 ff77 	bl	8002af8 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c10:	f000 f820 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2105      	movs	r1, #5
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 f9d8 	bl	8002fe8 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c3e:	f000 f809 	bl	8000c54 <Error_Handler>
  }
}
 8000c42:	bf00      	nop
 8000c44:	3750      	adds	r7, #80	; 0x50
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40007000 	.word	0x40007000

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>
	...

08000c60 <ADC_SelectCH0>:
}adc_e;

static uint32_t ClockSpeed = CLOCK_SPEED;

void ADC_SelectCH0(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <ADC_SelectCH0+0x3c>)
 8000c84:	f001 f840 	bl	8001d08 <HAL_ADC_ConfigChannel>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <ADC_SelectCH0+0x32>
	{
		Error_Handler();
 8000c8e:	f7ff ffe1 	bl	8000c54 <Error_Handler>
	}
}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000050 	.word	0x20000050

08000ca0 <ADC_Read>:

uint16_t ADC_Read(uint16_t adc)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
	uint16_t adc_value;
	switch(adc){
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <ADC_Read+0x16>
		case CH0:
			ADC_SelectCH0();
 8000cb0:	f7ff ffd6 	bl	8000c60 <ADC_SelectCH0>
		break;
 8000cb4:	e002      	b.n	8000cbc <ADC_Read+0x1c>
		default:
			ADC_SelectCH0();
 8000cb6:	f7ff ffd3 	bl	8000c60 <ADC_SelectCH0>
		break;
 8000cba:	bf00      	nop
	}

	HAL_ADC_Start(&hadc1);
 8000cbc:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <ADC_Read+0x48>)
 8000cbe:	f000 fe85 	bl	80019cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8000cc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cc6:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <ADC_Read+0x48>)
 8000cc8:	f000 ff85 	bl	8001bd6 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8000ccc:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <ADC_Read+0x48>)
 8000cce:	f001 f80d 	bl	8001cec <HAL_ADC_GetValue>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop(&hadc1);
 8000cd6:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <ADC_Read+0x48>)
 8000cd8:	f000 ff4a 	bl	8001b70 <HAL_ADC_Stop>
	return adc_value;
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000050 	.word	0x20000050

08000cec <DBG_CyclesCounterInit>:


bool DBG_CyclesCounterInit( uint32_t clockSpeed )
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
 8000cf4:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <DBG_CyclesCounterInit+0x28>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
   //Iniciar el contador de ciclos de clock.
   DWT->CTRL  |= 1; // *DWT_CTRL  |= 1;
 8000cfa:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <DBG_CyclesCounterInit+0x2c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <DBG_CyclesCounterInit+0x2c>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	6013      	str	r3, [r2, #0]
   return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	20000024 	.word	0x20000024
 8000d18:	e0001000 	.word	0xe0001000

08000d1c <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( UART_HandleTypeDef *huart, const uint8_t value)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
	uint8_t val = value;
 8000d28:	78fb      	ldrb	r3, [r7, #3]
 8000d2a:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(huart, &val, 1, HAL_MAX_DELAY);
 8000d2c:	f107 010f 	add.w	r1, r7, #15
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	2201      	movs	r2, #1
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f002 fbc3 	bl	80034c2 <HAL_UART_Transmit>
}
 8000d3c:	bf00      	nop
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <uartWriteByteArray>:


// Blocking, Send a Byte Array
void uartWriteByteArray( UART_HandleTypeDef *huart, const uint8_t* byteArray, uint32_t byteArrayLen )
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
   uint32_t i = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
   for( i=0; i<byteArrayLen; i++ ) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <uartWriteByteArray+0x2c>
	   uartWriteByte(huart, byteArray[i]);
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	68f8      	ldr	r0, [r7, #12]
 8000d66:	f7ff ffd9 	bl	8000d1c <uartWriteByte>
   for( i=0; i<byteArrayLen; i++ ) {
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3f0      	bcc.n	8000d5a <uartWriteByteArray+0x16>
   }
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <gpioToggle>:

void gpioToggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f001 fd79 	bl	800288a <HAL_GPIO_TogglePin>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <DAC_Write>:
          512*0.3*arm_sin_f32 (2*PI*t*SOL)+512;
}


void DAC_Write(DAC_HandleTypeDef *handle, uint16_t value)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
	// DAC is 12 bit so maximum value should be 4096
	if( value > 4096 )
 8000dac:	887b      	ldrh	r3, [r7, #2]
 8000dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000db2:	d902      	bls.n	8000dba <DAC_Write+0x1a>
	{
		value = 4096; // Saturation
 8000db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db8:	807b      	strh	r3, [r7, #2]
	}

	HAL_DAC_SetValue(handle, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, value);
 8000dba:	887b      	ldrh	r3, [r7, #2]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f001 fb28 	bl	8002416 <HAL_DAC_SetValue>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x4c>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 fd26 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	; (8000ee8 <MX_USART2_UART_Init+0x50>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ea4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000ea8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	f002 faaa 	bl	8003428 <HAL_UART_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eda:	f7ff febb 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200000b0 	.word	0x200000b0
 8000ee8:	40004400 	.word	0x40004400

08000eec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <MX_USART3_UART_Init+0x50>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_USART3_UART_Init+0x4c>)
 8000f24:	f002 fa80 	bl	8003428 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000f2e:	f7ff fe91 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000f4 	.word	0x200000f4
 8000f3c:	40004800 	.word	0x40004800

08000f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a41      	ldr	r2, [pc, #260]	; (8001064 <HAL_UART_MspInit+0x124>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d14a      	bne.n	8000ff8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <HAL_UART_MspInit+0x128>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	4a3f      	ldr	r2, [pc, #252]	; (8001068 <HAL_UART_MspInit+0x128>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	6413      	str	r3, [r2, #64]	; 0x40
 8000f72:	4b3d      	ldr	r3, [pc, #244]	; (8001068 <HAL_UART_MspInit+0x128>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b39      	ldr	r3, [pc, #228]	; (8001068 <HAL_UART_MspInit+0x128>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a38      	ldr	r2, [pc, #224]	; (8001068 <HAL_UART_MspInit+0x128>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <HAL_UART_MspInit+0x128>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <HAL_UART_MspInit+0x128>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a31      	ldr	r2, [pc, #196]	; (8001068 <HAL_UART_MspInit+0x128>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <HAL_UART_MspInit+0x128>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0308 	and.w	r3, r3, #8
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = UART2_RX_Pin;
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_RX_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4826      	ldr	r0, [pc, #152]	; (800106c <HAL_UART_MspInit+0x12c>)
 8000fd2:	f001 fa95 	bl	8002500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART2_TX_Pin;
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(UART2_TX_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481f      	ldr	r0, [pc, #124]	; (8001070 <HAL_UART_MspInit+0x130>)
 8000ff2:	f001 fa85 	bl	8002500 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ff6:	e031      	b.n	800105c <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	; (8001074 <HAL_UART_MspInit+0x134>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12c      	bne.n	800105c <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_UART_MspInit+0x128>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_UART_MspInit+0x128>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_UART_MspInit+0x128>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_UART_MspInit+0x128>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <HAL_UART_MspInit+0x128>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_UART_MspInit+0x128>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800103a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800104c:	2307      	movs	r3, #7
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <HAL_UART_MspInit+0x130>)
 8001058:	f001 fa52 	bl	8002500 <HAL_GPIO_Init>
}
 800105c:	bf00      	nop
 800105e:	3730      	adds	r7, #48	; 0x30
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40004400 	.word	0x40004400
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40004800 	.word	0x40004800

08001078 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800107c:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001082:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001086:	2204      	movs	r2, #4
 8001088:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108c:	2202      	movs	r2, #2
 800108e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001098:	2202      	movs	r2, #2
 800109a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109e:	2201      	movs	r2, #1
 80010a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010bc:	f001 fbff 	bl	80028be <HAL_PCD_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010c6:	f7ff fdc5 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000138 	.word	0x20000138

080010d4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010f4:	d13f      	bne.n	8001176 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HAL_PCD_MspInit+0xac>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a20      	ldr	r2, [pc, #128]	; (8001180 <HAL_PCD_MspInit+0xac>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_PCD_MspInit+0xac>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001112:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001124:	230a      	movs	r3, #10
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	4815      	ldr	r0, [pc, #84]	; (8001184 <HAL_PCD_MspInit+0xb0>)
 8001130:	f001 f9e6 	bl	8002500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480e      	ldr	r0, [pc, #56]	; (8001184 <HAL_PCD_MspInit+0xb0>)
 800114a:	f001 f9d9 	bl	8002500 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_PCD_MspInit+0xac>)
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_PCD_MspInit+0xac>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	6353      	str	r3, [r2, #52]	; 0x34
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_PCD_MspInit+0xac>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_PCD_MspInit+0xac>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_PCD_MspInit+0xac>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40020000 	.word	0x40020000

08001188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118e:	490e      	ldr	r1, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001190:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a4:	4c0b      	ldr	r4, [pc, #44]	; (80011d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b2:	f7ff fe5f 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f002 fffb 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ba:	f7ff fbdb 	bl	8000974 <main>
  bx  lr    
 80011be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80011cc:	08004a4c 	.word	0x08004a4c
  ldr r2, =_sbss
 80011d0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80011d4:	20000648 	.word	0x20000648

080011d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC_IRQHandler>
	...

080011dc <arm_sin_f32>:
 * @return  sin(x).
 */

float32_t arm_sin_f32(
  float32_t x)
{
 80011dc:	b480      	push	{r7}
 80011de:	b08b      	sub	sp, #44	; 0x2c
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	ed87 0a01 	vstr	s0, [r7, #4]
  float32_t a, b;                                        /* Two nearest output values */
  int32_t n;
  float32_t findex;

  /* Special case for small negative inputs */
  if ((x < 0.0f) && (x >= -1.9e-7f)) {
 80011e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d50a      	bpl.n	800120a <arm_sin_f32+0x2e>
 80011f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80012e4 <arm_sin_f32+0x108>
 80011fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001204:	db01      	blt.n	800120a <arm_sin_f32+0x2e>
     return x;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	e062      	b.n	80012d0 <arm_sin_f32+0xf4>
  }

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800120a:	edd7 7a01 	vldr	s15, [r7, #4]
 800120e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80012e8 <arm_sin_f32+0x10c>
 8001212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001216:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800121a:	edd7 7a08 	vldr	s15, [r7, #32]
 800121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001222:	ee17 3a90 	vmov	r3, s15
 8001226:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (x < 0.0f)
 8001228:	edd7 7a01 	vldr	s15, [r7, #4]
 800122c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001234:	d502      	bpl.n	800123c <arm_sin_f32+0x60>
  {
    n--;
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	3b01      	subs	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	ed97 7a08 	vldr	s14, [r7, #32]
 800124a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124e:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8001252:	edd7 7a08 	vldr	s15, [r7, #32]
 8001256:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80012ec <arm_sin_f32+0x110>
 800125a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125e:	edc7 7a07 	vstr	s15, [r7, #28]

  index = ((uint16_t)findex) & 0x1ff;
 8001262:	edd7 7a07 	vldr	s15, [r7, #28]
 8001266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126a:	ee17 3a90 	vmov	r3, s15
 800126e:	b29b      	uxth	r3, r3
 8001270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001274:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8001276:	8b7b      	ldrh	r3, [r7, #26]
 8001278:	ee07 3a90 	vmov	s15, r3
 800127c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001280:	ed97 7a07 	vldr	s14, [r7, #28]
 8001284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001288:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800128c:	8b7b      	ldrh	r3, [r7, #26]
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <arm_sin_f32+0x114>)
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8001298:	8b7b      	ldrh	r3, [r7, #26]
 800129a:	3301      	adds	r3, #1
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <arm_sin_f32+0x114>)
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f-fract)*a + fract*b;
 80012a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80012ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ba:	edd7 6a05 	vldr	s13, [r7, #20]
 80012be:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (sinVal);
 80012ce:	68bb      	ldr	r3, [r7, #8]
}
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	372c      	adds	r7, #44	; 0x2c
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	b44c02cd 	.word	0xb44c02cd
 80012e8:	3e22f983 	.word	0x3e22f983
 80012ec:	44000000 	.word	0x44000000
 80012f0:	08004238 	.word	0x08004238

080012f4 <arm_sqrt_q15>:
   */

arm_status arm_sqrt_q15(
  q15_t in,
  q15_t * pOut)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	; 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	80fb      	strh	r3, [r7, #6]
  {
    q31_t fracval;
    float32_t floatval;
  } tempconv;

  number = in;
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	83fb      	strh	r3, [r7, #30]

  /* If the input is a positive number then compute the signBits. */
  if (number > 0)
 8001304:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001308:	2b00      	cmp	r3, #0
 800130a:	f340 80c0 	ble.w	800148e <arm_sqrt_q15+0x19a>
  {
    signBits1 = __CLZ(number) - 17;
 800130e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	b29b      	uxth	r3, r3
 800131a:	3b11      	subs	r3, #17
 800131c:	b29b      	uxth	r3, r3
 800131e:	837b      	strh	r3, [r7, #26]

    /* Shift by the number of signBits1 */
    if ((signBits1 % 2) == 0)
 8001320:	8b7b      	ldrh	r3, [r7, #26]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	b29b      	uxth	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d107      	bne.n	800133c <arm_sqrt_q15+0x48>
    {
      number = number << signBits1;
 800132c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001330:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	83fb      	strh	r3, [r7, #30]
 800133a:	e007      	b.n	800134c <arm_sqrt_q15+0x58>
    }
    else
    {
      number = number << (signBits1 - 1);
 800133c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001340:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001344:	3b01      	subs	r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	83fb      	strh	r3, [r7, #30]
    }

    /* Calculate half value of the number */
    half = number >> 1;
 800134c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001350:	105b      	asrs	r3, r3, #1
 8001352:	833b      	strh	r3, [r7, #24]
    /* Store the number for later use */
    temp1 = number;
 8001354:	8bfb      	ldrh	r3, [r7, #30]
 8001356:	82fb      	strh	r3, [r7, #22]

    /* Convert to float */
    temp_float1 = number * 3.051757812500000e-005f;
 8001358:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001364:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80014a4 <arm_sqrt_q15+0x1b0>
 8001368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136c:	edc7 7a04 	vstr	s15, [r7, #16]
    /*Store as integer */
    tempconv.floatval = temp_float1;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	60bb      	str	r3, [r7, #8]
    bits_val1 = tempconv.fracval;
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60fb      	str	r3, [r7, #12]
    /* Subtract the shifted value from the magic number to give intial guess */
    bits_val1 = 0x5f3759df - (bits_val1 >> 1);  /* gives initial guess */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	105a      	asrs	r2, r3, #1
 800137c:	4b4a      	ldr	r3, [pc, #296]	; (80014a8 <arm_sqrt_q15+0x1b4>)
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
    /* Store as float */
    tempconv.fracval = bits_val1;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	60bb      	str	r3, [r7, #8]
    temp_float1 = tempconv.floatval;
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	613b      	str	r3, [r7, #16]
    /* Convert to integer format */
    var1 = (q31_t) (temp_float1 * 16384);
 800138a:	edd7 7a04 	vldr	s15, [r7, #16]
 800138e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80014ac <arm_sqrt_q15+0x1b8>
 8001392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800139a:	ee17 3a90 	vmov	r3, s15
 800139e:	83bb      	strh	r3, [r7, #28]

    /* 1st iteration */
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 80013a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
                                     ((q15_t)
                                      ((((q15_t)
                                         (((q31_t) var1 * var1) >> 15)) *
 80013a4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80013a8:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80013ac:	fb01 f202 	mul.w	r2, r1, r2
 80013b0:	13d2      	asrs	r2, r2, #15
                                      ((((q15_t)
 80013b2:	b212      	sxth	r2, r2
 80013b4:	4611      	mov	r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 80013b6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
                                         (((q31_t) var1 * var1) >> 15)) *
 80013ba:	fb01 f202 	mul.w	r2, r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 80013be:	13d2      	asrs	r2, r2, #15
                                     ((q15_t)
 80013c0:	b212      	sxth	r2, r2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 80013c2:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
 80013c6:	fb02 f303 	mul.w	r3, r2, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 80013ca:	13db      	asrs	r3, r3, #15
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 80013cc:	b21b      	sxth	r3, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 80013ce:	009b      	lsls	r3, r3, #2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 80013d0:	83bb      	strh	r3, [r7, #28]
    /* 2nd iteration */
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 80013d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
                                     ((q15_t)
                                      ((((q15_t)
                                         (((q31_t) var1 * var1) >> 15)) *
 80013d6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80013da:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 80013de:	fb01 f202 	mul.w	r2, r1, r2
 80013e2:	13d2      	asrs	r2, r2, #15
                                      ((((q15_t)
 80013e4:	b212      	sxth	r2, r2
 80013e6:	4611      	mov	r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 80013e8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
                                         (((q31_t) var1 * var1) >> 15)) *
 80013ec:	fb01 f202 	mul.w	r2, r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 80013f0:	13d2      	asrs	r2, r2, #15
                                     ((q15_t)
 80013f2:	b212      	sxth	r2, r2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 80013f4:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 80013fc:	13db      	asrs	r3, r3, #15
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 80013fe:	b21b      	sxth	r3, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001400:	009b      	lsls	r3, r3, #2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001402:	83bb      	strh	r3, [r7, #28]
    /* 3rd iteration */
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001404:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
                                     ((q15_t)
                                      ((((q15_t)
                                         (((q31_t) var1 * var1) >> 15)) *
 8001408:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800140c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001410:	fb01 f202 	mul.w	r2, r1, r2
 8001414:	13d2      	asrs	r2, r2, #15
                                      ((((q15_t)
 8001416:	b212      	sxth	r2, r2
 8001418:	4611      	mov	r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 800141a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
                                         (((q31_t) var1 * var1) >> 15)) *
 800141e:	fb01 f202 	mul.w	r2, r1, r2
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001422:	13d2      	asrs	r2, r2, #15
                                     ((q15_t)
 8001424:	b212      	sxth	r2, r2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001426:	f5c2 5240 	rsb	r2, r2, #12288	; 0x3000
 800142a:	fb02 f303 	mul.w	r3, r2, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 800142e:	13db      	asrs	r3, r3, #15
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001430:	b21b      	sxth	r3, r3
                                        (q31_t) half) >> 15))) >> 15)) << 2;
 8001432:	009b      	lsls	r3, r3, #2
    var1 = ((q15_t) ((q31_t) var1 * (0x3000 -
 8001434:	83bb      	strh	r3, [r7, #28]

    /* Multiply the inverse square root with the original value */
    var1 = ((q15_t) (((q31_t) temp1 * var1) >> 15)) << 1;
 8001436:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800143a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	13db      	asrs	r3, r3, #15
 8001444:	b21b      	sxth	r3, r3
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	83bb      	strh	r3, [r7, #28]

    /* Shift the output down accordingly */
    if ((signBits1 % 2) == 0)
 800144a:	8b7b      	ldrh	r3, [r7, #26]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	b29b      	uxth	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10b      	bne.n	800146e <arm_sqrt_q15+0x17a>
    {
      var1 = var1 >> (signBits1 / 2);
 8001456:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800145a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800145e:	0fd9      	lsrs	r1, r3, #31
 8001460:	440b      	add	r3, r1
 8001462:	105b      	asrs	r3, r3, #1
 8001464:	b21b      	sxth	r3, r3
 8001466:	fa42 f303 	asr.w	r3, r2, r3
 800146a:	83bb      	strh	r3, [r7, #28]
 800146c:	e00a      	b.n	8001484 <arm_sqrt_q15+0x190>
    }
    else
    {
      var1 = var1 >> ((signBits1 - 1) / 2);
 800146e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001472:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001476:	3b01      	subs	r3, #1
 8001478:	0fd9      	lsrs	r1, r3, #31
 800147a:	440b      	add	r3, r1
 800147c:	105b      	asrs	r3, r3, #1
 800147e:	fa42 f303 	asr.w	r3, r2, r3
 8001482:	83bb      	strh	r3, [r7, #28]
    }
    *pOut = var1;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	8bba      	ldrh	r2, [r7, #28]
 8001488:	801a      	strh	r2, [r3, #0]

    return (ARM_MATH_SUCCESS);
 800148a:	2300      	movs	r3, #0
 800148c:	e004      	b.n	8001498 <arm_sqrt_q15+0x1a4>
  }
  /* If the number is a negative number then store zero as its square root value */
  else
  {
    *pOut = 0;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	2200      	movs	r2, #0
 8001492:	801a      	strh	r2, [r3, #0]
    return (ARM_MATH_ARGUMENT_ERROR);
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001498:	4618      	mov	r0, r3
 800149a:	3724      	adds	r7, #36	; 0x24
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	38000000 	.word	0x38000000
 80014a8:	5f3759df 	.word	0x5f3759df
 80014ac:	46800000 	.word	0x46800000

080014b0 <arm_max_q15>:
void arm_max_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b08b      	sub	sp, #44	; 0x2c
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]

  q15_t maxVal1, maxVal2, out;                   /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 80014be:	2300      	movs	r3, #0
 80014c0:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1c9a      	adds	r2, r3, #2
 80014ca:	60fa      	str	r2, [r7, #12]
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	089b      	lsrs	r3, r3, #2
 80014d6:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 80014d8:	e045      	b.n	8001566 <arm_max_q15+0xb6>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1c9a      	adds	r2, r3, #2
 80014de:	60fa      	str	r2, [r7, #12]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	82fb      	strh	r3, [r7, #22]
    maxVal2 = *pSrc++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1c9a      	adds	r2, r3, #2
 80014e8:	60fa      	str	r2, [r7, #12]
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	82bb      	strh	r3, [r7, #20]

    /* compare for the maximum value */
    if (out < maxVal1)
 80014ee:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80014f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	da04      	bge.n	8001504 <arm_max_q15+0x54>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80014fa:	8afb      	ldrh	r3, [r7, #22]
 80014fc:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 1U;
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	3301      	adds	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 8001504:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001508:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	da04      	bge.n	800151a <arm_max_q15+0x6a>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001510:	8abb      	ldrh	r3, [r7, #20]
 8001512:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 2U;
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	3302      	adds	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1c9a      	adds	r2, r3, #2
 800151e:	60fa      	str	r2, [r7, #12]
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	82fb      	strh	r3, [r7, #22]
    maxVal2 = *pSrc++;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1c9a      	adds	r2, r3, #2
 8001528:	60fa      	str	r2, [r7, #12]
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	82bb      	strh	r3, [r7, #20]

    /* compare for the maximum value */
    if (out < maxVal1)
 800152e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001532:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001536:	429a      	cmp	r2, r3
 8001538:	da04      	bge.n	8001544 <arm_max_q15+0x94>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800153a:	8afb      	ldrh	r3, [r7, #22]
 800153c:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 3U;
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	3303      	adds	r3, #3
 8001542:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 8001544:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001548:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	da04      	bge.n	800155a <arm_max_q15+0xaa>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001550:	8abb      	ldrh	r3, [r7, #20]
 8001552:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 4U;
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	3304      	adds	r3, #4
 8001558:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	3304      	adds	r3, #4
 800155e:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	3b01      	subs	r3, #1
 8001564:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1b6      	bne.n	80014da <arm_max_q15+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	3b01      	subs	r3, #1
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8001576:	e013      	b.n	80015a0 <arm_max_q15+0xf0>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1c9a      	adds	r2, r3, #2
 800157c:	60fa      	str	r2, [r7, #12]
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	82fb      	strh	r3, [r7, #22]

    /* compare for the maximum value */
    if (out < maxVal1)
 8001582:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001586:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800158a:	429a      	cmp	r2, r3
 800158c:	da05      	bge.n	800159a <arm_max_q15+0xea>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 800158e:	8afb      	ldrh	r3, [r7, #22]
 8001590:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = blockSize - blkCnt;
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	3b01      	subs	r3, #1
 800159e:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1e8      	bne.n	8001578 <arm_max_q15+0xc8>
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015aa:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	372c      	adds	r7, #44	; 0x2c
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <arm_min_q15>:
void arm_min_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex)
{
 80015be:	b480      	push	{r7}
 80015c0:	b08b      	sub	sp, #44	; 0x2c
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	603b      	str	r3, [r7, #0]

  q15_t minVal1, minVal2, out;                   /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1c9a      	adds	r2, r3, #2
 80015d8:	60fa      	str	r2, [r7, #12]
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	623b      	str	r3, [r7, #32]

  while (blkCnt > 0U)
 80015e6:	e045      	b.n	8001674 <arm_min_q15+0xb6>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1c9a      	adds	r2, r3, #2
 80015ec:	60fa      	str	r2, [r7, #12]
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	82fb      	strh	r3, [r7, #22]
    minVal2 = *pSrc++;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1c9a      	adds	r2, r3, #2
 80015f6:	60fa      	str	r2, [r7, #12]
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	82bb      	strh	r3, [r7, #20]

    /* compare for the minimum value */
    if (out > minVal1)
 80015fc:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001600:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001604:	429a      	cmp	r2, r3
 8001606:	dd04      	ble.n	8001612 <arm_min_q15+0x54>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001608:	8afb      	ldrh	r3, [r7, #22]
 800160a:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 1U;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	3301      	adds	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if (out > minVal2)
 8001612:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001616:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800161a:	429a      	cmp	r2, r3
 800161c:	dd04      	ble.n	8001628 <arm_min_q15+0x6a>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 800161e:	8abb      	ldrh	r3, [r7, #20]
 8001620:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 2U;
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	3302      	adds	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
    }

    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1c9a      	adds	r2, r3, #2
 800162c:	60fa      	str	r2, [r7, #12]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	82fb      	strh	r3, [r7, #22]
    minVal2 = *pSrc++;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1c9a      	adds	r2, r3, #2
 8001636:	60fa      	str	r2, [r7, #12]
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	82bb      	strh	r3, [r7, #20]

    /* compare for the minimum value */
    if (out > minVal1)
 800163c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001640:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001644:	429a      	cmp	r2, r3
 8001646:	dd04      	ble.n	8001652 <arm_min_q15+0x94>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001648:	8afb      	ldrh	r3, [r7, #22]
 800164a:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 3U;
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	3303      	adds	r3, #3
 8001650:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if (out > minVal2)
 8001652:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001656:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800165a:	429a      	cmp	r2, r3
 800165c:	dd04      	ble.n	8001668 <arm_min_q15+0xaa>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 800165e:	8abb      	ldrh	r3, [r7, #20]
 8001660:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = count + 4U;
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	3304      	adds	r3, #4
 8001666:	61fb      	str	r3, [r7, #28]
    }

    count += 4U;
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	3304      	adds	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	3b01      	subs	r3, #1
 8001672:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1b6      	bne.n	80015e8 <arm_min_q15+0x2a>
  }

  /* if (blockSize - 1U) is not multiple of 4 */
  blkCnt = (blockSize - 1U) % 4U;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3b01      	subs	r3, #1
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8001684:	e013      	b.n	80016ae <arm_min_q15+0xf0>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1c9a      	adds	r2, r3, #2
 800168a:	60fa      	str	r2, [r7, #12]
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	82fb      	strh	r3, [r7, #22]

    /* compare for the minimum value */
    if (out > minVal1)
 8001690:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001694:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001698:	429a      	cmp	r2, r3
 800169a:	dd05      	ble.n	80016a8 <arm_min_q15+0xea>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 800169c:	8afb      	ldrh	r3, [r7, #22]
 800169e:	84fb      	strh	r3, [r7, #38]	; 0x26
      outIndex = blockSize - blkCnt;
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	61fb      	str	r3, [r7, #28]
    }

    /* Decrement the loop counter */
    blkCnt--;
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  while (blkCnt > 0U)
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e8      	bne.n	8001686 <arm_min_q15+0xc8>
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016b8:	801a      	strh	r2, [r3, #0]
  *pIndex = outIndex;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	372c      	adds	r7, #44	; 0x2c
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <arm_rms_q15>:

void arm_rms_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult)
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b09e      	sub	sp, #120	; 0x78
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  q63_t sum = 0;                                 /* accumulator */
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  q31_t in;                                      /* temporary variable to store the input value */
  q15_t in1;                                     /* temporary variable to store the input value */
  uint32_t blkCnt;                               /* loop counter */

  /* loop Unrolling */
  blkCnt = blockSize >> 2U;
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80016ea:	e040      	b.n	800176e <arm_rms_q15+0xa2>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute sum of the squares and then store the results in a temporary variable, sum */
    in = *__SIMD32(pSrc)++;
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	1d19      	adds	r1, r3, #4
 80016f4:	6011      	str	r1, [r2, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    sum = __SMLALD(in, in, sum);
 80016fa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80016fc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80016fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001702:	6478      	str	r0, [r7, #68]	; 0x44
 8001704:	6439      	str	r1, [r7, #64]	; 0x40
 8001706:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
{
  union llreg_u{
    uint32_t w32[2];
    uint64_t w64;
  } llr;
  llr.w64 = acc;
 800170a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800170e:	e9c7 2306 	strd	r2, r3, [r7, #24]

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001718:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800171a:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800171e:	61ba      	str	r2, [r7, #24]
 8001720:	61fb      	str	r3, [r7, #28]
#else               /* Big endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[1]), "=r" (llr.w32[0]): "r" (op1), "r" (op2) , "0" (llr.w32[1]), "1" (llr.w32[0]) );
#endif

  return(llr.w64);
 8001722:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001726:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    in = *__SIMD32(pSrc)++;
 800172a:	f107 020c 	add.w	r2, r7, #12
 800172e:	6813      	ldr	r3, [r2, #0]
 8001730:	1d19      	adds	r1, r3, #4
 8001732:	6011      	str	r1, [r2, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	65fb      	str	r3, [r7, #92]	; 0x5c
    sum = __SMLALD(in, in, sum);
 8001738:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800173a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800173c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001740:	65b8      	str	r0, [r7, #88]	; 0x58
 8001742:	6579      	str	r1, [r7, #84]	; 0x54
 8001744:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  llr.w64 = acc;
 8001748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800174c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001756:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001758:	fbc1 23c0 	smlald	r2, r3, r1, r0
 800175c:	613a      	str	r2, [r7, #16]
 800175e:	617b      	str	r3, [r7, #20]
  return(llr.w64);
 8001760:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001764:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    /* Decrement the loop counter */
    blkCnt--;
 8001768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800176a:	3b01      	subs	r3, #1
 800176c:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (blkCnt > 0U)
 800176e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1bb      	bne.n	80016ec <arm_rms_q15+0x20>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	66fb      	str	r3, [r7, #108]	; 0x6c

  while (blkCnt > 0U)
 800177c:	e022      	b.n	80017c4 <arm_rms_q15+0xf8>
  {
    /* C = (A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1]) */
    /* Compute sum of the squares and then store the results in a temporary variable, sum */
    in1 = *pSrc++;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1c9a      	adds	r2, r3, #2
 8001782:	60fa      	str	r2, [r7, #12]
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
    sum = __SMLALD(in1, in1, sum);
 800178a:	f9b7 0062 	ldrsh.w	r0, [r7, #98]	; 0x62
 800178e:	f9b7 1062 	ldrsh.w	r1, [r7, #98]	; 0x62
 8001792:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001796:	6378      	str	r0, [r7, #52]	; 0x34
 8001798:	6339      	str	r1, [r7, #48]	; 0x30
 800179a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  llr.w64 = acc;
 800179e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80017a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80017a6:	6a3a      	ldr	r2, [r7, #32]
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017ae:	fbc1 23c0 	smlald	r2, r3, r1, r0
 80017b2:	623a      	str	r2, [r7, #32]
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(llr.w64);
 80017b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    /* Decrement the loop counter */
    blkCnt--;
 80017be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c0:	3b01      	subs	r3, #1
 80017c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (blkCnt > 0U)
 80017c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1d9      	bne.n	800177e <arm_rms_q15+0xb2>
  }

  /* Truncating and saturating the accumulator to 1.15 format */
  /* Store the result in the destination */
  arm_sqrt_q15(__SSAT((sum / (q63_t)blockSize) >> 15, 16), pResult);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2200      	movs	r2, #0
 80017ce:	461c      	mov	r4, r3
 80017d0:	4615      	mov	r5, r2
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
 80017d6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017da:	f7fe fd07 	bl	80001ec <__aeabi_ldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	0bc2      	lsrs	r2, r0, #15
 80017f0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 80017f4:	13cb      	asrs	r3, r1, #15
 80017f6:	4613      	mov	r3, r2
 80017f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80017fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017fc:	f303 030f 	ssat	r3, #16, r3
 8001800:	667b      	str	r3, [r7, #100]	; 0x64
 8001802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001804:	b21b      	sxth	r3, r3
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fd73 	bl	80012f4 <arm_sqrt_q15>
  /* Store the result in the destination */
  arm_sqrt_q15(__SSAT((sum / (q63_t)blockSize) >> 15, 16), pResult);

#endif /* #if defined (ARM_MATH_DSP) */

}
 800180e:	bf00      	nop
 8001810:	3778      	adds	r7, #120	; 0x78
 8001812:	46bd      	mov	sp, r7
 8001814:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_Init+0x40>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_Init+0x40>)
 8001822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001826:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_Init+0x40>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <HAL_Init+0x40>)
 800182e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001832:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x40>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x40>)
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 fd41 	bl	80022c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fac0 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023c00 	.word	0x40023c00

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 fd4b 	bl	8002316 <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f000 fd21 	bl	80022de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000028 	.word	0x20000028
 80018b4:	20000030 	.word	0x20000030
 80018b8:	2000002c 	.word	0x2000002c

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000030 	.word	0x20000030
 80018e0:	20000644 	.word	0x20000644

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000644 	.word	0x20000644

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001922:	bf00      	nop
 8001924:	f7ff ffde 	bl	80018e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000030 	.word	0x20000030

08001944 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e033      	b.n	80019c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7fe fe58 	bl	8000618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800198a:	f023 0302 	bic.w	r3, r3, #2
 800198e:	f043 0202 	orr.w	r2, r3, #2
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 fae8 	bl	8001f6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f023 0303 	bic.w	r3, r3, #3
 80019aa:	f043 0201 	orr.w	r2, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
 80019b2:	e001      	b.n	80019b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Start+0x1a>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e0b2      	b.n	8001b4c <HAL_ADC_Start+0x180>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d018      	beq.n	8001a2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0c:	4b52      	ldr	r3, [pc, #328]	; (8001b58 <HAL_ADC_Start+0x18c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_ADC_Start+0x190>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9a      	lsrs	r2, r3, #18
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d17a      	bne.n	8001b32 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7a:	d106      	bne.n	8001a8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f023 0206 	bic.w	r2, r3, #6
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	645a      	str	r2, [r3, #68]	; 0x44
 8001a88:	e002      	b.n	8001a90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a98:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <HAL_ADC_Start+0x194>)
 8001a9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aa4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d12a      	bne.n	8001b08 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a2b      	ldr	r2, [pc, #172]	; (8001b64 <HAL_ADC_Start+0x198>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d015      	beq.n	8001ae8 <HAL_ADC_Start+0x11c>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a29      	ldr	r2, [pc, #164]	; (8001b68 <HAL_ADC_Start+0x19c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d105      	bne.n	8001ad2 <HAL_ADC_Start+0x106>
 8001ac6:	4b26      	ldr	r3, [pc, #152]	; (8001b60 <HAL_ADC_Start+0x194>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00a      	beq.n	8001ae8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a25      	ldr	r2, [pc, #148]	; (8001b6c <HAL_ADC_Start+0x1a0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d136      	bne.n	8001b4a <HAL_ADC_Start+0x17e>
 8001adc:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_ADC_Start+0x194>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d130      	bne.n	8001b4a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d129      	bne.n	8001b4a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	e020      	b.n	8001b4a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <HAL_ADC_Start+0x198>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d11b      	bne.n	8001b4a <HAL_ADC_Start+0x17e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d114      	bne.n	8001b4a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e00b      	b.n	8001b4a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f043 0210 	orr.w	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	20000028 	.word	0x20000028
 8001b5c:	431bde83 	.word	0x431bde83
 8001b60:	40012300 	.word	0x40012300
 8001b64:	40012000 	.word	0x40012000
 8001b68:	40012100 	.word	0x40012100
 8001b6c:	40012200 	.word	0x40012200

08001b70 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Stop+0x16>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e021      	b.n	8001bca <HAL_ADC_Stop+0x5a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bb4:	f023 0301 	bic.w	r3, r3, #1
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf2:	d113      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f043 0220 	orr.w	r2, r3, #32
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e063      	b.n	8001ce4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c1c:	f7ff fe62 	bl	80018e4 <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c22:	e021      	b.n	8001c68 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2a:	d01d      	beq.n	8001c68 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d007      	beq.n	8001c42 <HAL_ADC_PollForConversion+0x6c>
 8001c32:	f7ff fe57 	bl	80018e4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d212      	bcs.n	8001c68 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d00b      	beq.n	8001c68 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	f043 0204 	orr.w	r2, r3, #4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e03d      	b.n	8001ce4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d1d6      	bne.n	8001c24 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0212 	mvn.w	r2, #18
 8001c7e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d123      	bne.n	8001ce2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d11f      	bne.n	8001ce2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d111      	bne.n	8001ce2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d105      	bne.n	8001ce2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f043 0201 	orr.w	r2, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x1c>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e113      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x244>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	d925      	bls.n	8001d80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68d9      	ldr	r1, [r3, #12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	3b1e      	subs	r3, #30
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43da      	mvns	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	400a      	ands	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68d9      	ldr	r1, [r3, #12]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4403      	add	r3, r0
 8001d72:	3b1e      	subs	r3, #30
 8001d74:	409a      	lsls	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	e022      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6919      	ldr	r1, [r3, #16]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	2207      	movs	r2, #7
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	400a      	ands	r2, r1
 8001da2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6919      	ldr	r1, [r3, #16]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4403      	add	r3, r0
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b06      	cmp	r3, #6
 8001dcc:	d824      	bhi.n	8001e18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b05      	subs	r3, #5
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	400a      	ands	r2, r1
 8001dee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b05      	subs	r3, #5
 8001e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
 8001e16:	e04c      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	2b0c      	cmp	r3, #12
 8001e1e:	d824      	bhi.n	8001e6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b23      	subs	r3, #35	; 0x23
 8001e32:	221f      	movs	r2, #31
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43da      	mvns	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	400a      	ands	r2, r1
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b23      	subs	r3, #35	; 0x23
 8001e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
 8001e68:	e023      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	3b41      	subs	r3, #65	; 0x41
 8001e7c:	221f      	movs	r2, #31
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	400a      	ands	r2, r1
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b41      	subs	r3, #65	; 0x41
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_ADC_ConfigChannel+0x250>)
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a28      	ldr	r2, [pc, #160]	; (8001f5c <HAL_ADC_ConfigChannel+0x254>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d10f      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1d8>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b12      	cmp	r3, #18
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_ADC_ConfigChannel+0x254>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d12b      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x23a>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <HAL_ADC_ConfigChannel+0x258>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d003      	beq.n	8001efc <HAL_ADC_ConfigChannel+0x1f4>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b11      	cmp	r3, #17
 8001efa:	d122      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <HAL_ADC_ConfigChannel+0x258>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d111      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_ADC_ConfigChannel+0x25c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_ADC_ConfigChannel+0x260>)
 8001f24:	fba2 2303 	umull	r2, r3, r2, r3
 8001f28:	0c9a      	lsrs	r2, r3, #18
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f34:	e002      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f9      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40012300 	.word	0x40012300
 8001f5c:	40012000 	.word	0x40012000
 8001f60:	10000012 	.word	0x10000012
 8001f64:	20000028 	.word	0x20000028
 8001f68:	431bde83 	.word	0x431bde83

08001f6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f74:	4b79      	ldr	r3, [pc, #484]	; (800215c <ADC_Init+0x1f0>)
 8001f76:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6859      	ldr	r1, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	021a      	lsls	r2, r3, #8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6899      	ldr	r1, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffe:	4a58      	ldr	r2, [pc, #352]	; (8002160 <ADC_Init+0x1f4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d022      	beq.n	800204a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002012:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6899      	ldr	r1, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6899      	ldr	r1, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	e00f      	b.n	800206a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002058:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002068:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0202 	bic.w	r2, r2, #2
 8002078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6899      	ldr	r1, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7e1b      	ldrb	r3, [r3, #24]
 8002084:	005a      	lsls	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01b      	beq.n	80020d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6859      	ldr	r1, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	3b01      	subs	r3, #1
 80020c4:	035a      	lsls	r2, r3, #13
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	e007      	b.n	80020e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	051a      	lsls	r2, r3, #20
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002114:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6899      	ldr	r1, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002122:	025a      	lsls	r2, r3, #9
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6899      	ldr	r1, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	029a      	lsls	r2, r3, #10
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	609a      	str	r2, [r3, #8]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40012300 	.word	0x40012300
 8002160:	0f000001 	.word	0x0f000001

08002164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002180:	4013      	ands	r3, r2
 8002182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800218c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002196:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	60d3      	str	r3, [r2, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <__NVIC_GetPriorityGrouping+0x18>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0307 	and.w	r3, r3, #7
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	6039      	str	r1, [r7, #0]
 80021d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	db0a      	blt.n	80021f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	490c      	ldr	r1, [pc, #48]	; (8002214 <__NVIC_SetPriority+0x4c>)
 80021e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e6:	0112      	lsls	r2, r2, #4
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	440b      	add	r3, r1
 80021ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f0:	e00a      	b.n	8002208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4908      	ldr	r1, [pc, #32]	; (8002218 <__NVIC_SetPriority+0x50>)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	3b04      	subs	r3, #4
 8002200:	0112      	lsls	r2, r2, #4
 8002202:	b2d2      	uxtb	r2, r2
 8002204:	440b      	add	r3, r1
 8002206:	761a      	strb	r2, [r3, #24]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f1c3 0307 	rsb	r3, r3, #7
 8002236:	2b04      	cmp	r3, #4
 8002238:	bf28      	it	cs
 800223a:	2304      	movcs	r3, #4
 800223c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3304      	adds	r3, #4
 8002242:	2b06      	cmp	r3, #6
 8002244:	d902      	bls.n	800224c <NVIC_EncodePriority+0x30>
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3b03      	subs	r3, #3
 800224a:	e000      	b.n	800224e <NVIC_EncodePriority+0x32>
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002250:	f04f 32ff 	mov.w	r2, #4294967295
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43da      	mvns	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	401a      	ands	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43d9      	mvns	r1, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	4313      	orrs	r3, r2
         );
}
 8002276:	4618      	mov	r0, r3
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002294:	d301      	bcc.n	800229a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002296:	2301      	movs	r3, #1
 8002298:	e00f      	b.n	80022ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229a:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <SysTick_Config+0x40>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a2:	210f      	movs	r1, #15
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	f7ff ff8e 	bl	80021c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <SysTick_Config+0x40>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <SysTick_Config+0x40>)
 80022b4:	2207      	movs	r2, #7
 80022b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	e000e010 	.word	0xe000e010

080022c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ff47 	bl	8002164 <__NVIC_SetPriorityGrouping>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff5c 	bl	80021ac <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff8e 	bl	800221c <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5d 	bl	80021c8 <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffb0 	bl	8002284 <SysTick_Config>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e014      	b.n	800236a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	791b      	ldrb	r3, [r3, #4]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7fe f9d9 	bl	8000708 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2202      	movs	r2, #2
 800235a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	795b      	ldrb	r3, [r3, #5]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_DAC_Start+0x16>
 8002384:	2302      	movs	r3, #2
 8002386:	e040      	b.n	800240a <HAL_DAC_Start+0x98>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6819      	ldr	r1, [r3, #0]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2201      	movs	r2, #1
 80023a2:	409a      	lsls	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80023bc:	2b3c      	cmp	r3, #60	; 0x3c
 80023be:	d11d      	bne.n	80023fc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	e014      	b.n	80023fc <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	213c      	movs	r1, #60	; 0x3c
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0202 	orr.w	r2, r2, #2
 80023fa:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002416:	b480      	push	{r7}
 8002418:	b087      	sub	sp, #28
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	3308      	adds	r3, #8
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	e004      	b.n	800244a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	3314      	adds	r3, #20
 8002448:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	461a      	mov	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	795b      	ldrb	r3, [r3, #5]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_DAC_ConfigChannel+0x18>
 8002474:	2302      	movs	r3, #2
 8002476:	e03c      	b.n	80024f2 <HAL_DAC_ConfigChannel+0x92>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2202      	movs	r2, #2
 8002482:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	4013      	ands	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6819      	ldr	r1, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	22c0      	movs	r2, #192	; 0xc0
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	400a      	ands	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	e177      	b.n	800280c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	f040 8166 	bne.w	8002806 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d005      	beq.n	8002552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254e:	2b02      	cmp	r3, #2
 8002550:	d130      	bne.n	80025b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 0201 	and.w	r2, r3, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d017      	beq.n	80025f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d123      	bne.n	8002644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	08da      	lsrs	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3208      	adds	r2, #8
 8002604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80c0 	beq.w	8002806 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b66      	ldr	r3, [pc, #408]	; (8002824 <HAL_GPIO_Init+0x324>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a65      	ldr	r2, [pc, #404]	; (8002824 <HAL_GPIO_Init+0x324>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_GPIO_Init+0x324>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026a2:	4a61      	ldr	r2, [pc, #388]	; (8002828 <HAL_GPIO_Init+0x328>)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	220f      	movs	r2, #15
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_GPIO_Init+0x32c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d037      	beq.n	800273e <HAL_GPIO_Init+0x23e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a57      	ldr	r2, [pc, #348]	; (8002830 <HAL_GPIO_Init+0x330>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d031      	beq.n	800273a <HAL_GPIO_Init+0x23a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a56      	ldr	r2, [pc, #344]	; (8002834 <HAL_GPIO_Init+0x334>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02b      	beq.n	8002736 <HAL_GPIO_Init+0x236>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a55      	ldr	r2, [pc, #340]	; (8002838 <HAL_GPIO_Init+0x338>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x232>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a54      	ldr	r2, [pc, #336]	; (800283c <HAL_GPIO_Init+0x33c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x22e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a53      	ldr	r2, [pc, #332]	; (8002840 <HAL_GPIO_Init+0x340>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x22a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_GPIO_Init+0x344>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x226>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a51      	ldr	r2, [pc, #324]	; (8002848 <HAL_GPIO_Init+0x348>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x222>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a50      	ldr	r2, [pc, #320]	; (800284c <HAL_GPIO_Init+0x34c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x21e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4f      	ldr	r2, [pc, #316]	; (8002850 <HAL_GPIO_Init+0x350>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x21a>
 8002716:	2309      	movs	r3, #9
 8002718:	e012      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800271a:	230a      	movs	r3, #10
 800271c:	e010      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800271e:	2308      	movs	r3, #8
 8002720:	e00e      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002722:	2307      	movs	r3, #7
 8002724:	e00c      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002726:	2306      	movs	r3, #6
 8002728:	e00a      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800272a:	2305      	movs	r3, #5
 800272c:	e008      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800272e:	2304      	movs	r3, #4
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002732:	2303      	movs	r3, #3
 8002734:	e004      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002736:	2302      	movs	r3, #2
 8002738:	e002      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800273e:	2300      	movs	r3, #0
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f002 0203 	and.w	r2, r2, #3
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	4093      	lsls	r3, r2
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002750:	4935      	ldr	r1, [pc, #212]	; (8002828 <HAL_GPIO_Init+0x328>)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_GPIO_Init+0x354>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002782:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_GPIO_Init+0x354>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_GPIO_Init+0x354>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ac:	4a29      	ldr	r2, [pc, #164]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027b2:	4b28      	ldr	r3, [pc, #160]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_GPIO_Init+0x354>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	f67f ae84 	bls.w	800251c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40013800 	.word	0x40013800
 800282c:	40020000 	.word	0x40020000
 8002830:	40020400 	.word	0x40020400
 8002834:	40020800 	.word	0x40020800
 8002838:	40020c00 	.word	0x40020c00
 800283c:	40021000 	.word	0x40021000
 8002840:	40021400 	.word	0x40021400
 8002844:	40021800 	.word	0x40021800
 8002848:	40021c00 	.word	0x40021c00
 800284c:	40022000 	.word	0x40022000
 8002850:	40022400 	.word	0x40022400
 8002854:	40013c00 	.word	0x40013c00

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	460b      	mov	r3, r1
 8002894:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800289c:	887a      	ldrh	r2, [r7, #2]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	041a      	lsls	r2, r3, #16
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	887b      	ldrh	r3, [r7, #2]
 80028aa:	400b      	ands	r3, r1
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	619a      	str	r2, [r3, #24]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c0:	b08f      	sub	sp, #60	; 0x3c
 80028c2:	af0a      	add	r7, sp, #40	; 0x28
 80028c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e10f      	b.n	8002af0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe fbf2 	bl	80010d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2203      	movs	r2, #3
 80028f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d102      	bne.n	800290a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f001 f9ad 	bl	8003c6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	603b      	str	r3, [r7, #0]
 800291a:	687e      	ldr	r6, [r7, #4]
 800291c:	466d      	mov	r5, sp
 800291e:	f106 0410 	add.w	r4, r6, #16
 8002922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800292a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800292e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002932:	1d33      	adds	r3, r6, #4
 8002934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002936:	6838      	ldr	r0, [r7, #0]
 8002938:	f001 f938 	bl	8003bac <USB_CoreInit>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0d0      	b.n	8002af0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f001 f99b 	bl	8003c90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
 800295e:	e04a      	b.n	80029f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	333d      	adds	r3, #61	; 0x3d
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	333c      	adds	r3, #60	; 0x3c
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	b298      	uxth	r0, r3
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3344      	adds	r3, #68	; 0x44
 800299c:	4602      	mov	r2, r0
 800299e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3340      	adds	r3, #64	; 0x40
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3348      	adds	r3, #72	; 0x48
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029c8:	7bfa      	ldrb	r2, [r7, #15]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334c      	adds	r3, #76	; 0x4c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3354      	adds	r3, #84	; 0x54
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	3301      	adds	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d3af      	bcc.n	8002960 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e044      	b.n	8002a90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a2e:	7bfa      	ldrb	r2, [r7, #15]
 8002a30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d3b5      	bcc.n	8002a06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	687e      	ldr	r6, [r7, #4]
 8002aa2:	466d      	mov	r5, sp
 8002aa4:	f106 0410 	add.w	r4, r6, #16
 8002aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ab4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ab8:	1d33      	adds	r3, r6, #4
 8002aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002abc:	6838      	ldr	r0, [r7, #0]
 8002abe:	f001 f933 	bl	8003d28 <USB_DevInit>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e00d      	b.n	8002af0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 fafe 	bl	80040ea <USB_DevDisconnect>

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e267      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d075      	beq.n	8002c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d00c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b22:	4b85      	ldr	r3, [pc, #532]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d112      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2e:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05b      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d157      	bne.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e242      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x74>
 8002b5e:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a75      	ldr	r2, [pc, #468]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e01d      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x98>
 8002b76:	4b70      	ldr	r3, [pc, #448]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6f      	ldr	r2, [pc, #444]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6d      	ldr	r3, [pc, #436]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6c      	ldr	r2, [pc, #432]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b90:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a68      	ldr	r2, [pc, #416]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a65      	ldr	r2, [pc, #404]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe fe98 	bl	80018e4 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe fe94 	bl	80018e4 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e207      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fe84 	bl	80018e4 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe fe80 	bl	80018e4 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1f3      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	4b51      	ldr	r3, [pc, #324]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d063      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1a:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d11c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	4b44      	ldr	r3, [pc, #272]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d116      	bne.n	8002c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1c7      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4937      	ldr	r1, [pc, #220]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	e03a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c68:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fe39 	bl	80018e4 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c76:	f7fe fe35 	bl	80018e4 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1a8      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4925      	ldr	r1, [pc, #148]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCC_OscConfig+0x244>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fe18 	bl	80018e4 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fe14 	bl	80018e4 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e187      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d036      	beq.n	8002d50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fdf8 	bl	80018e4 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fdf4 	bl	80018e4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e167      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x200>
 8002d16:	e01b      	b.n	8002d50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_RCC_OscConfig+0x248>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fde1 	bl	80018e4 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	e00e      	b.n	8002d44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe fddd 	bl	80018e4 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d907      	bls.n	8002d44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e150      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	42470000 	.word	0x42470000
 8002d40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	4b88      	ldr	r3, [pc, #544]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ea      	bne.n	8002d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8097 	beq.w	8002e8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d62:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10f      	bne.n	8002d8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	4b7d      	ldr	r3, [pc, #500]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	4a7c      	ldr	r2, [pc, #496]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7e:	4b7a      	ldr	r3, [pc, #488]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d86:	60bb      	str	r3, [r7, #8]
 8002d88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b77      	ldr	r3, [pc, #476]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b74      	ldr	r3, [pc, #464]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a73      	ldr	r2, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fd9d 	bl	80018e4 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fe fd99 	bl	80018e4 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e10c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b6a      	ldr	r3, [pc, #424]	; (8002f6c <HAL_RCC_OscConfig+0x474>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d106      	bne.n	8002de2 <HAL_RCC_OscConfig+0x2ea>
 8002dd4:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	4a63      	ldr	r2, [pc, #396]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dda:	f043 0301 	orr.w	r3, r3, #1
 8002dde:	6713      	str	r3, [r2, #112]	; 0x70
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x30c>
 8002dea:	4b5f      	ldr	r3, [pc, #380]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dee:	4a5e      	ldr	r2, [pc, #376]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6713      	str	r3, [r2, #112]	; 0x70
 8002df6:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a5b      	ldr	r2, [pc, #364]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0x324>
 8002e04:	4b58      	ldr	r3, [pc, #352]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a57      	ldr	r2, [pc, #348]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	4a54      	ldr	r2, [pc, #336]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e16:	f023 0304 	bic.w	r3, r3, #4
 8002e1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d015      	beq.n	8002e50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fd5e 	bl	80018e4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fd5a 	bl	80018e4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0cb      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	4b49      	ldr	r3, [pc, #292]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0ee      	beq.n	8002e2c <HAL_RCC_OscConfig+0x334>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7fe fd48 	bl	80018e4 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7fe fd44 	bl	80018e4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e0b5      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6e:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ee      	bne.n	8002e58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4a38      	ldr	r2, [pc, #224]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a1 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e96:	4b34      	ldr	r3, [pc, #208]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d05c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d141      	bne.n	8002f2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fd18 	bl	80018e4 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fd14 	bl	80018e4 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e087      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b27      	ldr	r3, [pc, #156]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	019b      	lsls	r3, r3, #6
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	061b      	lsls	r3, r3, #24
 8002efa:	491b      	ldr	r1, [pc, #108]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fe fced 	bl	80018e4 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f0e:	f7fe fce9 	bl	80018e4 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e05c      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x416>
 8002f2c:	e054      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_OscConfig+0x478>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fcd6 	bl	80018e4 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe fcd2 	bl	80018e4 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e045      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_OscConfig+0x470>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x444>
 8002f5a:	e03d      	b.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e038      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCC_OscConfig+0x4ec>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d028      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d121      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d11a      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002faa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800

08002fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0cc      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b68      	ldr	r3, [pc, #416]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d90c      	bls.n	8003024 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b63      	ldr	r3, [pc, #396]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0b8      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800303c:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003046:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003054:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a52      	ldr	r2, [pc, #328]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800305e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	4313      	orrs	r3, r2
 8003070:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d044      	beq.n	8003108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b47      	ldr	r3, [pc, #284]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d119      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e07f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d003      	beq.n	80030a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d107      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a6:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e067      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f023 0203 	bic.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4934      	ldr	r1, [pc, #208]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d8:	f7fe fc04 	bl	80018e4 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030e0:	f7fe fc00 	bl	80018e4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e04f      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	4b2b      	ldr	r3, [pc, #172]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 020c 	and.w	r2, r3, #12
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	429a      	cmp	r2, r3
 8003106:	d1eb      	bne.n	80030e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 030f 	and.w	r3, r3, #15
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d20c      	bcs.n	8003130 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b22      	ldr	r3, [pc, #136]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e032      	b.n	8003196 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4916      	ldr	r1, [pc, #88]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	4313      	orrs	r3, r2
 800316c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800316e:	f000 f821 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003172:	4602      	mov	r2, r0
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	490a      	ldr	r1, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_ClockConfig+0x1c8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fb64 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	40023800 	.word	0x40023800
 80031a8:	08004220 	.word	0x08004220
 80031ac:	20000028 	.word	0x20000028
 80031b0:	2000002c 	.word	0x2000002c

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b094      	sub	sp, #80	; 0x50
 80031ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	647b      	str	r3, [r7, #68]	; 0x44
 80031c0:	2300      	movs	r3, #0
 80031c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031c4:	2300      	movs	r3, #0
 80031c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031cc:	4b79      	ldr	r3, [pc, #484]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d00d      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0x40>
 80031d8:	2b08      	cmp	r3, #8
 80031da:	f200 80e1 	bhi.w	80033a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_GetSysClockFreq+0x34>
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x3a>
 80031e6:	e0db      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031ec:	e0db      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ee:	4b73      	ldr	r3, [pc, #460]	; (80033bc <HAL_RCC_GetSysClockFreq+0x208>)
 80031f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f2:	e0d8      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f4:	4b6f      	ldr	r3, [pc, #444]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031fe:	4b6d      	ldr	r3, [pc, #436]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320a:	4b6a      	ldr	r3, [pc, #424]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	2200      	movs	r2, #0
 8003212:	63bb      	str	r3, [r7, #56]	; 0x38
 8003214:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321c:	633b      	str	r3, [r7, #48]	; 0x30
 800321e:	2300      	movs	r3, #0
 8003220:	637b      	str	r3, [r7, #52]	; 0x34
 8003222:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003226:	4622      	mov	r2, r4
 8003228:	462b      	mov	r3, r5
 800322a:	f04f 0000 	mov.w	r0, #0
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	0159      	lsls	r1, r3, #5
 8003234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003238:	0150      	lsls	r0, r2, #5
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4621      	mov	r1, r4
 8003240:	1a51      	subs	r1, r2, r1
 8003242:	6139      	str	r1, [r7, #16]
 8003244:	4629      	mov	r1, r5
 8003246:	eb63 0301 	sbc.w	r3, r3, r1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003258:	4659      	mov	r1, fp
 800325a:	018b      	lsls	r3, r1, #6
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003262:	4651      	mov	r1, sl
 8003264:	018a      	lsls	r2, r1, #6
 8003266:	4651      	mov	r1, sl
 8003268:	ebb2 0801 	subs.w	r8, r2, r1
 800326c:	4659      	mov	r1, fp
 800326e:	eb63 0901 	sbc.w	r9, r3, r1
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800327e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003286:	4690      	mov	r8, r2
 8003288:	4699      	mov	r9, r3
 800328a:	4623      	mov	r3, r4
 800328c:	eb18 0303 	adds.w	r3, r8, r3
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	462b      	mov	r3, r5
 8003294:	eb49 0303 	adc.w	r3, r9, r3
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032a6:	4629      	mov	r1, r5
 80032a8:	024b      	lsls	r3, r1, #9
 80032aa:	4621      	mov	r1, r4
 80032ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032b0:	4621      	mov	r1, r4
 80032b2:	024a      	lsls	r2, r1, #9
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ba:	2200      	movs	r2, #0
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80032be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032c4:	f7fc ffe2 	bl	800028c <__aeabi_uldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4613      	mov	r3, r2
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d0:	e058      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	099b      	lsrs	r3, r3, #6
 80032d8:	2200      	movs	r2, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	4611      	mov	r1, r2
 80032de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032e2:	623b      	str	r3, [r7, #32]
 80032e4:	2300      	movs	r3, #0
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
 80032e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032ec:	4642      	mov	r2, r8
 80032ee:	464b      	mov	r3, r9
 80032f0:	f04f 0000 	mov.w	r0, #0
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	0159      	lsls	r1, r3, #5
 80032fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032fe:	0150      	lsls	r0, r2, #5
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4641      	mov	r1, r8
 8003306:	ebb2 0a01 	subs.w	sl, r2, r1
 800330a:	4649      	mov	r1, r9
 800330c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800331c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003320:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003324:	ebb2 040a 	subs.w	r4, r2, sl
 8003328:	eb63 050b 	sbc.w	r5, r3, fp
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	00eb      	lsls	r3, r5, #3
 8003336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800333a:	00e2      	lsls	r2, r4, #3
 800333c:	4614      	mov	r4, r2
 800333e:	461d      	mov	r5, r3
 8003340:	4643      	mov	r3, r8
 8003342:	18e3      	adds	r3, r4, r3
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	464b      	mov	r3, r9
 8003348:	eb45 0303 	adc.w	r3, r5, r3
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	e9d7 4500 	ldrd	r4, r5, [r7]
 800335a:	4629      	mov	r1, r5
 800335c:	028b      	lsls	r3, r1, #10
 800335e:	4621      	mov	r1, r4
 8003360:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003364:	4621      	mov	r1, r4
 8003366:	028a      	lsls	r2, r1, #10
 8003368:	4610      	mov	r0, r2
 800336a:	4619      	mov	r1, r3
 800336c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336e:	2200      	movs	r2, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	61fa      	str	r2, [r7, #28]
 8003374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003378:	f7fc ff88 	bl	800028c <__aeabi_uldivmod>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4613      	mov	r3, r2
 8003382:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003394:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80033a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3750      	adds	r7, #80	; 0x50
 80033ac:	46bd      	mov	sp, r7
 80033ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	00f42400 	.word	0x00f42400
 80033bc:	007a1200 	.word	0x007a1200

080033c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000028 	.word	0x20000028

080033d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033dc:	f7ff fff0 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	0a9b      	lsrs	r3, r3, #10
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4903      	ldr	r1, [pc, #12]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40023800 	.word	0x40023800
 80033fc:	08004230 	.word	0x08004230

08003400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003404:	f7ff ffdc 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0b5b      	lsrs	r3, r3, #13
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	08004230 	.word	0x08004230

08003428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e03f      	b.n	80034ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd fd76 	bl	8000f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2224      	movs	r2, #36	; 0x24
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800346a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f929 	bl	80036c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b08a      	sub	sp, #40	; 0x28
 80034c6:	af02      	add	r7, sp, #8
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	603b      	str	r3, [r7, #0]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d17c      	bne.n	80035dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <HAL_UART_Transmit+0x2c>
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e075      	b.n	80035de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d101      	bne.n	8003500 <HAL_UART_Transmit+0x3e>
 80034fc:	2302      	movs	r3, #2
 80034fe:	e06e      	b.n	80035de <HAL_UART_Transmit+0x11c>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2221      	movs	r2, #33	; 0x21
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003516:	f7fe f9e5 	bl	80018e4 <HAL_GetTick>
 800351a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	88fa      	ldrh	r2, [r7, #6]
 8003520:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	88fa      	ldrh	r2, [r7, #6]
 8003526:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003530:	d108      	bne.n	8003544 <HAL_UART_Transmit+0x82>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	61bb      	str	r3, [r7, #24]
 8003542:	e003      	b.n	800354c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003548:	2300      	movs	r3, #0
 800354a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003554:	e02a      	b.n	80035ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f840 	bl	80035e6 <UART_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e036      	b.n	80035de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	3302      	adds	r3, #2
 800358a:	61bb      	str	r3, [r7, #24]
 800358c:	e007      	b.n	800359e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	3301      	adds	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1cf      	bne.n	8003556 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f810 	bl	80035e6 <UART_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e006      	b.n	80035de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2220      	movs	r2, #32
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	e000      	b.n	80035de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035dc:	2302      	movs	r3, #2
  }
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b090      	sub	sp, #64	; 0x40
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4613      	mov	r3, r2
 80035f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f6:	e050      	b.n	800369a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d04c      	beq.n	800369a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0x30>
 8003606:	f7fe f96d 	bl	80018e4 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003612:	429a      	cmp	r2, r3
 8003614:	d241      	bcs.n	800369a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	330c      	adds	r3, #12
 800361c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800362c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003636:	637a      	str	r2, [r7, #52]	; 0x34
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800363c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3314      	adds	r3, #20
 8003650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	e853 3f00 	ldrex	r3, [r3]
 8003658:	613b      	str	r3, [r7, #16]
   return(result);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3314      	adds	r3, #20
 8003668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800366a:	623a      	str	r2, [r7, #32]
 800366c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	69f9      	ldr	r1, [r7, #28]
 8003670:	6a3a      	ldr	r2, [r7, #32]
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	61bb      	str	r3, [r7, #24]
   return(result);
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e5      	bne.n	800364a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00f      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d09f      	beq.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3740      	adds	r7, #64	; 0x40
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c8:	b0c0      	sub	sp, #256	; 0x100
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	68d9      	ldr	r1, [r3, #12]
 80036e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	ea40 0301 	orr.w	r3, r0, r1
 80036ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	431a      	orrs	r2, r3
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800371c:	f021 010c 	bic.w	r1, r1, #12
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800372a:	430b      	orrs	r3, r1
 800372c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373e:	6999      	ldr	r1, [r3, #24]
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	ea40 0301 	orr.w	r3, r0, r1
 800374a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800374c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	4b8f      	ldr	r3, [pc, #572]	; (8003990 <UART_SetConfig+0x2cc>)
 8003754:	429a      	cmp	r2, r3
 8003756:	d005      	beq.n	8003764 <UART_SetConfig+0xa0>
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	4b8d      	ldr	r3, [pc, #564]	; (8003994 <UART_SetConfig+0x2d0>)
 8003760:	429a      	cmp	r2, r3
 8003762:	d104      	bne.n	800376e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7ff fe4c 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 8003768:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800376c:	e003      	b.n	8003776 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800376e:	f7ff fe33 	bl	80033d8 <HAL_RCC_GetPCLK1Freq>
 8003772:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003780:	f040 810c 	bne.w	800399c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003788:	2200      	movs	r2, #0
 800378a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800378e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003792:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003796:	4622      	mov	r2, r4
 8003798:	462b      	mov	r3, r5
 800379a:	1891      	adds	r1, r2, r2
 800379c:	65b9      	str	r1, [r7, #88]	; 0x58
 800379e:	415b      	adcs	r3, r3
 80037a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037a6:	4621      	mov	r1, r4
 80037a8:	eb12 0801 	adds.w	r8, r2, r1
 80037ac:	4629      	mov	r1, r5
 80037ae:	eb43 0901 	adc.w	r9, r3, r1
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037c6:	4690      	mov	r8, r2
 80037c8:	4699      	mov	r9, r3
 80037ca:	4623      	mov	r3, r4
 80037cc:	eb18 0303 	adds.w	r3, r8, r3
 80037d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037d4:	462b      	mov	r3, r5
 80037d6:	eb49 0303 	adc.w	r3, r9, r3
 80037da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037f2:	460b      	mov	r3, r1
 80037f4:	18db      	adds	r3, r3, r3
 80037f6:	653b      	str	r3, [r7, #80]	; 0x50
 80037f8:	4613      	mov	r3, r2
 80037fa:	eb42 0303 	adc.w	r3, r2, r3
 80037fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003800:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003804:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003808:	f7fc fd40 	bl	800028c <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4b61      	ldr	r3, [pc, #388]	; (8003998 <UART_SetConfig+0x2d4>)
 8003812:	fba3 2302 	umull	r2, r3, r3, r2
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	011c      	lsls	r4, r3, #4
 800381a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800381e:	2200      	movs	r2, #0
 8003820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003824:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003828:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800382c:	4642      	mov	r2, r8
 800382e:	464b      	mov	r3, r9
 8003830:	1891      	adds	r1, r2, r2
 8003832:	64b9      	str	r1, [r7, #72]	; 0x48
 8003834:	415b      	adcs	r3, r3
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003838:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800383c:	4641      	mov	r1, r8
 800383e:	eb12 0a01 	adds.w	sl, r2, r1
 8003842:	4649      	mov	r1, r9
 8003844:	eb43 0b01 	adc.w	fp, r3, r1
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003854:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800385c:	4692      	mov	sl, r2
 800385e:	469b      	mov	fp, r3
 8003860:	4643      	mov	r3, r8
 8003862:	eb1a 0303 	adds.w	r3, sl, r3
 8003866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800386a:	464b      	mov	r3, r9
 800386c:	eb4b 0303 	adc.w	r3, fp, r3
 8003870:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003880:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003884:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003888:	460b      	mov	r3, r1
 800388a:	18db      	adds	r3, r3, r3
 800388c:	643b      	str	r3, [r7, #64]	; 0x40
 800388e:	4613      	mov	r3, r2
 8003890:	eb42 0303 	adc.w	r3, r2, r3
 8003894:	647b      	str	r3, [r7, #68]	; 0x44
 8003896:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800389a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800389e:	f7fc fcf5 	bl	800028c <__aeabi_uldivmod>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	4b3b      	ldr	r3, [pc, #236]	; (8003998 <UART_SetConfig+0x2d4>)
 80038aa:	fba3 2301 	umull	r2, r3, r3, r1
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	2264      	movs	r2, #100	; 0x64
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	1acb      	subs	r3, r1, r3
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038be:	4b36      	ldr	r3, [pc, #216]	; (8003998 <UART_SetConfig+0x2d4>)
 80038c0:	fba3 2302 	umull	r2, r3, r3, r2
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038cc:	441c      	add	r4, r3
 80038ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038e0:	4642      	mov	r2, r8
 80038e2:	464b      	mov	r3, r9
 80038e4:	1891      	adds	r1, r2, r2
 80038e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80038e8:	415b      	adcs	r3, r3
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038f0:	4641      	mov	r1, r8
 80038f2:	1851      	adds	r1, r2, r1
 80038f4:	6339      	str	r1, [r7, #48]	; 0x30
 80038f6:	4649      	mov	r1, r9
 80038f8:	414b      	adcs	r3, r1
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003908:	4659      	mov	r1, fp
 800390a:	00cb      	lsls	r3, r1, #3
 800390c:	4651      	mov	r1, sl
 800390e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003912:	4651      	mov	r1, sl
 8003914:	00ca      	lsls	r2, r1, #3
 8003916:	4610      	mov	r0, r2
 8003918:	4619      	mov	r1, r3
 800391a:	4603      	mov	r3, r0
 800391c:	4642      	mov	r2, r8
 800391e:	189b      	adds	r3, r3, r2
 8003920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003924:	464b      	mov	r3, r9
 8003926:	460a      	mov	r2, r1
 8003928:	eb42 0303 	adc.w	r3, r2, r3
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800393c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003940:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003944:	460b      	mov	r3, r1
 8003946:	18db      	adds	r3, r3, r3
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
 800394a:	4613      	mov	r3, r2
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003956:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800395a:	f7fc fc97 	bl	800028c <__aeabi_uldivmod>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <UART_SetConfig+0x2d4>)
 8003964:	fba3 1302 	umull	r1, r3, r3, r2
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	2164      	movs	r1, #100	; 0x64
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	3332      	adds	r3, #50	; 0x32
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <UART_SetConfig+0x2d4>)
 8003978:	fba2 2303 	umull	r2, r3, r2, r3
 800397c:	095b      	lsrs	r3, r3, #5
 800397e:	f003 0207 	and.w	r2, r3, #7
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4422      	add	r2, r4
 800398a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800398c:	e105      	b.n	8003b9a <UART_SetConfig+0x4d6>
 800398e:	bf00      	nop
 8003990:	40011000 	.word	0x40011000
 8003994:	40011400 	.word	0x40011400
 8003998:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800399c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039ae:	4642      	mov	r2, r8
 80039b0:	464b      	mov	r3, r9
 80039b2:	1891      	adds	r1, r2, r2
 80039b4:	6239      	str	r1, [r7, #32]
 80039b6:	415b      	adcs	r3, r3
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
 80039ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039be:	4641      	mov	r1, r8
 80039c0:	1854      	adds	r4, r2, r1
 80039c2:	4649      	mov	r1, r9
 80039c4:	eb43 0501 	adc.w	r5, r3, r1
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	00eb      	lsls	r3, r5, #3
 80039d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039d6:	00e2      	lsls	r2, r4, #3
 80039d8:	4614      	mov	r4, r2
 80039da:	461d      	mov	r5, r3
 80039dc:	4643      	mov	r3, r8
 80039de:	18e3      	adds	r3, r4, r3
 80039e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039e4:	464b      	mov	r3, r9
 80039e6:	eb45 0303 	adc.w	r3, r5, r3
 80039ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	008b      	lsls	r3, r1, #2
 8003a0e:	4621      	mov	r1, r4
 8003a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a14:	4621      	mov	r1, r4
 8003a16:	008a      	lsls	r2, r1, #2
 8003a18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a1c:	f7fc fc36 	bl	800028c <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4b60      	ldr	r3, [pc, #384]	; (8003ba8 <UART_SetConfig+0x4e4>)
 8003a26:	fba3 2302 	umull	r2, r3, r3, r2
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	011c      	lsls	r4, r3, #4
 8003a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a40:	4642      	mov	r2, r8
 8003a42:	464b      	mov	r3, r9
 8003a44:	1891      	adds	r1, r2, r2
 8003a46:	61b9      	str	r1, [r7, #24]
 8003a48:	415b      	adcs	r3, r3
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a50:	4641      	mov	r1, r8
 8003a52:	1851      	adds	r1, r2, r1
 8003a54:	6139      	str	r1, [r7, #16]
 8003a56:	4649      	mov	r1, r9
 8003a58:	414b      	adcs	r3, r1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a68:	4659      	mov	r1, fp
 8003a6a:	00cb      	lsls	r3, r1, #3
 8003a6c:	4651      	mov	r1, sl
 8003a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a72:	4651      	mov	r1, sl
 8003a74:	00ca      	lsls	r2, r1, #3
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4642      	mov	r2, r8
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a84:	464b      	mov	r3, r9
 8003a86:	460a      	mov	r2, r1
 8003a88:	eb42 0303 	adc.w	r3, r2, r3
 8003a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003aa8:	4649      	mov	r1, r9
 8003aaa:	008b      	lsls	r3, r1, #2
 8003aac:	4641      	mov	r1, r8
 8003aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	008a      	lsls	r2, r1, #2
 8003ab6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003aba:	f7fc fbe7 	bl	800028c <__aeabi_uldivmod>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <UART_SetConfig+0x4e4>)
 8003ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	2164      	movs	r1, #100	; 0x64
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	3332      	adds	r3, #50	; 0x32
 8003ad6:	4a34      	ldr	r2, [pc, #208]	; (8003ba8 <UART_SetConfig+0x4e4>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae2:	441c      	add	r4, r3
 8003ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ae8:	2200      	movs	r2, #0
 8003aea:	673b      	str	r3, [r7, #112]	; 0x70
 8003aec:	677a      	str	r2, [r7, #116]	; 0x74
 8003aee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003af2:	4642      	mov	r2, r8
 8003af4:	464b      	mov	r3, r9
 8003af6:	1891      	adds	r1, r2, r2
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	415b      	adcs	r3, r3
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b02:	4641      	mov	r1, r8
 8003b04:	1851      	adds	r1, r2, r1
 8003b06:	6039      	str	r1, [r7, #0]
 8003b08:	4649      	mov	r1, r9
 8003b0a:	414b      	adcs	r3, r1
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b1a:	4659      	mov	r1, fp
 8003b1c:	00cb      	lsls	r3, r1, #3
 8003b1e:	4651      	mov	r1, sl
 8003b20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b24:	4651      	mov	r1, sl
 8003b26:	00ca      	lsls	r2, r1, #3
 8003b28:	4610      	mov	r0, r2
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	4642      	mov	r2, r8
 8003b30:	189b      	adds	r3, r3, r2
 8003b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b34:	464b      	mov	r3, r9
 8003b36:	460a      	mov	r2, r1
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	663b      	str	r3, [r7, #96]	; 0x60
 8003b48:	667a      	str	r2, [r7, #100]	; 0x64
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b56:	4649      	mov	r1, r9
 8003b58:	008b      	lsls	r3, r1, #2
 8003b5a:	4641      	mov	r1, r8
 8003b5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b60:	4641      	mov	r1, r8
 8003b62:	008a      	lsls	r2, r1, #2
 8003b64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b68:	f7fc fb90 	bl	800028c <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <UART_SetConfig+0x4e4>)
 8003b72:	fba3 1302 	umull	r1, r3, r3, r2
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	2164      	movs	r1, #100	; 0x64
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	011b      	lsls	r3, r3, #4
 8003b82:	3332      	adds	r3, #50	; 0x32
 8003b84:	4a08      	ldr	r2, [pc, #32]	; (8003ba8 <UART_SetConfig+0x4e4>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4422      	add	r2, r4
 8003b98:	609a      	str	r2, [r3, #8]
}
 8003b9a:	bf00      	nop
 8003b9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ba6:	bf00      	nop
 8003ba8:	51eb851f 	.word	0x51eb851f

08003bac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bac:	b084      	sub	sp, #16
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	f107 001c 	add.w	r0, r7, #28
 8003bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d122      	bne.n	8003c0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 faa2 	bl	8004148 <USB_CoreReset>
 8003c04:	4603      	mov	r3, r0
 8003c06:	73fb      	strb	r3, [r7, #15]
 8003c08:	e01a      	b.n	8003c40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa96 	bl	8004148 <USB_CoreReset>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	639a      	str	r2, [r3, #56]	; 0x38
 8003c32:	e005      	b.n	8003c40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d10b      	bne.n	8003c5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f043 0206 	orr.w	r2, r3, #6
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c6a:	b004      	add	sp, #16
 8003c6c:	4770      	bx	lr

08003c6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 0201 	bic.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d115      	bne.n	8003cde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f7fd fe1c 	bl	80018fc <HAL_Delay>
      ms++;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa2e 	bl	800412c <USB_GetMode>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d01e      	beq.n	8003d14 <USB_SetCurrentMode+0x84>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b31      	cmp	r3, #49	; 0x31
 8003cda:	d9f0      	bls.n	8003cbe <USB_SetCurrentMode+0x2e>
 8003cdc:	e01a      	b.n	8003d14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d115      	bne.n	8003d10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7fd fe03 	bl	80018fc <HAL_Delay>
      ms++;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fa15 	bl	800412c <USB_GetMode>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <USB_SetCurrentMode+0x84>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b31      	cmp	r3, #49	; 0x31
 8003d0c:	d9f0      	bls.n	8003cf0 <USB_SetCurrentMode+0x60>
 8003d0e:	e001      	b.n	8003d14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e005      	b.n	8003d20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b32      	cmp	r3, #50	; 0x32
 8003d18:	d101      	bne.n	8003d1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d28:	b084      	sub	sp, #16
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	e009      	b.n	8003d5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	3340      	adds	r3, #64	; 0x40
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4413      	add	r3, r2
 8003d52:	2200      	movs	r2, #0
 8003d54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b0e      	cmp	r3, #14
 8003d60:	d9f2      	bls.n	8003d48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d11c      	bne.n	8003da2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d76:	f043 0302 	orr.w	r3, r3, #2
 8003d7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38
 8003da0:	e00b      	b.n	8003dba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dcc:	4619      	mov	r1, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	680b      	ldr	r3, [r1, #0]
 8003dd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10c      	bne.n	8003dfa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003de6:	2100      	movs	r1, #0
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f965 	bl	80040b8 <USB_SetDevSpeed>
 8003dee:	e008      	b.n	8003e02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003df0:	2101      	movs	r1, #1
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f960 	bl	80040b8 <USB_SetDevSpeed>
 8003df8:	e003      	b.n	8003e02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003dfa:	2103      	movs	r1, #3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f95b 	bl	80040b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e02:	2110      	movs	r1, #16
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f8f3 	bl	8003ff0 <USB_FlushTxFifo>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f91f 	bl	8004058 <USB_FlushRxFifo>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	461a      	mov	r2, r3
 8003e38:	2300      	movs	r3, #0
 8003e3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e42:	461a      	mov	r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	e043      	b.n	8003ed6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e64:	d118      	bne.n	8003e98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e013      	b.n	8003eaa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e008      	b.n	8003eaa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2300      	movs	r3, #0
 8003eba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d3b7      	bcc.n	8003e4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	e043      	b.n	8003f6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003efa:	d118      	bne.n	8003f2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e013      	b.n	8003f40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f24:	461a      	mov	r2, r3
 8003f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e008      	b.n	8003f40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d3b7      	bcc.n	8003ee4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d105      	bne.n	8003fa8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f043 0210 	orr.w	r2, r3, #16
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699a      	ldr	r2, [r3, #24]
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <USB_DevInit+0x2c4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d005      	beq.n	8003fc6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f043 0208 	orr.w	r2, r3, #8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fe8:	b004      	add	sp, #16
 8003fea:	4770      	bx	lr
 8003fec:	803c3800 	.word	0x803c3800

08003ff0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3301      	adds	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a13      	ldr	r2, [pc, #76]	; (8004054 <USB_FlushTxFifo+0x64>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e01b      	b.n	8004048 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	daf2      	bge.n	8003ffe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	019b      	lsls	r3, r3, #6
 8004020:	f043 0220 	orr.w	r2, r3, #32
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	3301      	adds	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a08      	ldr	r2, [pc, #32]	; (8004054 <USB_FlushTxFifo+0x64>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e006      	b.n	8004048 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b20      	cmp	r3, #32
 8004044:	d0f0      	beq.n	8004028 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	00030d40 	.word	0x00030d40

08004058 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3301      	adds	r3, #1
 8004068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a11      	ldr	r2, [pc, #68]	; (80040b4 <USB_FlushRxFifo+0x5c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e018      	b.n	80040a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	daf2      	bge.n	8004064 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2210      	movs	r2, #16
 8004086:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3301      	adds	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a08      	ldr	r2, [pc, #32]	; (80040b4 <USB_FlushRxFifo+0x5c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e006      	b.n	80040a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d0f0      	beq.n	8004088 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	00030d40 	.word	0x00030d40

080040b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	78fb      	ldrb	r3, [r7, #3]
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004104:	f023 0303 	bic.w	r3, r3, #3
 8004108:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004118:	f043 0302 	orr.w	r3, r3, #2
 800411c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0301 	and.w	r3, r3, #1
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	3301      	adds	r3, #1
 8004158:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a13      	ldr	r2, [pc, #76]	; (80041ac <USB_CoreReset+0x64>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d901      	bls.n	8004166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e01b      	b.n	800419e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	daf2      	bge.n	8004154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3301      	adds	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4a09      	ldr	r2, [pc, #36]	; (80041ac <USB_CoreReset+0x64>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d901      	bls.n	8004190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e006      	b.n	800419e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d0f0      	beq.n	800417e <USB_CoreReset+0x36>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	00030d40 	.word	0x00030d40

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4d0d      	ldr	r5, [pc, #52]	; (80041e8 <__libc_init_array+0x38>)
 80041b4:	4c0d      	ldr	r4, [pc, #52]	; (80041ec <__libc_init_array+0x3c>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	2600      	movs	r6, #0
 80041bc:	42a6      	cmp	r6, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	4d0b      	ldr	r5, [pc, #44]	; (80041f0 <__libc_init_array+0x40>)
 80041c2:	4c0c      	ldr	r4, [pc, #48]	; (80041f4 <__libc_init_array+0x44>)
 80041c4:	f000 f820 	bl	8004208 <_init>
 80041c8:	1b64      	subs	r4, r4, r5
 80041ca:	10a4      	asrs	r4, r4, #2
 80041cc:	2600      	movs	r6, #0
 80041ce:	42a6      	cmp	r6, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d8:	4798      	blx	r3
 80041da:	3601      	adds	r6, #1
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e2:	4798      	blx	r3
 80041e4:	3601      	adds	r6, #1
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	08004a44 	.word	0x08004a44
 80041ec:	08004a44 	.word	0x08004a44
 80041f0:	08004a44 	.word	0x08004a44
 80041f4:	08004a48 	.word	0x08004a48

080041f8 <memset>:
 80041f8:	4402      	add	r2, r0
 80041fa:	4603      	mov	r3, r0
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d100      	bne.n	8004202 <memset+0xa>
 8004200:	4770      	bx	lr
 8004202:	f803 1b01 	strb.w	r1, [r3], #1
 8004206:	e7f9      	b.n	80041fc <memset+0x4>

08004208 <_init>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr

08004214 <_fini>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr
